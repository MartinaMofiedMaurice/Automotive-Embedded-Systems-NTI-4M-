
LCD_DRIVER_NTI0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000244a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000244a  000024de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  000024e6  2**0
                  ALLOC
  3 .stab         000017dc  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b63  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004827  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e4       	ldi	r30, 0x4A	; 74
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <main>
      8a:	0c 94 23 12 	jmp	0x2446	; 0x2446 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidInit>:
#include "DIO_configuration.h"
#include "DIO_private.h"


//Initializing ports
void MDIO_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG= CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
			PORTA_PIN4_DIRECTION,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG= CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
				PORTB_PIN4_DIRECTION,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG= CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
				PORTC_PIN4_DIRECTION,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG= CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24
				PORTD_PIN4_DIRECTION,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	//To give a value for the port wether it was low or high for beginning
	PORTA_REG= CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
			PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG= CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	10 82       	st	Z, r1
			PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG= CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
			PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG= CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
			PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <MDIO_voidSetPortDirection>:
//To Set PORT Valuetakes PORT NAME and PORT DIRECTION
//PORT ID:PORTA,BCD
//PIN ID:0/7

void MDIO_voidSetPortDirection(u8 A_u8PortId,u8 A_u8Direction)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <MDIO_voidSetPortDirection+0x6>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <MDIO_voidSetPortDirection+0x8>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId) {
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	3c 83       	std	Y+4, r19	; 0x04
     ba4:	2b 83       	std	Y+3, r18	; 0x03
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	d1 f0       	breq	.+52     	; 0xbe4 <MDIO_voidSetPortDirection+0x58>
     bb0:	2b 81       	ldd	r18, Y+3	; 0x03
     bb2:	3c 81       	ldd	r19, Y+4	; 0x04
     bb4:	22 30       	cpi	r18, 0x02	; 2
     bb6:	31 05       	cpc	r19, r1
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <MDIO_voidSetPortDirection+0x38>
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	61 f0       	breq	.+24     	; 0xbda <MDIO_voidSetPortDirection+0x4e>
     bc2:	1e c0       	rjmp	.+60     	; 0xc00 <MDIO_voidSetPortDirection+0x74>
     bc4:	2b 81       	ldd	r18, Y+3	; 0x03
     bc6:	3c 81       	ldd	r19, Y+4	; 0x04
     bc8:	22 30       	cpi	r18, 0x02	; 2
     bca:	31 05       	cpc	r19, r1
     bcc:	81 f0       	breq	.+32     	; 0xbee <MDIO_voidSetPortDirection+0x62>
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	83 30       	cpi	r24, 0x03	; 3
     bd4:	91 05       	cpc	r25, r1
     bd6:	81 f0       	breq	.+32     	; 0xbf8 <MDIO_voidSetPortDirection+0x6c>
     bd8:	13 c0       	rjmp	.+38     	; 0xc00 <MDIO_voidSetPortDirection+0x74>
		case PORTA:
			DDRA_REG=A_u8Direction;
     bda:	ea e3       	ldi	r30, 0x3A	; 58
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	80 83       	st	Z, r24
     be2:	0e c0       	rjmp	.+28     	; 0xc00 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTB:
			DDRB_REG=A_u8Direction;
     be4:	e7 e3       	ldi	r30, 0x37	; 55
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	80 83       	st	Z, r24
     bec:	09 c0       	rjmp	.+18     	; 0xc00 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTC:
			DDRC_REG=A_u8Direction;
     bee:	e4 e3       	ldi	r30, 0x34	; 52
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	80 83       	st	Z, r24
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTD:
			DDRD_REG=A_u8Direction;
     bf8:	e1 e3       	ldi	r30, 0x31	; 49
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <MDIO_voidSetPortValue>:

//To Set PORT Value takes PORT NAME and PORT VALUE
//PORT ID:PORTA,BCD
//PIN ID:0/7
void MDIO_voidSetPortValue(u8 A_u8PortId,u8 A_u8Value)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	00 d0       	rcall	.+0      	; 0xc14 <MDIO_voidSetPortValue+0x6>
     c14:	00 d0       	rcall	.+0      	; 0xc16 <MDIO_voidSetPortValue+0x8>
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId) {
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	3c 83       	std	Y+4, r19	; 0x04
     c26:	2b 83       	std	Y+3, r18	; 0x03
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	91 05       	cpc	r25, r1
     c30:	d1 f0       	breq	.+52     	; 0xc66 <MDIO_voidSetPortValue+0x58>
     c32:	2b 81       	ldd	r18, Y+3	; 0x03
     c34:	3c 81       	ldd	r19, Y+4	; 0x04
     c36:	22 30       	cpi	r18, 0x02	; 2
     c38:	31 05       	cpc	r19, r1
     c3a:	2c f4       	brge	.+10     	; 0xc46 <MDIO_voidSetPortValue+0x38>
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	61 f0       	breq	.+24     	; 0xc5c <MDIO_voidSetPortValue+0x4e>
     c44:	1e c0       	rjmp	.+60     	; 0xc82 <MDIO_voidSetPortValue+0x74>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	22 30       	cpi	r18, 0x02	; 2
     c4c:	31 05       	cpc	r19, r1
     c4e:	81 f0       	breq	.+32     	; 0xc70 <MDIO_voidSetPortValue+0x62>
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	91 05       	cpc	r25, r1
     c58:	81 f0       	breq	.+32     	; 0xc7a <MDIO_voidSetPortValue+0x6c>
     c5a:	13 c0       	rjmp	.+38     	; 0xc82 <MDIO_voidSetPortValue+0x74>
		case PORTA:
			PORTA_REG=A_u8Value;
     c5c:	eb e3       	ldi	r30, 0x3B	; 59
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	80 83       	st	Z, r24
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <MDIO_voidSetPortValue+0x74>
			break;
		case PORTB:
			PORTB_REG=A_u8Value;
     c66:	e8 e3       	ldi	r30, 0x38	; 56
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	80 83       	st	Z, r24
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <MDIO_voidSetPortValue+0x74>
			break;
		case PORTC:
			PORTC_REG=A_u8Value;
     c70:	e5 e3       	ldi	r30, 0x35	; 53
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	80 83       	st	Z, r24
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <MDIO_voidSetPortValue+0x74>
			break;
		case PORTD:
			PORTD_REG=A_u8Value;
     c7a:	e2 e3       	ldi	r30, 0x32	; 50
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <MDIO_voidSetPinDirection>:
//To Set pin Dirtection either OUTPUT or INPUT takes PORT NAME ,PIN NUMBER and PIN DIRECTION
//PORT ID:PORTA,BCD
//PIN ID:0/7
//PIN_DIRECTION:OUTPUT,INPUT
void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Direction)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	2d 97       	sbiw	r28, 0x0d	; 13
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6a 83       	std	Y+2, r22	; 0x02
     ca8:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	3d 87       	std	Y+13, r19	; 0x0d
     cb2:	2c 87       	std	Y+12, r18	; 0x0c
     cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb6:	9d 85       	ldd	r25, Y+13	; 0x0d
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	91 05       	cpc	r25, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <MDIO_voidSetPinDirection+0x30>
     cbe:	4f c0       	rjmp	.+158    	; 0xd5e <MDIO_voidSetPinDirection+0xce>
     cc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     cc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     cc4:	22 30       	cpi	r18, 0x02	; 2
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f4       	brge	.+10     	; 0xcd4 <MDIO_voidSetPinDirection+0x44>
     cca:	8c 85       	ldd	r24, Y+12	; 0x0c
     ccc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	71 f0       	breq	.+28     	; 0xcee <MDIO_voidSetPinDirection+0x5e>
     cd2:	eb c0       	rjmp	.+470    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
     cd4:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd6:	3d 85       	ldd	r19, Y+13	; 0x0d
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <MDIO_voidSetPinDirection+0x50>
     cde:	77 c0       	rjmp	.+238    	; 0xdce <MDIO_voidSetPinDirection+0x13e>
     ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <MDIO_voidSetPinDirection+0x5c>
     cea:	a9 c0       	rjmp	.+338    	; 0xe3e <MDIO_voidSetPinDirection+0x1ae>
     cec:	de c0       	rjmp	.+444    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
		case PORTA:
			switch (A_u8Direction) {
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	3b 87       	std	Y+11, r19	; 0x0b
     cf6:	2a 87       	std	Y+10, r18	; 0x0a
     cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <MDIO_voidSetPinDirection+0xa4>
     d00:	2a 85       	ldd	r18, Y+10	; 0x0a
     d02:	3b 85       	ldd	r19, Y+11	; 0x0b
     d04:	21 30       	cpi	r18, 0x01	; 1
     d06:	31 05       	cpc	r19, r1
     d08:	09 f0       	breq	.+2      	; 0xd0c <MDIO_voidSetPinDirection+0x7c>
     d0a:	cf c0       	rjmp	.+414    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
			case PIN_OUTPUT:
				SET_BIT(DDRA_REG,A_u8PinId);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MDIO_voidSetPinDirection+0x9a>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MDIO_voidSetPinDirection+0x96>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	bb c0       	rjmp	.+374    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
				break;
			case PIN_INPUT:
				CLR_BIT(DDRA_REG,A_u8PinId);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MDIO_voidSetPinDirection+0xc2>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MDIO_voidSetPinDirection+0xbe>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	a6 c0       	rjmp	.+332    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
				break;
		}

			break;
		case PORTB:
				switch (A_u8Direction) {
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	39 87       	std	Y+9, r19	; 0x09
     d66:	28 87       	std	Y+8, r18	; 0x08
     d68:	88 85       	ldd	r24, Y+8	; 0x08
     d6a:	99 85       	ldd	r25, Y+9	; 0x09
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	d1 f0       	breq	.+52     	; 0xda4 <MDIO_voidSetPinDirection+0x114>
     d70:	28 85       	ldd	r18, Y+8	; 0x08
     d72:	39 85       	ldd	r19, Y+9	; 0x09
     d74:	21 30       	cpi	r18, 0x01	; 1
     d76:	31 05       	cpc	r19, r1
     d78:	09 f0       	breq	.+2      	; 0xd7c <MDIO_voidSetPinDirection+0xec>
     d7a:	97 c0       	rjmp	.+302    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
				case PIN_OUTPUT:
					SET_BIT(DDRB_REG,A_u8PinId);
     d7c:	a7 e3       	ldi	r26, 0x37	; 55
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e3       	ldi	r30, 0x37	; 55
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <MDIO_voidSetPinDirection+0x10a>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <MDIO_voidSetPinDirection+0x106>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	83 c0       	rjmp	.+262    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
					break;
				case PIN_INPUT:
					CLR_BIT(DDRB_REG,A_u8PinId);
     da4:	a7 e3       	ldi	r26, 0x37	; 55
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e7 e3       	ldi	r30, 0x37	; 55
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <MDIO_voidSetPinDirection+0x132>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <MDIO_voidSetPinDirection+0x12e>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	6e c0       	rjmp	.+220    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
					break;
			}

				break;
		case PORTC:
					switch (A_u8Direction) {
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3f 83       	std	Y+7, r19	; 0x07
     dd6:	2e 83       	std	Y+6, r18	; 0x06
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	9f 81       	ldd	r25, Y+7	; 0x07
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	d1 f0       	breq	.+52     	; 0xe14 <MDIO_voidSetPinDirection+0x184>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	21 30       	cpi	r18, 0x01	; 1
     de6:	31 05       	cpc	r19, r1
     de8:	09 f0       	breq	.+2      	; 0xdec <MDIO_voidSetPinDirection+0x15c>
     dea:	5f c0       	rjmp	.+190    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
					case PIN_OUTPUT:
						SET_BIT(DDRC_REG,A_u8PinId);
     dec:	a4 e3       	ldi	r26, 0x34	; 52
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e4 e3       	ldi	r30, 0x34	; 52
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <MDIO_voidSetPinDirection+0x17a>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <MDIO_voidSetPinDirection+0x176>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	4b c0       	rjmp	.+150    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
						break;
					case PIN_INPUT:
						CLR_BIT(DDRC_REG,A_u8PinId);
     e14:	a4 e3       	ldi	r26, 0x34	; 52
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e4 e3       	ldi	r30, 0x34	; 52
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <MDIO_voidSetPinDirection+0x1a2>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <MDIO_voidSetPinDirection+0x19e>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	36 c0       	rjmp	.+108    	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
				}

					break;

			case PORTD:
						switch (A_u8Direction) {
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	3d 83       	std	Y+5, r19	; 0x05
     e46:	2c 83       	std	Y+4, r18	; 0x04
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	c9 f0       	breq	.+50     	; 0xe82 <MDIO_voidSetPinDirection+0x1f2>
     e50:	2c 81       	ldd	r18, Y+4	; 0x04
     e52:	3d 81       	ldd	r19, Y+5	; 0x05
     e54:	21 30       	cpi	r18, 0x01	; 1
     e56:	31 05       	cpc	r19, r1
     e58:	41 f5       	brne	.+80     	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
						case PIN_OUTPUT:
							SET_BIT(DDRD_REG,A_u8PinId);
     e5a:	a1 e3       	ldi	r26, 0x31	; 49
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e1 e3       	ldi	r30, 0x31	; 49
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <MDIO_voidSetPinDirection+0x1e8>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <MDIO_voidSetPinDirection+0x1e4>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <MDIO_voidSetPinDirection+0x21a>
							break;
						case PIN_INPUT:
							CLR_BIT(DDRD_REG,A_u8PinId);
     e82:	a1 e3       	ldi	r26, 0x31	; 49
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <MDIO_voidSetPinDirection+0x210>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <MDIO_voidSetPinDirection+0x20c>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
     eaa:	2d 96       	adiw	r28, 0x0d	; 13
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <MDIO_voidSetPinValue>:
//To Set pin Value either HIGH or LOW takes PORT NAME ,PIN NUMBER and PIN VALUE
//PORT ID:PORTA,BCD
//PIN ID:0/7
//VALUE:HIGH,LOW
void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Value)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	2d 97       	sbiw	r28, 0x0d	; 13
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	6a 83       	std	Y+2, r22	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 87       	std	Y+13, r19	; 0x0d
     ede:	2c 87       	std	Y+12, r18	; 0x0c
     ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <MDIO_voidSetPinValue+0x30>
     eea:	4f c0       	rjmp	.+158    	; 0xf8a <MDIO_voidSetPinValue+0xce>
     eec:	2c 85       	ldd	r18, Y+12	; 0x0c
     eee:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <MDIO_voidSetPinValue+0x44>
     ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef8:	9d 85       	ldd	r25, Y+13	; 0x0d
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	71 f0       	breq	.+28     	; 0xf1a <MDIO_voidSetPinValue+0x5e>
     efe:	eb c0       	rjmp	.+470    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
     f00:	2c 85       	ldd	r18, Y+12	; 0x0c
     f02:	3d 85       	ldd	r19, Y+13	; 0x0d
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <MDIO_voidSetPinValue+0x50>
     f0a:	77 c0       	rjmp	.+238    	; 0xffa <MDIO_voidSetPinValue+0x13e>
     f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <MDIO_voidSetPinValue+0x5c>
     f16:	a9 c0       	rjmp	.+338    	; 0x106a <MDIO_voidSetPinValue+0x1ae>
     f18:	de c0       	rjmp	.+444    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
		case PORTA:
			switch (A_u8Value ) {
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3b 87       	std	Y+11, r19	; 0x0b
     f22:	2a 87       	std	Y+10, r18	; 0x0a
     f24:	8a 85       	ldd	r24, Y+10	; 0x0a
     f26:	9b 85       	ldd	r25, Y+11	; 0x0b
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	d1 f0       	breq	.+52     	; 0xf60 <MDIO_voidSetPinValue+0xa4>
     f2c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f2e:	3b 85       	ldd	r19, Y+11	; 0x0b
     f30:	21 30       	cpi	r18, 0x01	; 1
     f32:	31 05       	cpc	r19, r1
     f34:	09 f0       	breq	.+2      	; 0xf38 <MDIO_voidSetPinValue+0x7c>
     f36:	cf c0       	rjmp	.+414    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
			case PIN_HIGH:
				SET_BIT(PORTA_REG,A_u8PinId);
     f38:	ab e3       	ldi	r26, 0x3B	; 59
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e3       	ldi	r30, 0x3B	; 59
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <MDIO_voidSetPinValue+0x9a>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <MDIO_voidSetPinValue+0x96>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	bb c0       	rjmp	.+374    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
				break;
			case PIN_LOW:
				CLR_BIT(PORTA_REG,A_u8PinId);
     f60:	ab e3       	ldi	r26, 0x3B	; 59
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	eb e3       	ldi	r30, 0x3B	; 59
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <MDIO_voidSetPinValue+0xc2>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <MDIO_voidSetPinValue+0xbe>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	a6 c0       	rjmp	.+332    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
				break;
		}

			break;
		case PORTB:
				switch (A_u8Value ) {
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	39 87       	std	Y+9, r19	; 0x09
     f92:	28 87       	std	Y+8, r18	; 0x08
     f94:	88 85       	ldd	r24, Y+8	; 0x08
     f96:	99 85       	ldd	r25, Y+9	; 0x09
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	d1 f0       	breq	.+52     	; 0xfd0 <MDIO_voidSetPinValue+0x114>
     f9c:	28 85       	ldd	r18, Y+8	; 0x08
     f9e:	39 85       	ldd	r19, Y+9	; 0x09
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	31 05       	cpc	r19, r1
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <MDIO_voidSetPinValue+0xec>
     fa6:	97 c0       	rjmp	.+302    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
				case PIN_HIGH:
					SET_BIT(PORTB_REG,A_u8PinId);
     fa8:	a8 e3       	ldi	r26, 0x38	; 56
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <MDIO_voidSetPinValue+0x10a>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <MDIO_voidSetPinValue+0x106>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	83 c0       	rjmp	.+262    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
					break;
				case PIN_LOW:
					CLR_BIT(PORTB_REG,A_u8PinId);
     fd0:	a8 e3       	ldi	r26, 0x38	; 56
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <MDIO_voidSetPinValue+0x132>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <MDIO_voidSetPinValue+0x12e>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	6e c0       	rjmp	.+220    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
					break;
			}

				break;
		case PORTC:
					switch (A_u8Value ) {
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3f 83       	std	Y+7, r19	; 0x07
    1002:	2e 83       	std	Y+6, r18	; 0x06
    1004:	8e 81       	ldd	r24, Y+6	; 0x06
    1006:	9f 81       	ldd	r25, Y+7	; 0x07
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	d1 f0       	breq	.+52     	; 0x1040 <MDIO_voidSetPinValue+0x184>
    100c:	2e 81       	ldd	r18, Y+6	; 0x06
    100e:	3f 81       	ldd	r19, Y+7	; 0x07
    1010:	21 30       	cpi	r18, 0x01	; 1
    1012:	31 05       	cpc	r19, r1
    1014:	09 f0       	breq	.+2      	; 0x1018 <MDIO_voidSetPinValue+0x15c>
    1016:	5f c0       	rjmp	.+190    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
					case PIN_HIGH:
						SET_BIT(PORTC_REG,A_u8PinId);
    1018:	a5 e3       	ldi	r26, 0x35	; 53
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e3       	ldi	r30, 0x35	; 53
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <MDIO_voidSetPinValue+0x17a>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <MDIO_voidSetPinValue+0x176>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	4b c0       	rjmp	.+150    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
						break;
					case PIN_LOW:
						CLR_BIT(PORTC_REG,A_u8PinId);
    1040:	a5 e3       	ldi	r26, 0x35	; 53
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e5 e3       	ldi	r30, 0x35	; 53
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <MDIO_voidSetPinValue+0x1a2>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <MDIO_voidSetPinValue+0x19e>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	36 c0       	rjmp	.+108    	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
				}

					break;

			case PORTD:
						switch (A_u8Value ) {
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3d 83       	std	Y+5, r19	; 0x05
    1072:	2c 83       	std	Y+4, r18	; 0x04
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
    1076:	9d 81       	ldd	r25, Y+5	; 0x05
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	c9 f0       	breq	.+50     	; 0x10ae <MDIO_voidSetPinValue+0x1f2>
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	21 30       	cpi	r18, 0x01	; 1
    1082:	31 05       	cpc	r19, r1
    1084:	41 f5       	brne	.+80     	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
						case PIN_HIGH:
							SET_BIT(PORTD_REG,A_u8PinId);
    1086:	a2 e3       	ldi	r26, 0x32	; 50
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e2 e3       	ldi	r30, 0x32	; 50
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <MDIO_voidSetPinValue+0x1e8>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <MDIO_voidSetPinValue+0x1e4>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <MDIO_voidSetPinValue+0x21a>
							break;
						case PIN_LOW:
							CLR_BIT(PORTD_REG,A_u8PinId);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <MDIO_voidSetPinValue+0x210>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <MDIO_voidSetPinValue+0x20c>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    10d6:	2d 96       	adiw	r28, 0x0d	; 13
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <MDIO_u8GetPinValue>:
//PORT ID:PORTA,BCD
//PIN ID:0/7


u8 MDIO_u8GetPinValue(u8 A_u8PortID,u8 A_u8PinID)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <MDIO_u8GetPinValue+0x6>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <MDIO_u8GetPinValue+0x8>
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=0;
    10fa:	19 82       	std	Y+1, r1	; 0x01
	switch (A_u8PortID) {
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3d 83       	std	Y+5, r19	; 0x05
    1104:	2c 83       	std	Y+4, r18	; 0x04
    1106:	4c 81       	ldd	r20, Y+4	; 0x04
    1108:	5d 81       	ldd	r21, Y+5	; 0x05
    110a:	41 30       	cpi	r20, 0x01	; 1
    110c:	51 05       	cpc	r21, r1
    110e:	41 f1       	breq	.+80     	; 0x1160 <MDIO_u8GetPinValue+0x78>
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	91 05       	cpc	r25, r1
    1118:	34 f4       	brge	.+12     	; 0x1126 <MDIO_u8GetPinValue+0x3e>
    111a:	2c 81       	ldd	r18, Y+4	; 0x04
    111c:	3d 81       	ldd	r19, Y+5	; 0x05
    111e:	21 15       	cp	r18, r1
    1120:	31 05       	cpc	r19, r1
    1122:	61 f0       	breq	.+24     	; 0x113c <MDIO_u8GetPinValue+0x54>
    1124:	52 c0       	rjmp	.+164    	; 0x11ca <MDIO_u8GetPinValue+0xe2>
    1126:	4c 81       	ldd	r20, Y+4	; 0x04
    1128:	5d 81       	ldd	r21, Y+5	; 0x05
    112a:	42 30       	cpi	r20, 0x02	; 2
    112c:	51 05       	cpc	r21, r1
    112e:	51 f1       	breq	.+84     	; 0x1184 <MDIO_u8GetPinValue+0x9c>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	b9 f1       	breq	.+110    	; 0x11a8 <MDIO_u8GetPinValue+0xc0>
    113a:	47 c0       	rjmp	.+142    	; 0x11ca <MDIO_u8GetPinValue+0xe2>
		case PORTA:
			local_u8PinValue=GET_BIT(PINA_REG,A_u8PinID);
    113c:	e9 e3       	ldi	r30, 0x39	; 57
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <MDIO_u8GetPinValue+0x6c>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <MDIO_u8GetPinValue+0x68>
    1158:	ca 01       	movw	r24, r20
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	35 c0       	rjmp	.+106    	; 0x11ca <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTB:
			local_u8PinValue=GET_BIT(PINB_REG,A_u8PinID);
    1160:	e6 e3       	ldi	r30, 0x36	; 54
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <MDIO_u8GetPinValue+0x90>
    1174:	55 95       	asr	r21
    1176:	47 95       	ror	r20
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <MDIO_u8GetPinValue+0x8c>
    117c:	ca 01       	movw	r24, r20
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	23 c0       	rjmp	.+70     	; 0x11ca <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTC:
			local_u8PinValue=GET_BIT(PINC_REG,A_u8PinID);
    1184:	e3 e3       	ldi	r30, 0x33	; 51
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <MDIO_u8GetPinValue+0xb4>
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <MDIO_u8GetPinValue+0xb0>
    11a0:	ca 01       	movw	r24, r20
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	11 c0       	rjmp	.+34     	; 0x11ca <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTD:
			local_u8PinValue=GET_BIT(PIND_REG,A_u8PinID);
    11a8:	e0 e3       	ldi	r30, 0x30	; 48
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <MDIO_u8GetPinValue+0xd8>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <MDIO_u8GetPinValue+0xd4>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	return local_u8PinValue;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <MDIO_voidToggle>:
//To Toggle a pin it takes  PORT NAME ,PIN NUMBER and PIN VALUE
void MDIO_voidToggle(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Value)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <MDIO_voidToggle+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <MDIO_voidToggle+0x8>
    11e4:	0f 92       	push	r0
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6a 83       	std	Y+2, r22	; 0x02
    11ee:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3d 83       	std	Y+5, r19	; 0x05
    11f8:	2c 83       	std	Y+4, r18	; 0x04
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	49 f1       	breq	.+82     	; 0x1256 <MDIO_voidToggle+0x7a>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <MDIO_voidToggle+0x3c>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	61 f0       	breq	.+24     	; 0x122e <MDIO_voidToggle+0x52>
    1216:	5a c0       	rjmp	.+180    	; 0x12cc <MDIO_voidToggle+0xf0>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	71 f1       	breq	.+92     	; 0x127e <MDIO_voidToggle+0xa2>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	91 05       	cpc	r25, r1
    122a:	e9 f1       	breq	.+122    	; 0x12a6 <MDIO_voidToggle+0xca>
    122c:	4f c0       	rjmp	.+158    	; 0x12cc <MDIO_voidToggle+0xf0>
		case PORTA:
			TOGGLE_BIT(PORTA_REG,A_u8PinId);
    122e:	ab e3       	ldi	r26, 0x3B	; 59
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <MDIO_voidToggle+0x70>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <MDIO_voidToggle+0x6c>
    1250:	84 27       	eor	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	3b c0       	rjmp	.+118    	; 0x12cc <MDIO_voidToggle+0xf0>
			break;
		case PORTB:
			TOGGLE_BIT(PORTB_REG,A_u8PinId);
    1256:	a8 e3       	ldi	r26, 0x38	; 56
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <MDIO_voidToggle+0x98>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <MDIO_voidToggle+0x94>
    1278:	84 27       	eor	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	27 c0       	rjmp	.+78     	; 0x12cc <MDIO_voidToggle+0xf0>
				break;
		case PORTC:
			TOGGLE_BIT(PORTC_REG,A_u8PinId);
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <MDIO_voidToggle+0xc0>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <MDIO_voidToggle+0xbc>
    12a0:	84 27       	eor	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <MDIO_voidToggle+0xf0>
					break;

			case PORTD:
				TOGGLE_BIT(PORTD_REG,A_u8PinId);
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <MDIO_voidToggle+0xe8>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <MDIO_voidToggle+0xe4>
    12c8:	84 27       	eor	r24, r20
    12ca:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <HLCD_voidSendCommand>:
#include "LCD_Configurations.h"
#include "LCD_Interface.h"
#include "LCD_Private.h"


void HLCD_voidSendCommand(u8 A_u8Command){
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	c7 54       	subi	r28, 0x47	; 71
    12ea:	d0 40       	sbci	r29, 0x00	; 0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	fe 01       	movw	r30, r28
    12f8:	e9 5b       	subi	r30, 0xB9	; 185
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 83       	st	Z, r24

	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Command,4));
    12fe:	fe 01       	movw	r30, r28
    1300:	e9 5b       	subi	r30, 0xB9	; 185
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	82 95       	swap	r24
    1308:	8f 70       	andi	r24, 0x0F	; 15
    130a:	98 2f       	mov	r25, r24
    130c:	91 70       	andi	r25, 0x01	; 1
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	49 2f       	mov	r20, r25
    1314:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Command,5));
    1318:	fe 01       	movw	r30, r28
    131a:	e9 5b       	subi	r30, 0xB9	; 185
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	82 95       	swap	r24
    1322:	86 95       	lsr	r24
    1324:	87 70       	andi	r24, 0x07	; 7
    1326:	98 2f       	mov	r25, r24
    1328:	91 70       	andi	r25, 0x01	; 1
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	49 2f       	mov	r20, r25
    1330:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Command,6));
    1334:	fe 01       	movw	r30, r28
    1336:	e9 5b       	subi	r30, 0xB9	; 185
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 81       	ld	r24, Z
    133c:	82 95       	swap	r24
    133e:	86 95       	lsr	r24
    1340:	86 95       	lsr	r24
    1342:	83 70       	andi	r24, 0x03	; 3
    1344:	98 2f       	mov	r25, r24
    1346:	91 70       	andi	r25, 0x01	; 1
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	49 2f       	mov	r20, r25
    134e:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Command,7));
    1352:	fe 01       	movw	r30, r28
    1354:	e9 5b       	subi	r30, 0xB9	; 185
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	80 81       	ld	r24, Z
    135a:	98 2f       	mov	r25, r24
    135c:	99 1f       	adc	r25, r25
    135e:	99 27       	eor	r25, r25
    1360:	99 1f       	adc	r25, r25
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	49 2f       	mov	r20, r25
    1368:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_LOW);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	63 e0       	ldi	r22, 0x03	; 3
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    1376:	fe 01       	movw	r30, r28
    1378:	ed 5b       	subi	r30, 0xBD	; 189
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e8       	ldi	r26, 0x80	; 128
    1382:	bf e3       	ldi	r27, 0x3F	; 63
    1384:	80 83       	st	Z, r24
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	a2 83       	std	Z+2, r26	; 0x02
    138a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138c:	8e 01       	movw	r16, r28
    138e:	01 5c       	subi	r16, 0xC1	; 193
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	fe 01       	movw	r30, r28
    1394:	ed 5b       	subi	r30, 0xBD	; 189
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e8       	ldi	r19, 0x80	; 128
    13a4:	4b e3       	ldi	r20, 0x3B	; 59
    13a6:	55 e4       	ldi	r21, 0x45	; 69
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	f8 01       	movw	r30, r16
    13b2:	80 83       	st	Z, r24
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	a2 83       	std	Z+2, r26	; 0x02
    13b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ba:	fe 01       	movw	r30, r28
    13bc:	ff 96       	adiw	r30, 0x3f	; 63
    13be:	60 81       	ld	r22, Z
    13c0:	71 81       	ldd	r23, Z+1	; 0x01
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <HLCD_voidSendCommand+0x104>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9e af       	std	Y+62, r25	; 0x3e
    13dc:	8d af       	std	Y+61, r24	; 0x3d
    13de:	46 c0       	rjmp	.+140    	; 0x146c <HLCD_voidSendCommand+0x190>
	else if (__tmp > 65535)
    13e0:	fe 01       	movw	r30, r28
    13e2:	ff 96       	adiw	r30, 0x3f	; 63
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f e7       	ldi	r20, 0x7F	; 127
    13f2:	57 e4       	ldi	r21, 0x47	; 71
    13f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f8:	18 16       	cp	r1, r24
    13fa:	64 f5       	brge	.+88     	; 0x1454 <HLCD_voidSendCommand+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	fe 01       	movw	r30, r28
    13fe:	ed 5b       	subi	r30, 0xBD	; 189
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e af       	std	Y+62, r25	; 0x3e
    1428:	8d af       	std	Y+61, r24	; 0x3d
    142a:	0f c0       	rjmp	.+30     	; 0x144a <HLCD_voidSendCommand+0x16e>
    142c:	8c e2       	ldi	r24, 0x2C	; 44
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	9c af       	std	Y+60, r25	; 0x3c
    1432:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1434:	8b ad       	ldd	r24, Y+59	; 0x3b
    1436:	9c ad       	ldd	r25, Y+60	; 0x3c
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <HLCD_voidSendCommand+0x15c>
    143c:	9c af       	std	Y+60, r25	; 0x3c
    143e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8d ad       	ldd	r24, Y+61	; 0x3d
    1442:	9e ad       	ldd	r25, Y+62	; 0x3e
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9e af       	std	Y+62, r25	; 0x3e
    1448:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8d ad       	ldd	r24, Y+61	; 0x3d
    144c:	9e ad       	ldd	r25, Y+62	; 0x3e
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <HLCD_voidSendCommand+0x150>
    1452:	16 c0       	rjmp	.+44     	; 0x1480 <HLCD_voidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	fe 01       	movw	r30, r28
    1456:	ff 96       	adiw	r30, 0x3f	; 63
    1458:	60 81       	ld	r22, Z
    145a:	71 81       	ldd	r23, Z+1	; 0x01
    145c:	82 81       	ldd	r24, Z+2	; 0x02
    145e:	93 81       	ldd	r25, Z+3	; 0x03
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9e af       	std	Y+62, r25	; 0x3e
    146a:	8d af       	std	Y+61, r24	; 0x3d
    146c:	8d ad       	ldd	r24, Y+61	; 0x3d
    146e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1470:	9a af       	std	Y+58, r25	; 0x3a
    1472:	89 af       	std	Y+57, r24	; 0x39
    1474:	89 ad       	ldd	r24, Y+57	; 0x39
    1476:	9a ad       	ldd	r25, Y+58	; 0x3a
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <HLCD_voidSendCommand+0x19c>
    147c:	9a af       	std	Y+58, r25	; 0x3a
    147e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	62 e0       	ldi	r22, 0x02	; 2
    1484:	41 e0       	ldi	r20, 0x01	; 1
    1486:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a0 e8       	ldi	r26, 0x80	; 128
    1490:	bf e3       	ldi	r27, 0x3F	; 63
    1492:	8d ab       	std	Y+53, r24	; 0x35
    1494:	9e ab       	std	Y+54, r25	; 0x36
    1496:	af ab       	std	Y+55, r26	; 0x37
    1498:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149a:	6d a9       	ldd	r22, Y+53	; 0x35
    149c:	7e a9       	ldd	r23, Y+54	; 0x36
    149e:	8f a9       	ldd	r24, Y+55	; 0x37
    14a0:	98 ad       	ldd	r25, Y+56	; 0x38
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e8       	ldi	r19, 0x80	; 128
    14a6:	4b e3       	ldi	r20, 0x3B	; 59
    14a8:	55 e4       	ldi	r21, 0x45	; 69
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	89 ab       	std	Y+49, r24	; 0x31
    14b4:	9a ab       	std	Y+50, r25	; 0x32
    14b6:	ab ab       	std	Y+51, r26	; 0x33
    14b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ba:	69 a9       	ldd	r22, Y+49	; 0x31
    14bc:	7a a9       	ldd	r23, Y+50	; 0x32
    14be:	8b a9       	ldd	r24, Y+51	; 0x33
    14c0:	9c a9       	ldd	r25, Y+52	; 0x34
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	2c f4       	brge	.+10     	; 0x14dc <HLCD_voidSendCommand+0x200>
		__ticks = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	98 ab       	std	Y+48, r25	; 0x30
    14d8:	8f a7       	std	Y+47, r24	; 0x2f
    14da:	3f c0       	rjmp	.+126    	; 0x155a <HLCD_voidSendCommand+0x27e>
	else if (__tmp > 65535)
    14dc:	69 a9       	ldd	r22, Y+49	; 0x31
    14de:	7a a9       	ldd	r23, Y+50	; 0x32
    14e0:	8b a9       	ldd	r24, Y+51	; 0x33
    14e2:	9c a9       	ldd	r25, Y+52	; 0x34
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	57 e4       	ldi	r21, 0x47	; 71
    14ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	4c f5       	brge	.+82     	; 0x1546 <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	6d a9       	ldd	r22, Y+53	; 0x35
    14f6:	7e a9       	ldd	r23, Y+54	; 0x36
    14f8:	8f a9       	ldd	r24, Y+55	; 0x37
    14fa:	98 ad       	ldd	r25, Y+56	; 0x38
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e2       	ldi	r20, 0x20	; 32
    1502:	51 e4       	ldi	r21, 0x41	; 65
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	98 ab       	std	Y+48, r25	; 0x30
    151a:	8f a7       	std	Y+47, r24	; 0x2f
    151c:	0f c0       	rjmp	.+30     	; 0x153c <HLCD_voidSendCommand+0x260>
    151e:	8c e2       	ldi	r24, 0x2C	; 44
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	9e a7       	std	Y+46, r25	; 0x2e
    1524:	8d a7       	std	Y+45, r24	; 0x2d
    1526:	8d a5       	ldd	r24, Y+45	; 0x2d
    1528:	9e a5       	ldd	r25, Y+46	; 0x2e
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <HLCD_voidSendCommand+0x24e>
    152e:	9e a7       	std	Y+46, r25	; 0x2e
    1530:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1532:	8f a5       	ldd	r24, Y+47	; 0x2f
    1534:	98 a9       	ldd	r25, Y+48	; 0x30
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	98 ab       	std	Y+48, r25	; 0x30
    153a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	8f a5       	ldd	r24, Y+47	; 0x2f
    153e:	98 a9       	ldd	r25, Y+48	; 0x30
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	69 f7       	brne	.-38     	; 0x151e <HLCD_voidSendCommand+0x242>
    1544:	14 c0       	rjmp	.+40     	; 0x156e <HLCD_voidSendCommand+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1546:	69 a9       	ldd	r22, Y+49	; 0x31
    1548:	7a a9       	ldd	r23, Y+50	; 0x32
    154a:	8b a9       	ldd	r24, Y+51	; 0x33
    154c:	9c a9       	ldd	r25, Y+52	; 0x34
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	98 ab       	std	Y+48, r25	; 0x30
    1558:	8f a7       	std	Y+47, r24	; 0x2f
    155a:	8f a5       	ldd	r24, Y+47	; 0x2f
    155c:	98 a9       	ldd	r25, Y+48	; 0x30
    155e:	9c a7       	std	Y+44, r25	; 0x2c
    1560:	8b a7       	std	Y+43, r24	; 0x2b
    1562:	8b a5       	ldd	r24, Y+43	; 0x2b
    1564:	9c a5       	ldd	r25, Y+44	; 0x2c
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <HLCD_voidSendCommand+0x28a>
    156a:	9c a7       	std	Y+44, r25	; 0x2c
    156c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e8       	ldi	r26, 0x80	; 128
    157e:	bf e3       	ldi	r27, 0x3F	; 63
    1580:	8f a3       	std	Y+39, r24	; 0x27
    1582:	98 a7       	std	Y+40, r25	; 0x28
    1584:	a9 a7       	std	Y+41, r26	; 0x29
    1586:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1588:	6f a1       	ldd	r22, Y+39	; 0x27
    158a:	78 a5       	ldd	r23, Y+40	; 0x28
    158c:	89 a5       	ldd	r24, Y+41	; 0x29
    158e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e8       	ldi	r19, 0x80	; 128
    1594:	4b e3       	ldi	r20, 0x3B	; 59
    1596:	55 e4       	ldi	r21, 0x45	; 69
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	8b a3       	std	Y+35, r24	; 0x23
    15a2:	9c a3       	std	Y+36, r25	; 0x24
    15a4:	ad a3       	std	Y+37, r26	; 0x25
    15a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15a8:	6b a1       	ldd	r22, Y+35	; 0x23
    15aa:	7c a1       	ldd	r23, Y+36	; 0x24
    15ac:	8d a1       	ldd	r24, Y+37	; 0x25
    15ae:	9e a1       	ldd	r25, Y+38	; 0x26
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e8       	ldi	r20, 0x80	; 128
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15bc:	88 23       	and	r24, r24
    15be:	2c f4       	brge	.+10     	; 0x15ca <HLCD_voidSendCommand+0x2ee>
		__ticks = 1;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9a a3       	std	Y+34, r25	; 0x22
    15c6:	89 a3       	std	Y+33, r24	; 0x21
    15c8:	3f c0       	rjmp	.+126    	; 0x1648 <HLCD_voidSendCommand+0x36c>
	else if (__tmp > 65535)
    15ca:	6b a1       	ldd	r22, Y+35	; 0x23
    15cc:	7c a1       	ldd	r23, Y+36	; 0x24
    15ce:	8d a1       	ldd	r24, Y+37	; 0x25
    15d0:	9e a1       	ldd	r25, Y+38	; 0x26
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	3f ef       	ldi	r19, 0xFF	; 255
    15d6:	4f e7       	ldi	r20, 0x7F	; 127
    15d8:	57 e4       	ldi	r21, 0x47	; 71
    15da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15de:	18 16       	cp	r1, r24
    15e0:	4c f5       	brge	.+82     	; 0x1634 <HLCD_voidSendCommand+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e2:	6f a1       	ldd	r22, Y+39	; 0x27
    15e4:	78 a5       	ldd	r23, Y+40	; 0x28
    15e6:	89 a5       	ldd	r24, Y+41	; 0x29
    15e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e2       	ldi	r20, 0x20	; 32
    15f0:	51 e4       	ldi	r21, 0x41	; 65
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9a a3       	std	Y+34, r25	; 0x22
    1608:	89 a3       	std	Y+33, r24	; 0x21
    160a:	0f c0       	rjmp	.+30     	; 0x162a <HLCD_voidSendCommand+0x34e>
    160c:	8c e2       	ldi	r24, 0x2C	; 44
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	98 a3       	std	Y+32, r25	; 0x20
    1612:	8f 8f       	std	Y+31, r24	; 0x1f
    1614:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1616:	98 a1       	ldd	r25, Y+32	; 0x20
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <HLCD_voidSendCommand+0x33c>
    161c:	98 a3       	std	Y+32, r25	; 0x20
    161e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1620:	89 a1       	ldd	r24, Y+33	; 0x21
    1622:	9a a1       	ldd	r25, Y+34	; 0x22
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9a a3       	std	Y+34, r25	; 0x22
    1628:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162a:	89 a1       	ldd	r24, Y+33	; 0x21
    162c:	9a a1       	ldd	r25, Y+34	; 0x22
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	69 f7       	brne	.-38     	; 0x160c <HLCD_voidSendCommand+0x330>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <HLCD_voidSendCommand+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	6b a1       	ldd	r22, Y+35	; 0x23
    1636:	7c a1       	ldd	r23, Y+36	; 0x24
    1638:	8d a1       	ldd	r24, Y+37	; 0x25
    163a:	9e a1       	ldd	r25, Y+38	; 0x26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9a a3       	std	Y+34, r25	; 0x22
    1646:	89 a3       	std	Y+33, r24	; 0x21
    1648:	89 a1       	ldd	r24, Y+33	; 0x21
    164a:	9a a1       	ldd	r25, Y+34	; 0x22
    164c:	9e 8f       	std	Y+30, r25	; 0x1e
    164e:	8d 8f       	std	Y+29, r24	; 0x1d
    1650:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1652:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <HLCD_voidSendCommand+0x378>
    1658:	9e 8f       	std	Y+30, r25	; 0x1e
    165a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Command,0));
    165c:	fe 01       	movw	r30, r28
    165e:	e9 5b       	subi	r30, 0xB9	; 185
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	98 2f       	mov	r25, r24
    1666:	91 70       	andi	r25, 0x01	; 1
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	49 2f       	mov	r20, r25
    166e:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Command,1));
    1672:	fe 01       	movw	r30, r28
    1674:	e9 5b       	subi	r30, 0xB9	; 185
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	86 95       	lsr	r24
    167c:	98 2f       	mov	r25, r24
    167e:	91 70       	andi	r25, 0x01	; 1
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	49 2f       	mov	r20, r25
    1686:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Command,2));
    168a:	fe 01       	movw	r30, r28
    168c:	e9 5b       	subi	r30, 0xB9	; 185
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	86 95       	lsr	r24
    1694:	86 95       	lsr	r24
    1696:	98 2f       	mov	r25, r24
    1698:	91 70       	andi	r25, 0x01	; 1
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	49 2f       	mov	r20, r25
    16a0:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Command,3));
    16a4:	fe 01       	movw	r30, r28
    16a6:	e9 5b       	subi	r30, 0xB9	; 185
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	86 95       	lsr	r24
    16ae:	86 95       	lsr	r24
    16b0:	86 95       	lsr	r24
    16b2:	98 2f       	mov	r25, r24
    16b4:	91 70       	andi	r25, 0x01	; 1
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	64 e0       	ldi	r22, 0x04	; 4
    16ba:	49 2f       	mov	r20, r25
    16bc:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>


	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	62 e0       	ldi	r22, 0x02	; 2
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e8       	ldi	r26, 0x80	; 128
    16d0:	bf e3       	ldi	r27, 0x3F	; 63
    16d2:	89 8f       	std	Y+25, r24	; 0x19
    16d4:	9a 8f       	std	Y+26, r25	; 0x1a
    16d6:	ab 8f       	std	Y+27, r26	; 0x1b
    16d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	69 8d       	ldd	r22, Y+25	; 0x19
    16dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e8       	ldi	r19, 0x80	; 128
    16e6:	4b e3       	ldi	r20, 0x3B	; 59
    16e8:	55 e4       	ldi	r21, 0x45	; 69
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8d 8b       	std	Y+21, r24	; 0x15
    16f4:	9e 8b       	std	Y+22, r25	; 0x16
    16f6:	af 8b       	std	Y+23, r26	; 0x17
    16f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fa:	6d 89       	ldd	r22, Y+21	; 0x15
    16fc:	7e 89       	ldd	r23, Y+22	; 0x16
    16fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1700:	98 8d       	ldd	r25, Y+24	; 0x18
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <HLCD_voidSendCommand+0x440>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9c 8b       	std	Y+20, r25	; 0x14
    1718:	8b 8b       	std	Y+19, r24	; 0x13
    171a:	3f c0       	rjmp	.+126    	; 0x179a <HLCD_voidSendCommand+0x4be>
	else if (__tmp > 65535)
    171c:	6d 89       	ldd	r22, Y+21	; 0x15
    171e:	7e 89       	ldd	r23, Y+22	; 0x16
    1720:	8f 89       	ldd	r24, Y+23	; 0x17
    1722:	98 8d       	ldd	r25, Y+24	; 0x18
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <HLCD_voidSendCommand+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	69 8d       	ldd	r22, Y+25	; 0x19
    1736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
    175c:	0f c0       	rjmp	.+30     	; 0x177c <HLCD_voidSendCommand+0x4a0>
    175e:	8c e2       	ldi	r24, 0x2C	; 44
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	9a 8b       	std	Y+18, r25	; 0x12
    1764:	89 8b       	std	Y+17, r24	; 0x11
    1766:	89 89       	ldd	r24, Y+17	; 0x11
    1768:	9a 89       	ldd	r25, Y+18	; 0x12
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <HLCD_voidSendCommand+0x48e>
    176e:	9a 8b       	std	Y+18, r25	; 0x12
    1770:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8b 89       	ldd	r24, Y+19	; 0x13
    1774:	9c 89       	ldd	r25, Y+20	; 0x14
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9c 8b       	std	Y+20, r25	; 0x14
    177a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8b 89       	ldd	r24, Y+19	; 0x13
    177e:	9c 89       	ldd	r25, Y+20	; 0x14
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <HLCD_voidSendCommand+0x482>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <HLCD_voidSendCommand+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6d 89       	ldd	r22, Y+21	; 0x15
    1788:	7e 89       	ldd	r23, Y+22	; 0x16
    178a:	8f 89       	ldd	r24, Y+23	; 0x17
    178c:	98 8d       	ldd	r25, Y+24	; 0x18
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	98 8b       	std	Y+16, r25	; 0x10
    17a0:	8f 87       	std	Y+15, r24	; 0x0f
    17a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a4:	98 89       	ldd	r25, Y+16	; 0x10
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <HLCD_voidSendCommand+0x4ca>
    17aa:	98 8b       	std	Y+16, r25	; 0x10
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	62 e0       	ldi	r22, 0x02	; 2
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e8       	ldi	r26, 0x80	; 128
    17be:	bf e3       	ldi	r27, 0x3F	; 63
    17c0:	8b 87       	std	Y+11, r24	; 0x0b
    17c2:	9c 87       	std	Y+12, r25	; 0x0c
    17c4:	ad 87       	std	Y+13, r26	; 0x0d
    17c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e8       	ldi	r19, 0x80	; 128
    17d4:	4b e3       	ldi	r20, 0x3B	; 59
    17d6:	55 e4       	ldi	r21, 0x45	; 69
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8f 83       	std	Y+7, r24	; 0x07
    17e2:	98 87       	std	Y+8, r25	; 0x08
    17e4:	a9 87       	std	Y+9, r26	; 0x09
    17e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <HLCD_voidSendCommand+0x52e>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <HLCD_voidSendCommand+0x5ac>
	else if (__tmp > 65535)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <HLCD_voidSendCommand+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6b 85       	ldd	r22, Y+11	; 0x0b
    1824:	7c 85       	ldd	r23, Y+12	; 0x0c
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	9e 85       	ldd	r25, Y+14	; 0x0e
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	0f c0       	rjmp	.+30     	; 0x186a <HLCD_voidSendCommand+0x58e>
    184c:	8c e2       	ldi	r24, 0x2C	; 44
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <HLCD_voidSendCommand+0x57c>
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <HLCD_voidSendCommand+0x570>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <HLCD_voidSendCommand+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <HLCD_voidSendCommand+0x5b8>
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    189c:	c9 5b       	subi	r28, 0xB9	; 185
    189e:	df 4f       	sbci	r29, 0xFF	; 255
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data){
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	c7 54       	subi	r28, 0x47	; 71
    18c2:	d0 40       	sbci	r29, 0x00	; 0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	fe 01       	movw	r30, r28
    18d0:	e9 5b       	subi	r30, 0xB9	; 185
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 83       	st	Z, r24

	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Data,4));
    18d6:	fe 01       	movw	r30, r28
    18d8:	e9 5b       	subi	r30, 0xB9	; 185
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	82 95       	swap	r24
    18e0:	8f 70       	andi	r24, 0x0F	; 15
    18e2:	98 2f       	mov	r25, r24
    18e4:	91 70       	andi	r25, 0x01	; 1
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	49 2f       	mov	r20, r25
    18ec:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Data,5));
    18f0:	fe 01       	movw	r30, r28
    18f2:	e9 5b       	subi	r30, 0xB9	; 185
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	82 95       	swap	r24
    18fa:	86 95       	lsr	r24
    18fc:	87 70       	andi	r24, 0x07	; 7
    18fe:	98 2f       	mov	r25, r24
    1900:	91 70       	andi	r25, 0x01	; 1
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	49 2f       	mov	r20, r25
    1908:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Data,6));
    190c:	fe 01       	movw	r30, r28
    190e:	e9 5b       	subi	r30, 0xB9	; 185
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	82 95       	swap	r24
    1916:	86 95       	lsr	r24
    1918:	86 95       	lsr	r24
    191a:	83 70       	andi	r24, 0x03	; 3
    191c:	98 2f       	mov	r25, r24
    191e:	91 70       	andi	r25, 0x01	; 1
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	62 e0       	ldi	r22, 0x02	; 2
    1924:	49 2f       	mov	r20, r25
    1926:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Data,7));
    192a:	fe 01       	movw	r30, r28
    192c:	e9 5b       	subi	r30, 0xB9	; 185
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	98 2f       	mov	r25, r24
    1934:	99 1f       	adc	r25, r25
    1936:	99 27       	eor	r25, r25
    1938:	99 1f       	adc	r25, r25
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	64 e0       	ldi	r22, 0x04	; 4
    193e:	49 2f       	mov	r20, r25
    1940:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_HIGH);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	63 e0       	ldi	r22, 0x03	; 3
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    194e:	fe 01       	movw	r30, r28
    1950:	ed 5b       	subi	r30, 0xBD	; 189
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e8       	ldi	r26, 0x80	; 128
    195a:	bf e3       	ldi	r27, 0x3F	; 63
    195c:	80 83       	st	Z, r24
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	a2 83       	std	Z+2, r26	; 0x02
    1962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1964:	8e 01       	movw	r16, r28
    1966:	01 5c       	subi	r16, 0xC1	; 193
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	fe 01       	movw	r30, r28
    196c:	ed 5b       	subi	r30, 0xBD	; 189
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e8       	ldi	r19, 0x80	; 128
    197c:	4b e3       	ldi	r20, 0x3B	; 59
    197e:	55 e4       	ldi	r21, 0x45	; 69
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	80 83       	st	Z, r24
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	a2 83       	std	Z+2, r26	; 0x02
    1990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1992:	fe 01       	movw	r30, r28
    1994:	ff 96       	adiw	r30, 0x3f	; 63
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <HLCD_voidSendData+0x104>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e af       	std	Y+62, r25	; 0x3e
    19b4:	8d af       	std	Y+61, r24	; 0x3d
    19b6:	46 c0       	rjmp	.+140    	; 0x1a44 <HLCD_voidSendData+0x190>
	else if (__tmp > 65535)
    19b8:	fe 01       	movw	r30, r28
    19ba:	ff 96       	adiw	r30, 0x3f	; 63
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	64 f5       	brge	.+88     	; 0x1a2c <HLCD_voidSendData+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	fe 01       	movw	r30, r28
    19d6:	ed 5b       	subi	r30, 0xBD	; 189
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e af       	std	Y+62, r25	; 0x3e
    1a00:	8d af       	std	Y+61, r24	; 0x3d
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <HLCD_voidSendData+0x16e>
    1a04:	8c e2       	ldi	r24, 0x2C	; 44
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	9c af       	std	Y+60, r25	; 0x3c
    1a0a:	8b af       	std	Y+59, r24	; 0x3b
    1a0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <HLCD_voidSendData+0x15c>
    1a14:	9c af       	std	Y+60, r25	; 0x3c
    1a16:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9e af       	std	Y+62, r25	; 0x3e
    1a20:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <HLCD_voidSendData+0x150>
    1a2a:	16 c0       	rjmp	.+44     	; 0x1a58 <HLCD_voidSendData+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ff 96       	adiw	r30, 0x3f	; 63
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e af       	std	Y+62, r25	; 0x3e
    1a42:	8d af       	std	Y+61, r24	; 0x3d
    1a44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a48:	9a af       	std	Y+58, r25	; 0x3a
    1a4a:	89 af       	std	Y+57, r24	; 0x39
    1a4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <HLCD_voidSendData+0x19c>
    1a54:	9a af       	std	Y+58, r25	; 0x3a
    1a56:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	62 e0       	ldi	r22, 0x02	; 2
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e8       	ldi	r26, 0x80	; 128
    1a68:	bf e3       	ldi	r27, 0x3F	; 63
    1a6a:	8d ab       	std	Y+53, r24	; 0x35
    1a6c:	9e ab       	std	Y+54, r25	; 0x36
    1a6e:	af ab       	std	Y+55, r26	; 0x37
    1a70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6d a9       	ldd	r22, Y+53	; 0x35
    1a74:	7e a9       	ldd	r23, Y+54	; 0x36
    1a76:	8f a9       	ldd	r24, Y+55	; 0x37
    1a78:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e8       	ldi	r19, 0x80	; 128
    1a7e:	4b e3       	ldi	r20, 0x3B	; 59
    1a80:	55 e4       	ldi	r21, 0x45	; 69
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	89 ab       	std	Y+49, r24	; 0x31
    1a8c:	9a ab       	std	Y+50, r25	; 0x32
    1a8e:	ab ab       	std	Y+51, r26	; 0x33
    1a90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a92:	69 a9       	ldd	r22, Y+49	; 0x31
    1a94:	7a a9       	ldd	r23, Y+50	; 0x32
    1a96:	8b a9       	ldd	r24, Y+51	; 0x33
    1a98:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <HLCD_voidSendData+0x200>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	98 ab       	std	Y+48, r25	; 0x30
    1ab0:	8f a7       	std	Y+47, r24	; 0x2f
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <HLCD_voidSendData+0x27e>
	else if (__tmp > 65535)
    1ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aba:	9c a9       	ldd	r25, Y+52	; 0x34
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ace:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	98 ab       	std	Y+48, r25	; 0x30
    1af2:	8f a7       	std	Y+47, r24	; 0x2f
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <HLCD_voidSendData+0x260>
    1af6:	8c e2       	ldi	r24, 0x2C	; 44
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	9e a7       	std	Y+46, r25	; 0x2e
    1afc:	8d a7       	std	Y+45, r24	; 0x2d
    1afe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <HLCD_voidSendData+0x24e>
    1b06:	9e a7       	std	Y+46, r25	; 0x2e
    1b08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	98 ab       	std	Y+48, r25	; 0x30
    1b12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b16:	98 a9       	ldd	r25, Y+48	; 0x30
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <HLCD_voidSendData+0x242>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <HLCD_voidSendData+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	98 ab       	std	Y+48, r25	; 0x30
    1b30:	8f a7       	std	Y+47, r24	; 0x2f
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	9c a7       	std	Y+44, r25	; 0x2c
    1b38:	8b a7       	std	Y+43, r24	; 0x2b
    1b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <HLCD_voidSendData+0x28a>
    1b42:	9c a7       	std	Y+44, r25	; 0x2c
    1b44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	8f a3       	std	Y+39, r24	; 0x27
    1b5a:	98 a7       	std	Y+40, r25	; 0x28
    1b5c:	a9 a7       	std	Y+41, r26	; 0x29
    1b5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6f a1       	ldd	r22, Y+39	; 0x27
    1b62:	78 a5       	ldd	r23, Y+40	; 0x28
    1b64:	89 a5       	ldd	r24, Y+41	; 0x29
    1b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e8       	ldi	r19, 0x80	; 128
    1b6c:	4b e3       	ldi	r20, 0x3B	; 59
    1b6e:	55 e4       	ldi	r21, 0x45	; 69
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8b a3       	std	Y+35, r24	; 0x23
    1b7a:	9c a3       	std	Y+36, r25	; 0x24
    1b7c:	ad a3       	std	Y+37, r26	; 0x25
    1b7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <HLCD_voidSendData+0x2ee>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <HLCD_voidSendData+0x36c>
	else if (__tmp > 65535)
    1ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <HLCD_voidSendData+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6f a1       	ldd	r22, Y+39	; 0x27
    1bbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9a a3       	std	Y+34, r25	; 0x22
    1be0:	89 a3       	std	Y+33, r24	; 0x21
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <HLCD_voidSendData+0x34e>
    1be4:	8c e2       	ldi	r24, 0x2C	; 44
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	98 a3       	std	Y+32, r25	; 0x20
    1bea:	8f 8f       	std	Y+31, r24	; 0x1f
    1bec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bee:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <HLCD_voidSendData+0x33c>
    1bf4:	98 a3       	std	Y+32, r25	; 0x20
    1bf6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9a a3       	std	Y+34, r25	; 0x22
    1c00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	89 a1       	ldd	r24, Y+33	; 0x21
    1c04:	9a a1       	ldd	r25, Y+34	; 0x22
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <HLCD_voidSendData+0x330>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <HLCD_voidSendData+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c10:	8d a1       	ldd	r24, Y+37	; 0x25
    1c12:	9e a1       	ldd	r25, Y+38	; 0x26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9a a3       	std	Y+34, r25	; 0x22
    1c1e:	89 a3       	std	Y+33, r24	; 0x21
    1c20:	89 a1       	ldd	r24, Y+33	; 0x21
    1c22:	9a a1       	ldd	r25, Y+34	; 0x22
    1c24:	9e 8f       	std	Y+30, r25	; 0x1e
    1c26:	8d 8f       	std	Y+29, r24	; 0x1d
    1c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <HLCD_voidSendData+0x378>
    1c30:	9e 8f       	std	Y+30, r25	; 0x1e
    1c32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Data,0));
    1c34:	fe 01       	movw	r30, r28
    1c36:	e9 5b       	subi	r30, 0xB9	; 185
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	91 70       	andi	r25, 0x01	; 1
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	49 2f       	mov	r20, r25
    1c46:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Data,1));
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e9 5b       	subi	r30, 0xB9	; 185
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	86 95       	lsr	r24
    1c54:	98 2f       	mov	r25, r24
    1c56:	91 70       	andi	r25, 0x01	; 1
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	49 2f       	mov	r20, r25
    1c5e:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Data,2));
    1c62:	fe 01       	movw	r30, r28
    1c64:	e9 5b       	subi	r30, 0xB9	; 185
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	80 81       	ld	r24, Z
    1c6a:	86 95       	lsr	r24
    1c6c:	86 95       	lsr	r24
    1c6e:	98 2f       	mov	r25, r24
    1c70:	91 70       	andi	r25, 0x01	; 1
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	62 e0       	ldi	r22, 0x02	; 2
    1c76:	49 2f       	mov	r20, r25
    1c78:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Data,3));
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e9 5b       	subi	r30, 0xB9	; 185
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	86 95       	lsr	r24
    1c86:	86 95       	lsr	r24
    1c88:	86 95       	lsr	r24
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	91 70       	andi	r25, 0x01	; 1
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	64 e0       	ldi	r22, 0x04	; 4
    1c92:	49 2f       	mov	r20, r25
    1c94:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>


	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e8       	ldi	r26, 0x80	; 128
    1ca8:	bf e3       	ldi	r27, 0x3F	; 63
    1caa:	89 8f       	std	Y+25, r24	; 0x19
    1cac:	9a 8f       	std	Y+26, r25	; 0x1a
    1cae:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e8       	ldi	r19, 0x80	; 128
    1cbe:	4b e3       	ldi	r20, 0x3B	; 59
    1cc0:	55 e4       	ldi	r21, 0x45	; 69
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8d 8b       	std	Y+21, r24	; 0x15
    1ccc:	9e 8b       	std	Y+22, r25	; 0x16
    1cce:	af 8b       	std	Y+23, r26	; 0x17
    1cd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <HLCD_voidSendData+0x440>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <HLCD_voidSendData+0x4be>
	else if (__tmp > 65535)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <HLCD_voidSendData+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <HLCD_voidSendData+0x4a0>
    1d36:	8c e2       	ldi	r24, 0x2C	; 44
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
    1d3e:	89 89       	ldd	r24, Y+17	; 0x11
    1d40:	9a 89       	ldd	r25, Y+18	; 0x12
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <HLCD_voidSendData+0x48e>
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	9c 89       	ldd	r25, Y+20	; 0x14
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <HLCD_voidSendData+0x482>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <HLCD_voidSendData+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d60:	7e 89       	ldd	r23, Y+22	; 0x16
    1d62:	8f 89       	ldd	r24, Y+23	; 0x17
    1d64:	98 8d       	ldd	r25, Y+24	; 0x18
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	98 8b       	std	Y+16, r25	; 0x10
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	98 89       	ldd	r25, Y+16	; 0x10
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <HLCD_voidSendData+0x4ca>
    1d82:	98 8b       	std	Y+16, r25	; 0x10
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 5e 07 	call	0xebc	; 0xebc <MDIO_voidSetPinValue>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e8       	ldi	r26, 0x80	; 128
    1d96:	bf e3       	ldi	r27, 0x3F	; 63
    1d98:	8b 87       	std	Y+11, r24	; 0x0b
    1d9a:	9c 87       	std	Y+12, r25	; 0x0c
    1d9c:	ad 87       	std	Y+13, r26	; 0x0d
    1d9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e8       	ldi	r19, 0x80	; 128
    1dac:	4b e3       	ldi	r20, 0x3B	; 59
    1dae:	55 e4       	ldi	r21, 0x45	; 69
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8f 83       	std	Y+7, r24	; 0x07
    1dba:	98 87       	std	Y+8, r25	; 0x08
    1dbc:	a9 87       	std	Y+9, r26	; 0x09
    1dbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <HLCD_voidSendData+0x52e>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <HLCD_voidSendData+0x5ac>
	else if (__tmp > 65535)
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <HLCD_voidSendData+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <HLCD_voidSendData+0x58e>
    1e24:	8c e2       	ldi	r24, 0x2C	; 44
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <HLCD_voidSendData+0x57c>
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <HLCD_voidSendData+0x570>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <HLCD_voidSendData+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <HLCD_voidSendData+0x5b8>
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    1e74:	c9 5b       	subi	r28, 0xB9	; 185
    1e76:	df 4f       	sbci	r29, 0xFF	; 255
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	08 95       	ret

00001e8c <HLCD_voidSendString>:
void HLCD_voidSendString(char *str){
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <HLCD_voidSendString+0x6>
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	9b 83       	std	Y+3, r25	; 0x03
    1e9a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i =0;str[i]!='\0';i++){
    1e9c:	19 82       	std	Y+1, r1	; 0x01
    1e9e:	0e c0       	rjmp	.+28     	; 0x1ebc <HLCD_voidSendString+0x30>
		HLCD_voidSendData(str[i]);
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	fc 01       	movw	r30, r24
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	80 81       	ld	r24, Z
    1eb2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <HLCD_voidSendData>
	_delay_ms(1);


}
void HLCD_voidSendString(char *str){
	for(u8 i =0;str[i]!='\0';i++){
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e2 0f       	add	r30, r18
    1eca:	f3 1f       	adc	r31, r19
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 23       	and	r24, r24
    1ed0:	39 f7       	brne	.-50     	; 0x1ea0 <HLCD_voidSendString+0x14>
		HLCD_voidSendData(str[i]);
	}
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <HLCD_voidInit>:



void HLCD_voidInit(void){
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ef8:	b1 e4       	ldi	r27, 0x41	; 65
    1efa:	8b 87       	std	Y+11, r24	; 0x0b
    1efc:	9c 87       	std	Y+12, r25	; 0x0c
    1efe:	ad 87       	std	Y+13, r26	; 0x0d
    1f00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e8       	ldi	r19, 0x80	; 128
    1f0e:	4b e3       	ldi	r20, 0x3B	; 59
    1f10:	55 e4       	ldi	r21, 0x45	; 69
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	8f 83       	std	Y+7, r24	; 0x07
    1f1c:	98 87       	std	Y+8, r25	; 0x08
    1f1e:	a9 87       	std	Y+9, r26	; 0x09
    1f20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f22:	6f 81       	ldd	r22, Y+7	; 0x07
    1f24:	78 85       	ldd	r23, Y+8	; 0x08
    1f26:	89 85       	ldd	r24, Y+9	; 0x09
    1f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <HLCD_voidInit+0x66>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f44:	6f 81       	ldd	r22, Y+7	; 0x07
    1f46:	78 85       	ldd	r23, Y+8	; 0x08
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <HLCD_voidInit+0xc6>
    1f86:	8c e2       	ldi	r24, 0x2C	; 44
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <HLCD_voidInit+0xb4>
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <HLCD_voidInit+0xa8>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <HLCD_voidInit+0xf0>
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	HLCD_voidSendCommand(0x33);
    1fd6:	83 e3       	ldi	r24, 0x33	; 51
    1fd8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);
    1fdc:	82 e3       	ldi	r24, 0x32	; 50
    1fde:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(FUNCTION_SET_4BITMODE_4LINE_5X7DOT);
    1fe2:	88 e2       	ldi	r24, 0x28	; 40
    1fe4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF);
    1fe8:	8e e0       	ldi	r24, 0x0E	; 14
    1fea:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1ff4:	86 e0       	ldi	r24, 0x06	; 6
    1ff6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
}
    1ffa:	2e 96       	adiw	r28, 0x0e	; 14
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <HLCD_voidSendNumber>:

void HLCD_voidSendNumber(u32 A_u32Number){
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	28 97       	sbiw	r28, 0x08	; 8
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	6d 83       	std	Y+5, r22	; 0x05
    202a:	7e 83       	std	Y+6, r23	; 0x06
    202c:	8f 83       	std	Y+7, r24	; 0x07
    202e:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Number = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	ab 83       	std	Y+3, r26	; 0x03
    203e:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	af 81       	ldd	r26, Y+7	; 0x07
    2046:	b8 85       	ldd	r27, Y+8	; 0x08
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	a1 05       	cpc	r26, r1
    204c:	b1 05       	cpc	r27, r1
    204e:	d1 f5       	brne	.+116    	; 0x20c4 <HLCD_voidSendNumber+0xb8>
	{
		HLCD_voidSendData('0');
    2050:	80 e3       	ldi	r24, 0x30	; 48
    2052:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <HLCD_voidSendData>
    2056:	36 c0       	rjmp	.+108    	; 0x20c4 <HLCD_voidSendNumber+0xb8>
	}
	while (A_u32Number != 0)
	{
		local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	ab 81       	ldd	r26, Y+3	; 0x03
    205e:	bc 81       	ldd	r27, Y+4	; 0x04
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 ab 11 	call	0x2356	; 0x2356 <__mulsi3>
    2070:	7b 01       	movw	r14, r22
    2072:	8c 01       	movw	r16, r24
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	af 81       	ldd	r26, Y+7	; 0x07
    207a:	b8 85       	ldd	r27, Y+8	; 0x08
    207c:	2a e0       	ldi	r18, 0x0A	; 10
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 ca 11 	call	0x2394	; 0x2394 <__udivmodsi4>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8e 0d       	add	r24, r14
    2092:	9f 1d       	adc	r25, r15
    2094:	a0 1f       	adc	r26, r16
    2096:	b1 1f       	adc	r27, r17
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	ab 83       	std	Y+3, r26	; 0x03
    209e:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    20a0:	8d 81       	ldd	r24, Y+5	; 0x05
    20a2:	9e 81       	ldd	r25, Y+6	; 0x06
    20a4:	af 81       	ldd	r26, Y+7	; 0x07
    20a6:	b8 85       	ldd	r27, Y+8	; 0x08
    20a8:	2a e0       	ldi	r18, 0x0A	; 10
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 ca 11 	call	0x2394	; 0x2394 <__udivmodsi4>
    20b8:	da 01       	movw	r26, r20
    20ba:	c9 01       	movw	r24, r18
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	af 83       	std	Y+7, r26	; 0x07
    20c2:	b8 87       	std	Y+8, r27	; 0x08
	u32 local_u32Number = 1;
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}
	while (A_u32Number != 0)
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	af 81       	ldd	r26, Y+7	; 0x07
    20ca:	b8 85       	ldd	r27, Y+8	; 0x08
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	a1 05       	cpc	r26, r1
    20d0:	b1 05       	cpc	r27, r1
    20d2:	11 f6       	brne	.-124    	; 0x2058 <HLCD_voidSendNumber+0x4c>
    20d4:	23 c0       	rjmp	.+70     	; 0x211c <HLCD_voidSendNumber+0x110>
		local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Number != 1)
	{
		HLCD_voidSendData((local_u32Number % 10) + 48);
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	ab 81       	ldd	r26, Y+3	; 0x03
    20dc:	bc 81       	ldd	r27, Y+4	; 0x04
    20de:	2a e0       	ldi	r18, 0x0A	; 10
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 ca 11 	call	0x2394	; 0x2394 <__udivmodsi4>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	80 5d       	subi	r24, 0xD0	; 208
    20f4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <HLCD_voidSendData>
		local_u32Number = local_u32Number / 10;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	ab 81       	ldd	r26, Y+3	; 0x03
    20fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2100:	2a e0       	ldi	r18, 0x0A	; 10
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 ca 11 	call	0x2394	; 0x2394 <__udivmodsi4>
    2110:	da 01       	movw	r26, r20
    2112:	c9 01       	movw	r24, r18
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	ab 83       	std	Y+3, r26	; 0x03
    211a:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Number != 1)
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	ab 81       	ldd	r26, Y+3	; 0x03
    2122:	bc 81       	ldd	r27, Y+4	; 0x04
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	91 05       	cpc	r25, r1
    2128:	a1 05       	cpc	r26, r1
    212a:	b1 05       	cpc	r27, r1
    212c:	a1 f6       	brne	.-88     	; 0x20d6 <HLCD_voidSendNumber+0xca>
	{
		HLCD_voidSendData((local_u32Number % 10) + 48);
		local_u32Number = local_u32Number / 10;
	}
}
    212e:	28 96       	adiw	r28, 0x08	; 8
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	08 95       	ret

00002148 <HLCD_voidGOTO>:

void HLCD_voidGOTO(u8 A_u8RowNo,u8 A_u8ColNo){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <HLCD_voidGOTO+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <HLCD_voidGOTO+0x8>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_DDRAM=0;
    215a:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8RowNo){
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	3d 83       	std	Y+5, r19	; 0x05
    2164:	2c 83       	std	Y+4, r18	; 0x04
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	9d 81       	ldd	r25, Y+5	; 0x05
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	91 05       	cpc	r25, r1
    216e:	c9 f0       	breq	.+50     	; 0x21a2 <HLCD_voidGOTO+0x5a>
    2170:	2c 81       	ldd	r18, Y+4	; 0x04
    2172:	3d 81       	ldd	r19, Y+5	; 0x05
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	2c f4       	brge	.+10     	; 0x2184 <HLCD_voidGOTO+0x3c>
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	61 f0       	breq	.+24     	; 0x219a <HLCD_voidGOTO+0x52>
    2182:	1a c0       	rjmp	.+52     	; 0x21b8 <HLCD_voidGOTO+0x70>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	71 f0       	breq	.+28     	; 0x21aa <HLCD_voidGOTO+0x62>
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	69 f0       	breq	.+26     	; 0x21b2 <HLCD_voidGOTO+0x6a>
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <HLCD_voidGOTO+0x70>
	case ROW1:
		local_u8_DDRAM=0x80+A_u8ColNo;
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	80 58       	subi	r24, 0x80	; 128
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	0b c0       	rjmp	.+22     	; 0x21b8 <HLCD_voidGOTO+0x70>
		break;
	case ROW2:
		local_u8_DDRAM=0xC0+A_u8ColNo;
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	80 54       	subi	r24, 0x40	; 64
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	07 c0       	rjmp	.+14     	; 0x21b8 <HLCD_voidGOTO+0x70>
		break;
	case ROW3:
		local_u8_DDRAM=0x94+A_u8ColNo;
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	8c 56       	subi	r24, 0x6C	; 108
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	03 c0       	rjmp	.+6      	; 0x21b8 <HLCD_voidGOTO+0x70>
		break;
	case ROW4:
		local_u8_DDRAM=0xD4+A_u8ColNo;
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	8c 52       	subi	r24, 0x2C	; 44
    21b6:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	HLCD_voidSendCommand(local_u8_DDRAM|SET_DDRAM_ADDRESS);
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	80 68       	ori	r24, 0x80	; 128
    21bc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <main>:
#include "../HAL/LCD/LCD_Configurations.h"
#include "../HAL/LCD/LCD_Interface.h"
#include "../HAL/LCD/LCD_Private.h"
u8 ROW_FLAG=0;
u8 COl_FLAG=0;
void main(void){
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	2e 97       	sbiw	r28, 0x0e	; 14
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
    21e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidInit>
	HLCD_voidInit();
    21e8:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <HLCD_voidInit>
	while(1){

		HLCD_voidGOTO(ROW_FLAG,COl_FLAG);
    21ec:	80 91 68 00 	lds	r24, 0x0068
    21f0:	90 91 69 00 	lds	r25, 0x0069
    21f4:	69 2f       	mov	r22, r25
    21f6:	0e 94 a4 10 	call	0x2148	; 0x2148 <HLCD_voidGOTO>
		HLCD_voidSendData('M');
    21fa:	8d e4       	ldi	r24, 0x4D	; 77
    21fc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <HLCD_voidSendData>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	aa e7       	ldi	r26, 0x7A	; 122
    2206:	b4 e4       	ldi	r27, 0x44	; 68
    2208:	8b 87       	std	Y+11, r24	; 0x0b
    220a:	9c 87       	std	Y+12, r25	; 0x0c
    220c:	ad 87       	std	Y+13, r26	; 0x0d
    220e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e8       	ldi	r19, 0x80	; 128
    221c:	4b e3       	ldi	r20, 0x3B	; 59
    221e:	55 e4       	ldi	r21, 0x45	; 69
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	98 87       	std	Y+8, r25	; 0x08
    222c:	a9 87       	std	Y+9, r26	; 0x09
    222e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <main+0x82>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <main+0x100>
	else if (__tmp > 65535)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <main+0xe2>
    2294:	8c e2       	ldi	r24, 0x2C	; 44
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <main+0xd0>
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <main+0xc4>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <main+0x10c>
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HLCD_voidSendCommand(DISPLAY_CLEAR);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <HLCD_voidSendCommand>
		COl_FLAG++;
    22ea:	80 91 69 00 	lds	r24, 0x0069
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	80 93 69 00 	sts	0x0069, r24

		if(ROW_FLAG==3 || (COl_FLAG<=6 && COl_FLAG>3) || (COl_FLAG<=12 && COl_FLAG>9) || (COl_FLAG<=18 && COl_FLAG>15)){
    22f4:	80 91 68 00 	lds	r24, 0x0068
    22f8:	83 30       	cpi	r24, 0x03	; 3
    22fa:	c1 f0       	breq	.+48     	; 0x232c <main+0x15c>
    22fc:	80 91 69 00 	lds	r24, 0x0069
    2300:	87 30       	cpi	r24, 0x07	; 7
    2302:	20 f4       	brcc	.+8      	; 0x230c <main+0x13c>
    2304:	80 91 69 00 	lds	r24, 0x0069
    2308:	84 30       	cpi	r24, 0x04	; 4
    230a:	80 f4       	brcc	.+32     	; 0x232c <main+0x15c>
    230c:	80 91 69 00 	lds	r24, 0x0069
    2310:	8d 30       	cpi	r24, 0x0D	; 13
    2312:	20 f4       	brcc	.+8      	; 0x231c <main+0x14c>
    2314:	80 91 69 00 	lds	r24, 0x0069
    2318:	8a 30       	cpi	r24, 0x0A	; 10
    231a:	40 f4       	brcc	.+16     	; 0x232c <main+0x15c>
    231c:	80 91 69 00 	lds	r24, 0x0069
    2320:	83 31       	cpi	r24, 0x13	; 19
    2322:	50 f4       	brcc	.+20     	; 0x2338 <main+0x168>
    2324:	80 91 69 00 	lds	r24, 0x0069
    2328:	80 31       	cpi	r24, 0x10	; 16
    232a:	30 f0       	brcs	.+12     	; 0x2338 <main+0x168>
			ROW_FLAG--;
    232c:	80 91 68 00 	lds	r24, 0x0068
    2330:	81 50       	subi	r24, 0x01	; 1
    2332:	80 93 68 00 	sts	0x0068, r24
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <main+0x172>

		}
		else{
			ROW_FLAG++;
    2338:	80 91 68 00 	lds	r24, 0x0068
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	80 93 68 00 	sts	0x0068, r24

		}


		if(COl_FLAG==20){
    2342:	80 91 69 00 	lds	r24, 0x0069
    2346:	84 31       	cpi	r24, 0x14	; 20
    2348:	09 f0       	breq	.+2      	; 0x234c <main+0x17c>
    234a:	50 cf       	rjmp	.-352    	; 0x21ec <main+0x1c>
			ROW_FLAG=0;
    234c:	10 92 68 00 	sts	0x0068, r1
			COl_FLAG=0;
    2350:	10 92 69 00 	sts	0x0069, r1
    2354:	4b cf       	rjmp	.-362    	; 0x21ec <main+0x1c>

00002356 <__mulsi3>:
    2356:	62 9f       	mul	r22, r18
    2358:	d0 01       	movw	r26, r0
    235a:	73 9f       	mul	r23, r19
    235c:	f0 01       	movw	r30, r0
    235e:	82 9f       	mul	r24, r18
    2360:	e0 0d       	add	r30, r0
    2362:	f1 1d       	adc	r31, r1
    2364:	64 9f       	mul	r22, r20
    2366:	e0 0d       	add	r30, r0
    2368:	f1 1d       	adc	r31, r1
    236a:	92 9f       	mul	r25, r18
    236c:	f0 0d       	add	r31, r0
    236e:	83 9f       	mul	r24, r19
    2370:	f0 0d       	add	r31, r0
    2372:	74 9f       	mul	r23, r20
    2374:	f0 0d       	add	r31, r0
    2376:	65 9f       	mul	r22, r21
    2378:	f0 0d       	add	r31, r0
    237a:	99 27       	eor	r25, r25
    237c:	72 9f       	mul	r23, r18
    237e:	b0 0d       	add	r27, r0
    2380:	e1 1d       	adc	r30, r1
    2382:	f9 1f       	adc	r31, r25
    2384:	63 9f       	mul	r22, r19
    2386:	b0 0d       	add	r27, r0
    2388:	e1 1d       	adc	r30, r1
    238a:	f9 1f       	adc	r31, r25
    238c:	bd 01       	movw	r22, r26
    238e:	cf 01       	movw	r24, r30
    2390:	11 24       	eor	r1, r1
    2392:	08 95       	ret

00002394 <__udivmodsi4>:
    2394:	a1 e2       	ldi	r26, 0x21	; 33
    2396:	1a 2e       	mov	r1, r26
    2398:	aa 1b       	sub	r26, r26
    239a:	bb 1b       	sub	r27, r27
    239c:	fd 01       	movw	r30, r26
    239e:	0d c0       	rjmp	.+26     	; 0x23ba <__udivmodsi4_ep>

000023a0 <__udivmodsi4_loop>:
    23a0:	aa 1f       	adc	r26, r26
    23a2:	bb 1f       	adc	r27, r27
    23a4:	ee 1f       	adc	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	a2 17       	cp	r26, r18
    23aa:	b3 07       	cpc	r27, r19
    23ac:	e4 07       	cpc	r30, r20
    23ae:	f5 07       	cpc	r31, r21
    23b0:	20 f0       	brcs	.+8      	; 0x23ba <__udivmodsi4_ep>
    23b2:	a2 1b       	sub	r26, r18
    23b4:	b3 0b       	sbc	r27, r19
    23b6:	e4 0b       	sbc	r30, r20
    23b8:	f5 0b       	sbc	r31, r21

000023ba <__udivmodsi4_ep>:
    23ba:	66 1f       	adc	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	1a 94       	dec	r1
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <__udivmodsi4_loop>
    23c6:	60 95       	com	r22
    23c8:	70 95       	com	r23
    23ca:	80 95       	com	r24
    23cc:	90 95       	com	r25
    23ce:	9b 01       	movw	r18, r22
    23d0:	ac 01       	movw	r20, r24
    23d2:	bd 01       	movw	r22, r26
    23d4:	cf 01       	movw	r24, r30
    23d6:	08 95       	ret

000023d8 <__prologue_saves__>:
    23d8:	2f 92       	push	r2
    23da:	3f 92       	push	r3
    23dc:	4f 92       	push	r4
    23de:	5f 92       	push	r5
    23e0:	6f 92       	push	r6
    23e2:	7f 92       	push	r7
    23e4:	8f 92       	push	r8
    23e6:	9f 92       	push	r9
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	ca 1b       	sub	r28, r26
    2402:	db 0b       	sbc	r29, r27
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	09 94       	ijmp

00002410 <__epilogue_restores__>:
    2410:	2a 88       	ldd	r2, Y+18	; 0x12
    2412:	39 88       	ldd	r3, Y+17	; 0x11
    2414:	48 88       	ldd	r4, Y+16	; 0x10
    2416:	5f 84       	ldd	r5, Y+15	; 0x0f
    2418:	6e 84       	ldd	r6, Y+14	; 0x0e
    241a:	7d 84       	ldd	r7, Y+13	; 0x0d
    241c:	8c 84       	ldd	r8, Y+12	; 0x0c
    241e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2420:	aa 84       	ldd	r10, Y+10	; 0x0a
    2422:	b9 84       	ldd	r11, Y+9	; 0x09
    2424:	c8 84       	ldd	r12, Y+8	; 0x08
    2426:	df 80       	ldd	r13, Y+7	; 0x07
    2428:	ee 80       	ldd	r14, Y+6	; 0x06
    242a:	fd 80       	ldd	r15, Y+5	; 0x05
    242c:	0c 81       	ldd	r16, Y+4	; 0x04
    242e:	1b 81       	ldd	r17, Y+3	; 0x03
    2430:	aa 81       	ldd	r26, Y+2	; 0x02
    2432:	b9 81       	ldd	r27, Y+1	; 0x01
    2434:	ce 0f       	add	r28, r30
    2436:	d1 1d       	adc	r29, r1
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	ed 01       	movw	r28, r26
    2444:	08 95       	ret

00002446 <_exit>:
    2446:	f8 94       	cli

00002448 <__stop_program>:
    2448:	ff cf       	rjmp	.-2      	; 0x2448 <__stop_program>
