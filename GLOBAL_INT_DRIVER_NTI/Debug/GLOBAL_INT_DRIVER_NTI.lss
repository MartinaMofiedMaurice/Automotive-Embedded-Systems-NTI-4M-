
GLOBAL_INT_DRIVER_NTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002a48  00002adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  00002afc  2**0
                  ALLOC
  3 .stab         00002280  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f37  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009844  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000099a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__vector_1>
       8:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_2>
       c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 14 	call	0x2878	; 0x2878 <main>
      8a:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MGI_voidEnable>:





void MGI_voidEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLOBAL_INT_REG,GLOBAL_INT_ENABLE_PIN);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MGI_voidDisable>:

void MGI_voidDisable(void){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLOBAL_INT_REG,GLOBAL_INT_ENABLE_PIN);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MEXIT_voidConfig>:
#include "EXIT_INT_Interface.h"
#include "EXIT_INT_Private.h"
void(*PtrToFunc[3])(void);


void MEXIT_voidConfig(u8 A_u8EXIT,u8 A_u8SenseMode){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <MEXIT_voidConfig+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <MEXIT_voidConfig+0x8>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <MEXIT_voidConfig+0xa>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXIT){
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	3e 83       	std	Y+6, r19	; 0x06
     b98:	2d 83       	std	Y+5, r18	; 0x05
     b9a:	8d 81       	ldd	r24, Y+5	; 0x05
     b9c:	9e 81       	ldd	r25, Y+6	; 0x06
     b9e:	86 30       	cpi	r24, 0x06	; 6
     ba0:	91 05       	cpc	r25, r1
     ba2:	59 f0       	breq	.+22     	; 0xbba <MEXIT_voidConfig+0x3c>
     ba4:	2d 81       	ldd	r18, Y+5	; 0x05
     ba6:	3e 81       	ldd	r19, Y+6	; 0x06
     ba8:	27 30       	cpi	r18, 0x07	; 7
     baa:	31 05       	cpc	r19, r1
     bac:	b1 f0       	breq	.+44     	; 0xbda <MEXIT_voidConfig+0x5c>
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	9e 81       	ldd	r25, Y+6	; 0x06
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	91 05       	cpc	r25, r1
     bb6:	41 f1       	breq	.+80     	; 0xc08 <MEXIT_voidConfig+0x8a>
     bb8:	45 c0       	rjmp	.+138    	; 0xc44 <MEXIT_voidConfig+0xc6>
	case EXIT0:
		MCUCR_REG &= ~(SENSE_MODE<<EXTI0_SENSE_B1);
     bba:	a5 e5       	ldi	r26, 0x55	; 85
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e5 e5       	ldi	r30, 0x55	; 85
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	8c 93       	st	X, r24
		MCUCR_REG |= (A_u8SenseMode<<EXTI0_SENSE_B1);
     bc8:	a5 e5       	ldi	r26, 0x55	; 85
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e5 e5       	ldi	r30, 0x55	; 85
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	89 2b       	or	r24, r25
     bd6:	8c 93       	st	X, r24
     bd8:	35 c0       	rjmp	.+106    	; 0xc44 <MEXIT_voidConfig+0xc6>
		break;
	case EXIT1:
		MCUCR_REG &= ~(SENSE_MODE<<EXTI1_SENSE_B1);
     bda:	a5 e5       	ldi	r26, 0x55	; 85
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e5       	ldi	r30, 0x55	; 85
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	8c 93       	st	X, r24
		MCUCR_REG |= (A_u8SenseMode<<EXTI1_SENSE_B1);
     be8:	a5 e5       	ldi	r26, 0x55	; 85
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e5 e5       	ldi	r30, 0x55	; 85
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	28 2f       	mov	r18, r24
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	82 2b       	or	r24, r18
     c04:	8c 93       	st	X, r24
     c06:	1e c0       	rjmp	.+60     	; 0xc44 <MEXIT_voidConfig+0xc6>
		break;
	case EXIT2:
		switch (A_u8SenseMode)
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	3c 83       	std	Y+4, r19	; 0x04
     c10:	2b 83       	std	Y+3, r18	; 0x03
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	31 f0       	breq	.+12     	; 0xc26 <MEXIT_voidConfig+0xa8>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	21 30       	cpi	r18, 0x01	; 1
     c20:	31 05       	cpc	r19, r1
     c22:	49 f0       	breq	.+18     	; 0xc36 <MEXIT_voidConfig+0xb8>
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <MEXIT_voidConfig+0xc6>
		{
		case FALLING_EXIT2EDGE: CLR_BIT(MCUCSR_REG,EXTI2_SENSE_B1); break;
     c26:	a4 e5       	ldi	r26, 0x54	; 84
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e4 e5       	ldi	r30, 0x54	; 84
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8f 7b       	andi	r24, 0xBF	; 191
     c32:	8c 93       	st	X, r24
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <MEXIT_voidConfig+0xc6>
		case RISING_EXIT2_EDGE:  SET_BIT(MCUCSR_REG,EXTI2_SENSE_B1); break;
     c36:	a4 e5       	ldi	r26, 0x54	; 84
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e4 e5       	ldi	r30, 0x54	; 84
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	80 64       	ori	r24, 0x40	; 64
     c42:	8c 93       	st	X, r24
		}
		break;
		default:
			break;
	}
}
     c44:	26 96       	adiw	r28, 0x06	; 6
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <MEXIT_voidEnable>:

void MEXIT_voidEnable(u8 A_u8EXIT)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <MEXIT_voidEnable+0x6>
     c5c:	0f 92       	push	r0
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXIT){
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	3b 83       	std	Y+3, r19	; 0x03
     c6c:	2a 83       	std	Y+2, r18	; 0x02
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	9b 81       	ldd	r25, Y+3	; 0x03
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	91 05       	cpc	r25, r1
     c76:	59 f0       	breq	.+22     	; 0xc8e <MEXIT_voidEnable+0x38>
     c78:	2a 81       	ldd	r18, Y+2	; 0x02
     c7a:	3b 81       	ldd	r19, Y+3	; 0x03
     c7c:	27 30       	cpi	r18, 0x07	; 7
     c7e:	31 05       	cpc	r19, r1
     c80:	71 f0       	breq	.+28     	; 0xc9e <MEXIT_voidEnable+0x48>
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	85 30       	cpi	r24, 0x05	; 5
     c88:	91 05       	cpc	r25, r1
     c8a:	89 f0       	breq	.+34     	; 0xcae <MEXIT_voidEnable+0x58>
     c8c:	17 c0       	rjmp	.+46     	; 0xcbc <MEXIT_voidEnable+0x66>
	case EXIT0:
		SET_BIT(GICR_REG,EXIT0);
     c8e:	ab e5       	ldi	r26, 0x5B	; 91
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	eb e5       	ldi	r30, 0x5B	; 91
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 64       	ori	r24, 0x40	; 64
     c9a:	8c 93       	st	X, r24
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <MEXIT_voidEnable+0x66>
		break;
	case EXIT1:
		SET_BIT(GICR_REG,EXIT1);
     c9e:	ab e5       	ldi	r26, 0x5B	; 91
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	eb e5       	ldi	r30, 0x5B	; 91
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	8c 93       	st	X, r24
     cac:	07 c0       	rjmp	.+14     	; 0xcbc <MEXIT_voidEnable+0x66>
		break;
	case EXIT2:
		SET_BIT(GICR_REG,EXIT2);
     cae:	ab e5       	ldi	r26, 0x5B	; 91
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	eb e5       	ldi	r30, 0x5B	; 91
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 62       	ori	r24, 0x20	; 32
     cba:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <MEXIT_voidDisable>:

void MEXIT_voidDisable(u8 A_u8EXIT)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <MEXIT_voidDisable+0x6>
     cce:	0f 92       	push	r0
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXIT){
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3b 83       	std	Y+3, r19	; 0x03
     cde:	2a 83       	std	Y+2, r18	; 0x02
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	86 30       	cpi	r24, 0x06	; 6
     ce6:	91 05       	cpc	r25, r1
     ce8:	59 f0       	breq	.+22     	; 0xd00 <MEXIT_voidDisable+0x38>
     cea:	2a 81       	ldd	r18, Y+2	; 0x02
     cec:	3b 81       	ldd	r19, Y+3	; 0x03
     cee:	27 30       	cpi	r18, 0x07	; 7
     cf0:	31 05       	cpc	r19, r1
     cf2:	71 f0       	breq	.+28     	; 0xd10 <MEXIT_voidDisable+0x48>
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	91 05       	cpc	r25, r1
     cfc:	89 f0       	breq	.+34     	; 0xd20 <MEXIT_voidDisable+0x58>
     cfe:	17 c0       	rjmp	.+46     	; 0xd2e <MEXIT_voidDisable+0x66>
	case EXIT0:
		CLR_BIT(GICR_REG,EXIT0);
     d00:	ab e5       	ldi	r26, 0x5B	; 91
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	eb e5       	ldi	r30, 0x5B	; 91
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7b       	andi	r24, 0xBF	; 191
     d0c:	8c 93       	st	X, r24
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <MEXIT_voidDisable+0x66>
		break;
	case EXIT1:
		CLR_BIT(GICR_REG,EXIT1);
     d10:	ab e5       	ldi	r26, 0x5B	; 91
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e5       	ldi	r30, 0x5B	; 91
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8f 77       	andi	r24, 0x7F	; 127
     d1c:	8c 93       	st	X, r24
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <MEXIT_voidDisable+0x66>
		break;
	case EXIT2:
		CLR_BIT(GICR_REG,EXIT2);
     d20:	ab e5       	ldi	r26, 0x5B	; 91
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	eb e5       	ldi	r30, 0x5B	; 91
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 7d       	andi	r24, 0xDF	; 223
     d2c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <MEXIT_voidCLearFlag>:

void MEXIT_voidCLearFlag(u8 A_u8EXIT){
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <MEXIT_voidCLearFlag+0x6>
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXIT){
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3b 83       	std	Y+3, r19	; 0x03
     d50:	2a 83       	std	Y+2, r18	; 0x02
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	86 30       	cpi	r24, 0x06	; 6
     d58:	91 05       	cpc	r25, r1
     d5a:	59 f0       	breq	.+22     	; 0xd72 <MEXIT_voidCLearFlag+0x38>
     d5c:	2a 81       	ldd	r18, Y+2	; 0x02
     d5e:	3b 81       	ldd	r19, Y+3	; 0x03
     d60:	27 30       	cpi	r18, 0x07	; 7
     d62:	31 05       	cpc	r19, r1
     d64:	71 f0       	breq	.+28     	; 0xd82 <MEXIT_voidCLearFlag+0x48>
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	85 30       	cpi	r24, 0x05	; 5
     d6c:	91 05       	cpc	r25, r1
     d6e:	89 f0       	breq	.+34     	; 0xd92 <MEXIT_voidCLearFlag+0x58>
     d70:	17 c0       	rjmp	.+46     	; 0xda0 <MEXIT_voidCLearFlag+0x66>
	case EXIT0:
		SET_BIT(GIFR_REG,EXIT0);
     d72:	aa e5       	ldi	r26, 0x5A	; 90
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e5       	ldi	r30, 0x5A	; 90
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	8c 93       	st	X, r24
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <MEXIT_voidCLearFlag+0x66>
		break;
	case EXIT1:
		SET_BIT(GIFR_REG,EXIT1);
     d82:	aa e5       	ldi	r26, 0x5A	; 90
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e5       	ldi	r30, 0x5A	; 90
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	8c 93       	st	X, r24
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <MEXIT_voidCLearFlag+0x66>
		break;
	case EXIT2:
		SET_BIT(GIFR_REG,EXIT2);
     d92:	aa e5       	ldi	r26, 0x5A	; 90
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ea e5       	ldi	r30, 0x5A	; 90
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 62       	ori	r24, 0x20	; 32
     d9e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <MEXIT_u8CheckFlag>:

u8 MEXIT_u8CheckFlag(u8 A_u8EXIT){
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <MEXIT_u8CheckFlag+0x6>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <MEXIT_u8CheckFlag+0x8>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalFlag;
	switch (A_u8EXIT){
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	3c 83       	std	Y+4, r19	; 0x04
     dc2:	2b 83       	std	Y+3, r18	; 0x03
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	86 30       	cpi	r24, 0x06	; 6
     dca:	91 05       	cpc	r25, r1
     dcc:	59 f0       	breq	.+22     	; 0xde4 <MEXIT_u8CheckFlag+0x38>
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	3c 81       	ldd	r19, Y+4	; 0x04
     dd2:	27 30       	cpi	r18, 0x07	; 7
     dd4:	31 05       	cpc	r19, r1
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <MEXIT_u8CheckFlag+0x4c>
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	85 30       	cpi	r24, 0x05	; 5
     dde:	91 05       	cpc	r25, r1
     de0:	99 f0       	breq	.+38     	; 0xe08 <MEXIT_u8CheckFlag+0x5c>
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <MEXIT_u8CheckFlag+0x6e>
	case EXIT0:
		LocalFlag=GET_BIT(GIFR_REG,EXIT0);
     de4:	ea e5       	ldi	r30, 0x5A	; 90
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	82 95       	swap	r24
     dec:	86 95       	lsr	r24
     dee:	86 95       	lsr	r24
     df0:	83 70       	andi	r24, 0x03	; 3
     df2:	81 70       	andi	r24, 0x01	; 1
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	12 c0       	rjmp	.+36     	; 0xe1c <MEXIT_u8CheckFlag+0x70>
		break;
	case EXIT1:
		LocalFlag=GET_BIT(GIFR_REG,EXIT1);
     df8:	ea e5       	ldi	r30, 0x5A	; 90
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 1f       	adc	r24, r24
     e00:	88 27       	eor	r24, r24
     e02:	88 1f       	adc	r24, r24
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <MEXIT_u8CheckFlag+0x70>
		break;
	case EXIT2:
		LocalFlag=GET_BIT(GIFR_REG,EXIT2);
     e08:	ea e5       	ldi	r30, 0x5A	; 90
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	82 95       	swap	r24
     e10:	86 95       	lsr	r24
     e12:	87 70       	andi	r24, 0x07	; 7
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <MEXIT_u8CheckFlag+0x70>
		break;
	default:
		LocalFlag = 0;
     e1a:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LocalFlag;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <MEXIT_voidCallBack>:


void MEXIT_voidCallBack(u8 A_u8EXIT,void(*ptrToFunc)(void)){
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <MEXIT_voidCallBack+0x6>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <MEXIT_voidCallBack+0x8>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	7b 83       	std	Y+3, r23	; 0x03
     e3e:	6a 83       	std	Y+2, r22	; 0x02
	if(ptrToFunc !=NULL){
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	49 f1       	breq	.+82     	; 0xe9a <MEXIT_voidCallBack+0x6e>
		switch(A_u8EXIT){
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	2c 83       	std	Y+4, r18	; 0x04
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	86 30       	cpi	r24, 0x06	; 6
     e58:	91 05       	cpc	r25, r1
     e5a:	59 f0       	breq	.+22     	; 0xe72 <MEXIT_voidCallBack+0x46>
     e5c:	2c 81       	ldd	r18, Y+4	; 0x04
     e5e:	3d 81       	ldd	r19, Y+5	; 0x05
     e60:	27 30       	cpi	r18, 0x07	; 7
     e62:	31 05       	cpc	r19, r1
     e64:	69 f0       	breq	.+26     	; 0xe80 <MEXIT_voidCallBack+0x54>
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	85 30       	cpi	r24, 0x05	; 5
     e6c:	91 05       	cpc	r25, r1
     e6e:	79 f0       	breq	.+30     	; 0xe8e <MEXIT_voidCallBack+0x62>
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <MEXIT_voidCallBack+0x6e>
		case EXIT0:
			PtrToFunc[0]=ptrToFunc;
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	90 93 82 00 	sts	0x0082, r25
     e7a:	80 93 81 00 	sts	0x0081, r24
     e7e:	0d c0       	rjmp	.+26     	; 0xe9a <MEXIT_voidCallBack+0x6e>
			break;
		case EXIT1:
			PtrToFunc[1]=ptrToFunc;
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	90 93 84 00 	sts	0x0084, r25
     e88:	80 93 83 00 	sts	0x0083, r24
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <MEXIT_voidCallBack+0x6e>
			break;
		case EXIT2:
			PtrToFunc[2]=ptrToFunc;
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	90 93 86 00 	sts	0x0086, r25
     e96:	80 93 85 00 	sts	0x0085, r24
			break;
		default:
			break;
		}
	}
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <__vector_1>:
void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	2f 93       	push	r18
     eb6:	3f 93       	push	r19
     eb8:	4f 93       	push	r20
     eba:	5f 93       	push	r21
     ebc:	6f 93       	push	r22
     ebe:	7f 93       	push	r23
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	af 93       	push	r26
     ec6:	bf 93       	push	r27
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	if (PtrToFunc[0]!= NULL)
     ed4:	80 91 81 00 	lds	r24, 0x0081
     ed8:	90 91 82 00 	lds	r25, 0x0082
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	29 f0       	breq	.+10     	; 0xeea <__vector_1+0x40>
	{
		PtrToFunc[0]();
     ee0:	e0 91 81 00 	lds	r30, 0x0081
     ee4:	f0 91 82 00 	lds	r31, 0x0082
     ee8:	09 95       	icall
	}
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	7f 91       	pop	r23
     efc:	6f 91       	pop	r22
     efe:	5f 91       	pop	r21
     f00:	4f 91       	pop	r20
     f02:	3f 91       	pop	r19
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_2>:


void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	if (PtrToFunc[1]!= NULL)
     f3a:	80 91 83 00 	lds	r24, 0x0083
     f3e:	90 91 84 00 	lds	r25, 0x0084
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	29 f0       	breq	.+10     	; 0xf50 <__vector_2+0x40>
	{
		PtrToFunc[1]();
     f46:	e0 91 83 00 	lds	r30, 0x0083
     f4a:	f0 91 84 00 	lds	r31, 0x0084
     f4e:	09 95       	icall
	}
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <__vector_3>:

void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
	if (PtrToFunc[2]!= NULL)
     fa0:	80 91 85 00 	lds	r24, 0x0085
     fa4:	90 91 86 00 	lds	r25, 0x0086
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	29 f0       	breq	.+10     	; 0xfb6 <__vector_3+0x40>
	{
		PtrToFunc[2]();
     fac:	e0 91 85 00 	lds	r30, 0x0085
     fb0:	f0 91 86 00 	lds	r31, 0x0086
     fb4:	09 95       	icall
	}
}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	0f 90       	pop	r0
     fd8:	1f 90       	pop	r1
     fda:	18 95       	reti

00000fdc <MDIO_voidInit>:
#include "DIO_configuration.h"
#include "DIO_private.h"


//Initializing ports
void MDIO_voidInit(void){
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG= CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,
     fe4:	ea e3       	ldi	r30, 0x3A	; 58
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	80 83       	st	Z, r24
			PORTA_PIN4_DIRECTION,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG= CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,
     fec:	e7 e3       	ldi	r30, 0x37	; 55
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	80 83       	st	Z, r24
				PORTB_PIN4_DIRECTION,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG= CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,
     ff4:	e4 e3       	ldi	r30, 0x34	; 52
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	80 83       	st	Z, r24
				PORTC_PIN4_DIRECTION,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG= CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,
     ffc:	e1 e3       	ldi	r30, 0x31	; 49
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	83 e1       	ldi	r24, 0x13	; 19
    1002:	80 83       	st	Z, r24
				PORTD_PIN4_DIRECTION,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	//To give a value for the port wether it was low or high for beginning
	PORTA_REG= CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,
    1004:	eb e3       	ldi	r30, 0x3B	; 59
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	10 82       	st	Z, r1
			PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG= CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	10 82       	st	Z, r1
			PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG= CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	10 82       	st	Z, r1
			PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG= CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	8c ee       	ldi	r24, 0xEC	; 236
    101c:	80 83       	st	Z, r24
				PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);

}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <MDIO_voidSetPortDirection>:
//To Set PORT Value takes PORT NAME and PORT DIRECTION
//PORT ID:PORTA,BCD
//PIN ID:0/7

void MDIO_voidSetPortDirection(u8 A_u8PortId,u8 A_u8Direction)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <MDIO_voidSetPortDirection+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <MDIO_voidSetPortDirection+0x8>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId) {
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3c 83       	std	Y+4, r19	; 0x04
    103c:	2b 83       	std	Y+3, r18	; 0x03
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	d1 f0       	breq	.+52     	; 0x107c <MDIO_voidSetPortDirection+0x58>
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <MDIO_voidSetPortDirection+0x38>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	61 f0       	breq	.+24     	; 0x1072 <MDIO_voidSetPortDirection+0x4e>
    105a:	1e c0       	rjmp	.+60     	; 0x1098 <MDIO_voidSetPortDirection+0x74>
    105c:	2b 81       	ldd	r18, Y+3	; 0x03
    105e:	3c 81       	ldd	r19, Y+4	; 0x04
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	81 f0       	breq	.+32     	; 0x1086 <MDIO_voidSetPortDirection+0x62>
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	91 05       	cpc	r25, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <MDIO_voidSetPortDirection+0x6c>
    1070:	13 c0       	rjmp	.+38     	; 0x1098 <MDIO_voidSetPortDirection+0x74>
		case PORTA:
			DDRA_REG=A_u8Direction;
    1072:	ea e3       	ldi	r30, 0x3A	; 58
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
    107a:	0e c0       	rjmp	.+28     	; 0x1098 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTB:
			DDRB_REG=A_u8Direction;
    107c:	e7 e3       	ldi	r30, 0x37	; 55
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTC:
			DDRC_REG=A_u8Direction;
    1086:	e4 e3       	ldi	r30, 0x34	; 52
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTD:
			DDRD_REG=A_u8Direction;
    1090:	e1 e3       	ldi	r30, 0x31	; 49
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <MDIO_voidSetPortValue>:

//To Set PORT Value takes PORT NAME and PORT VALUE
//PORT ID:PORTA,BCD
//PIN ID:0/7
void MDIO_voidSetPortValue(u8 A_u8PortId,u8 A_u8Value)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <MDIO_voidSetPortValue+0x6>
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <MDIO_voidSetPortValue+0x8>
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId) {
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <MDIO_voidSetPortValue+0x58>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <MDIO_voidSetPortValue+0x38>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <MDIO_voidSetPortValue+0x4e>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <MDIO_voidSetPortValue+0x74>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <MDIO_voidSetPortValue+0x62>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <MDIO_voidSetPortValue+0x6c>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <MDIO_voidSetPortValue+0x74>
		case PORTA:
			PORTA_REG=A_u8Value;
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <MDIO_voidSetPortValue+0x74>
			break;
		case PORTB:
			PORTB_REG=A_u8Value;
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <MDIO_voidSetPortValue+0x74>
			break;
		case PORTC:
			PORTC_REG=A_u8Value;
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <MDIO_voidSetPortValue+0x74>
			break;
		case PORTD:
			PORTD_REG=A_u8Value;
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <MDIO_voidSetPinDirection>:
//To Set pin Dirtection either OUTPUT or INPUT takes PORT NAME ,PIN NUMBER and PIN DIRECTION
//PORT ID:PORTA,BCD
//PIN ID:0/7
//PIN_DIRECTION:OUTPUT,INPUT
void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Direction)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	2d 97       	sbiw	r28, 0x0d	; 13
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	6a 83       	std	Y+2, r22	; 0x02
    1140:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3d 87       	std	Y+13, r19	; 0x0d
    114a:	2c 87       	std	Y+12, r18	; 0x0c
    114c:	8c 85       	ldd	r24, Y+12	; 0x0c
    114e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	09 f4       	brne	.+2      	; 0x1158 <MDIO_voidSetPinDirection+0x30>
    1156:	4f c0       	rjmp	.+158    	; 0x11f6 <MDIO_voidSetPinDirection+0xce>
    1158:	2c 85       	ldd	r18, Y+12	; 0x0c
    115a:	3d 85       	ldd	r19, Y+13	; 0x0d
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <MDIO_voidSetPinDirection+0x44>
    1162:	8c 85       	ldd	r24, Y+12	; 0x0c
    1164:	9d 85       	ldd	r25, Y+13	; 0x0d
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	71 f0       	breq	.+28     	; 0x1186 <MDIO_voidSetPinDirection+0x5e>
    116a:	eb c0       	rjmp	.+470    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
    116c:	2c 85       	ldd	r18, Y+12	; 0x0c
    116e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <MDIO_voidSetPinDirection+0x50>
    1176:	77 c0       	rjmp	.+238    	; 0x1266 <MDIO_voidSetPinDirection+0x13e>
    1178:	8c 85       	ldd	r24, Y+12	; 0x0c
    117a:	9d 85       	ldd	r25, Y+13	; 0x0d
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <MDIO_voidSetPinDirection+0x5c>
    1182:	a9 c0       	rjmp	.+338    	; 0x12d6 <MDIO_voidSetPinDirection+0x1ae>
    1184:	de c0       	rjmp	.+444    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
		case PORTA:
			switch (A_u8Direction) {
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3b 87       	std	Y+11, r19	; 0x0b
    118e:	2a 87       	std	Y+10, r18	; 0x0a
    1190:	8a 85       	ldd	r24, Y+10	; 0x0a
    1192:	9b 85       	ldd	r25, Y+11	; 0x0b
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	d1 f0       	breq	.+52     	; 0x11cc <MDIO_voidSetPinDirection+0xa4>
    1198:	2a 85       	ldd	r18, Y+10	; 0x0a
    119a:	3b 85       	ldd	r19, Y+11	; 0x0b
    119c:	21 30       	cpi	r18, 0x01	; 1
    119e:	31 05       	cpc	r19, r1
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <MDIO_voidSetPinDirection+0x7c>
    11a2:	cf c0       	rjmp	.+414    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
			case PIN_OUTPUT:
				SET_BIT(DDRA_REG,A_u8PinId);
    11a4:	aa e3       	ldi	r26, 0x3A	; 58
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <MDIO_voidSetPinDirection+0x9a>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <MDIO_voidSetPinDirection+0x96>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	bb c0       	rjmp	.+374    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
				break;
			case PIN_INPUT:
				CLR_BIT(DDRA_REG,A_u8PinId);
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <MDIO_voidSetPinDirection+0xc2>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <MDIO_voidSetPinDirection+0xbe>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	a6 c0       	rjmp	.+332    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
				break;
		}

			break;
		case PORTB:
				switch (A_u8Direction) {
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	39 87       	std	Y+9, r19	; 0x09
    11fe:	28 87       	std	Y+8, r18	; 0x08
    1200:	88 85       	ldd	r24, Y+8	; 0x08
    1202:	99 85       	ldd	r25, Y+9	; 0x09
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	d1 f0       	breq	.+52     	; 0x123c <MDIO_voidSetPinDirection+0x114>
    1208:	28 85       	ldd	r18, Y+8	; 0x08
    120a:	39 85       	ldd	r19, Y+9	; 0x09
    120c:	21 30       	cpi	r18, 0x01	; 1
    120e:	31 05       	cpc	r19, r1
    1210:	09 f0       	breq	.+2      	; 0x1214 <MDIO_voidSetPinDirection+0xec>
    1212:	97 c0       	rjmp	.+302    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
				case PIN_OUTPUT:
					SET_BIT(DDRB_REG,A_u8PinId);
    1214:	a7 e3       	ldi	r26, 0x37	; 55
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e7 e3       	ldi	r30, 0x37	; 55
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <MDIO_voidSetPinDirection+0x10a>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <MDIO_voidSetPinDirection+0x106>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	83 c0       	rjmp	.+262    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
					break;
				case PIN_INPUT:
					CLR_BIT(DDRB_REG,A_u8PinId);
    123c:	a7 e3       	ldi	r26, 0x37	; 55
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e7 e3       	ldi	r30, 0x37	; 55
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <MDIO_voidSetPinDirection+0x132>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <MDIO_voidSetPinDirection+0x12e>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	6e c0       	rjmp	.+220    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
					break;
			}

				break;
		case PORTC:
					switch (A_u8Direction) {
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3f 83       	std	Y+7, r19	; 0x07
    126e:	2e 83       	std	Y+6, r18	; 0x06
    1270:	8e 81       	ldd	r24, Y+6	; 0x06
    1272:	9f 81       	ldd	r25, Y+7	; 0x07
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	d1 f0       	breq	.+52     	; 0x12ac <MDIO_voidSetPinDirection+0x184>
    1278:	2e 81       	ldd	r18, Y+6	; 0x06
    127a:	3f 81       	ldd	r19, Y+7	; 0x07
    127c:	21 30       	cpi	r18, 0x01	; 1
    127e:	31 05       	cpc	r19, r1
    1280:	09 f0       	breq	.+2      	; 0x1284 <MDIO_voidSetPinDirection+0x15c>
    1282:	5f c0       	rjmp	.+190    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
					case PIN_OUTPUT:
						SET_BIT(DDRC_REG,A_u8PinId);
    1284:	a4 e3       	ldi	r26, 0x34	; 52
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e4 e3       	ldi	r30, 0x34	; 52
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <MDIO_voidSetPinDirection+0x17a>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <MDIO_voidSetPinDirection+0x176>
    12a6:	84 2b       	or	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	4b c0       	rjmp	.+150    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
						break;
					case PIN_INPUT:
						CLR_BIT(DDRC_REG,A_u8PinId);
    12ac:	a4 e3       	ldi	r26, 0x34	; 52
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e4 e3       	ldi	r30, 0x34	; 52
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <MDIO_voidSetPinDirection+0x1a2>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <MDIO_voidSetPinDirection+0x19e>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	36 c0       	rjmp	.+108    	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
				}

					break;

			case PORTD:
						switch (A_u8Direction) {
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3d 83       	std	Y+5, r19	; 0x05
    12de:	2c 83       	std	Y+4, r18	; 0x04
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	c9 f0       	breq	.+50     	; 0x131a <MDIO_voidSetPinDirection+0x1f2>
    12e8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ea:	3d 81       	ldd	r19, Y+5	; 0x05
    12ec:	21 30       	cpi	r18, 0x01	; 1
    12ee:	31 05       	cpc	r19, r1
    12f0:	41 f5       	brne	.+80     	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
						case PIN_OUTPUT:
							SET_BIT(DDRD_REG,A_u8PinId);
    12f2:	a1 e3       	ldi	r26, 0x31	; 49
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e1 e3       	ldi	r30, 0x31	; 49
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <MDIO_voidSetPinDirection+0x1e8>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <MDIO_voidSetPinDirection+0x1e4>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <MDIO_voidSetPinDirection+0x21a>
							break;
						case PIN_INPUT:
							CLR_BIT(DDRD_REG,A_u8PinId);
    131a:	a1 e3       	ldi	r26, 0x31	; 49
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e1 e3       	ldi	r30, 0x31	; 49
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <MDIO_voidSetPinDirection+0x210>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <MDIO_voidSetPinDirection+0x20c>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    1342:	2d 96       	adiw	r28, 0x0d	; 13
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <MDIO_voidSetPinValue>:
//To Set pin Value either HIGH or LOW takes PORT NAME ,PIN NUMBER and PIN VALUE
//PORT ID:PORTA,BCD
//PIN ID:0/7
//VALUE:HIGH,LOW
void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Value)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	2d 97       	sbiw	r28, 0x0d	; 13
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	6a 83       	std	Y+2, r22	; 0x02
    136c:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3d 87       	std	Y+13, r19	; 0x0d
    1376:	2c 87       	std	Y+12, r18	; 0x0c
    1378:	8c 85       	ldd	r24, Y+12	; 0x0c
    137a:	9d 85       	ldd	r25, Y+13	; 0x0d
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <MDIO_voidSetPinValue+0x30>
    1382:	4f c0       	rjmp	.+158    	; 0x1422 <MDIO_voidSetPinValue+0xce>
    1384:	2c 85       	ldd	r18, Y+12	; 0x0c
    1386:	3d 85       	ldd	r19, Y+13	; 0x0d
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <MDIO_voidSetPinValue+0x44>
    138e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1390:	9d 85       	ldd	r25, Y+13	; 0x0d
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	71 f0       	breq	.+28     	; 0x13b2 <MDIO_voidSetPinValue+0x5e>
    1396:	eb c0       	rjmp	.+470    	; 0x156e <MDIO_voidSetPinValue+0x21a>
    1398:	2c 85       	ldd	r18, Y+12	; 0x0c
    139a:	3d 85       	ldd	r19, Y+13	; 0x0d
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <MDIO_voidSetPinValue+0x50>
    13a2:	77 c0       	rjmp	.+238    	; 0x1492 <MDIO_voidSetPinValue+0x13e>
    13a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <MDIO_voidSetPinValue+0x5c>
    13ae:	a9 c0       	rjmp	.+338    	; 0x1502 <MDIO_voidSetPinValue+0x1ae>
    13b0:	de c0       	rjmp	.+444    	; 0x156e <MDIO_voidSetPinValue+0x21a>
		case PORTA:
			switch (A_u8Value ) {
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3b 87       	std	Y+11, r19	; 0x0b
    13ba:	2a 87       	std	Y+10, r18	; 0x0a
    13bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13be:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	d1 f0       	breq	.+52     	; 0x13f8 <MDIO_voidSetPinValue+0xa4>
    13c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    13c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    13c8:	21 30       	cpi	r18, 0x01	; 1
    13ca:	31 05       	cpc	r19, r1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <MDIO_voidSetPinValue+0x7c>
    13ce:	cf c0       	rjmp	.+414    	; 0x156e <MDIO_voidSetPinValue+0x21a>
			case PIN_HIGH:
				SET_BIT(PORTA_REG,A_u8PinId);
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <MDIO_voidSetPinValue+0x9a>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <MDIO_voidSetPinValue+0x96>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	bb c0       	rjmp	.+374    	; 0x156e <MDIO_voidSetPinValue+0x21a>
				break;
			case PIN_LOW:
				CLR_BIT(PORTA_REG,A_u8PinId);
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <MDIO_voidSetPinValue+0xc2>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <MDIO_voidSetPinValue+0xbe>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	a6 c0       	rjmp	.+332    	; 0x156e <MDIO_voidSetPinValue+0x21a>
				break;
		}

			break;
		case PORTB:
				switch (A_u8Value ) {
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	39 87       	std	Y+9, r19	; 0x09
    142a:	28 87       	std	Y+8, r18	; 0x08
    142c:	88 85       	ldd	r24, Y+8	; 0x08
    142e:	99 85       	ldd	r25, Y+9	; 0x09
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	d1 f0       	breq	.+52     	; 0x1468 <MDIO_voidSetPinValue+0x114>
    1434:	28 85       	ldd	r18, Y+8	; 0x08
    1436:	39 85       	ldd	r19, Y+9	; 0x09
    1438:	21 30       	cpi	r18, 0x01	; 1
    143a:	31 05       	cpc	r19, r1
    143c:	09 f0       	breq	.+2      	; 0x1440 <MDIO_voidSetPinValue+0xec>
    143e:	97 c0       	rjmp	.+302    	; 0x156e <MDIO_voidSetPinValue+0x21a>
				case PIN_HIGH:
					SET_BIT(PORTB_REG,A_u8PinId);
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <MDIO_voidSetPinValue+0x10a>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <MDIO_voidSetPinValue+0x106>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	83 c0       	rjmp	.+262    	; 0x156e <MDIO_voidSetPinValue+0x21a>
					break;
				case PIN_LOW:
					CLR_BIT(PORTB_REG,A_u8PinId);
    1468:	a8 e3       	ldi	r26, 0x38	; 56
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e3       	ldi	r30, 0x38	; 56
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <MDIO_voidSetPinValue+0x132>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <MDIO_voidSetPinValue+0x12e>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	6e c0       	rjmp	.+220    	; 0x156e <MDIO_voidSetPinValue+0x21a>
					break;
			}

				break;
		case PORTC:
					switch (A_u8Value ) {
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3f 83       	std	Y+7, r19	; 0x07
    149a:	2e 83       	std	Y+6, r18	; 0x06
    149c:	8e 81       	ldd	r24, Y+6	; 0x06
    149e:	9f 81       	ldd	r25, Y+7	; 0x07
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	d1 f0       	breq	.+52     	; 0x14d8 <MDIO_voidSetPinValue+0x184>
    14a4:	2e 81       	ldd	r18, Y+6	; 0x06
    14a6:	3f 81       	ldd	r19, Y+7	; 0x07
    14a8:	21 30       	cpi	r18, 0x01	; 1
    14aa:	31 05       	cpc	r19, r1
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <MDIO_voidSetPinValue+0x15c>
    14ae:	5f c0       	rjmp	.+190    	; 0x156e <MDIO_voidSetPinValue+0x21a>
					case PIN_HIGH:
						SET_BIT(PORTC_REG,A_u8PinId);
    14b0:	a5 e3       	ldi	r26, 0x35	; 53
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e3       	ldi	r30, 0x35	; 53
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <MDIO_voidSetPinValue+0x17a>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <MDIO_voidSetPinValue+0x176>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	4b c0       	rjmp	.+150    	; 0x156e <MDIO_voidSetPinValue+0x21a>
						break;
					case PIN_LOW:
						CLR_BIT(PORTC_REG,A_u8PinId);
    14d8:	a5 e3       	ldi	r26, 0x35	; 53
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e3       	ldi	r30, 0x35	; 53
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <MDIO_voidSetPinValue+0x1a2>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <MDIO_voidSetPinValue+0x19e>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	36 c0       	rjmp	.+108    	; 0x156e <MDIO_voidSetPinValue+0x21a>
				}

					break;

			case PORTD:
						switch (A_u8Value ) {
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3d 83       	std	Y+5, r19	; 0x05
    150a:	2c 83       	std	Y+4, r18	; 0x04
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	c9 f0       	breq	.+50     	; 0x1546 <MDIO_voidSetPinValue+0x1f2>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	21 30       	cpi	r18, 0x01	; 1
    151a:	31 05       	cpc	r19, r1
    151c:	41 f5       	brne	.+80     	; 0x156e <MDIO_voidSetPinValue+0x21a>
						case PIN_HIGH:
							SET_BIT(PORTD_REG,A_u8PinId);
    151e:	a2 e3       	ldi	r26, 0x32	; 50
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e2 e3       	ldi	r30, 0x32	; 50
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <MDIO_voidSetPinValue+0x1e8>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <MDIO_voidSetPinValue+0x1e4>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	14 c0       	rjmp	.+40     	; 0x156e <MDIO_voidSetPinValue+0x21a>
							break;
						case PIN_LOW:
							CLR_BIT(PORTD_REG,A_u8PinId);
    1546:	a2 e3       	ldi	r26, 0x32	; 50
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e2 e3       	ldi	r30, 0x32	; 50
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <MDIO_voidSetPinValue+0x210>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <MDIO_voidSetPinValue+0x20c>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    156e:	2d 96       	adiw	r28, 0x0d	; 13
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <MDIO_u8GetPinValue>:
//PORT ID:PORTA,BCD
//PIN ID:0/7


u8 MDIO_u8GetPinValue(u8 A_u8PortID,u8 A_u8PinID)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <MDIO_u8GetPinValue+0x6>
    1586:	00 d0       	rcall	.+0      	; 0x1588 <MDIO_u8GetPinValue+0x8>
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=0;
    1592:	19 82       	std	Y+1, r1	; 0x01
	switch (A_u8PortID) {
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3d 83       	std	Y+5, r19	; 0x05
    159c:	2c 83       	std	Y+4, r18	; 0x04
    159e:	4c 81       	ldd	r20, Y+4	; 0x04
    15a0:	5d 81       	ldd	r21, Y+5	; 0x05
    15a2:	41 30       	cpi	r20, 0x01	; 1
    15a4:	51 05       	cpc	r21, r1
    15a6:	41 f1       	breq	.+80     	; 0x15f8 <MDIO_u8GetPinValue+0x78>
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	91 05       	cpc	r25, r1
    15b0:	34 f4       	brge	.+12     	; 0x15be <MDIO_u8GetPinValue+0x3e>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	3d 81       	ldd	r19, Y+5	; 0x05
    15b6:	21 15       	cp	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <MDIO_u8GetPinValue+0x54>
    15bc:	52 c0       	rjmp	.+164    	; 0x1662 <MDIO_u8GetPinValue+0xe2>
    15be:	4c 81       	ldd	r20, Y+4	; 0x04
    15c0:	5d 81       	ldd	r21, Y+5	; 0x05
    15c2:	42 30       	cpi	r20, 0x02	; 2
    15c4:	51 05       	cpc	r21, r1
    15c6:	51 f1       	breq	.+84     	; 0x161c <MDIO_u8GetPinValue+0x9c>
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	b9 f1       	breq	.+110    	; 0x1640 <MDIO_u8GetPinValue+0xc0>
    15d2:	47 c0       	rjmp	.+142    	; 0x1662 <MDIO_u8GetPinValue+0xe2>
		case PORTA:
			local_u8PinValue=GET_BIT(PINA_REG,A_u8PinID);
    15d4:	e9 e3       	ldi	r30, 0x39	; 57
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <MDIO_u8GetPinValue+0x6c>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <MDIO_u8GetPinValue+0x68>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	35 c0       	rjmp	.+106    	; 0x1662 <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTB:
			local_u8PinValue=GET_BIT(PINB_REG,A_u8PinID);
    15f8:	e6 e3       	ldi	r30, 0x36	; 54
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <MDIO_u8GetPinValue+0x90>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <MDIO_u8GetPinValue+0x8c>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	23 c0       	rjmp	.+70     	; 0x1662 <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTC:
			local_u8PinValue=GET_BIT(PINC_REG,A_u8PinID);
    161c:	e3 e3       	ldi	r30, 0x33	; 51
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <MDIO_u8GetPinValue+0xb4>
    1630:	55 95       	asr	r21
    1632:	47 95       	ror	r20
    1634:	8a 95       	dec	r24
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <MDIO_u8GetPinValue+0xb0>
    1638:	ca 01       	movw	r24, r20
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	11 c0       	rjmp	.+34     	; 0x1662 <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTD:
			local_u8PinValue=GET_BIT(PIND_REG,A_u8PinID);
    1640:	e0 e3       	ldi	r30, 0x30	; 48
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <MDIO_u8GetPinValue+0xd8>
    1654:	55 95       	asr	r21
    1656:	47 95       	ror	r20
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <MDIO_u8GetPinValue+0xd4>
    165c:	ca 01       	movw	r24, r20
    165e:	81 70       	andi	r24, 0x01	; 1
    1660:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	return local_u8PinValue;
    1662:	89 81       	ldd	r24, Y+1	; 0x01

}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <MDIO_voidToggle>:
//To Toggle a pin it takes  PORT NAME ,PIN NUMBER and PIN VALUE
void MDIO_voidToggle(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Value)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <MDIO_voidToggle+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <MDIO_voidToggle+0x8>
    167c:	0f 92       	push	r0
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
    1686:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3d 83       	std	Y+5, r19	; 0x05
    1690:	2c 83       	std	Y+4, r18	; 0x04
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	49 f1       	breq	.+82     	; 0x16ee <MDIO_voidToggle+0x7a>
    169c:	2c 81       	ldd	r18, Y+4	; 0x04
    169e:	3d 81       	ldd	r19, Y+5	; 0x05
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <MDIO_voidToggle+0x3c>
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <MDIO_voidToggle+0x52>
    16ae:	5a c0       	rjmp	.+180    	; 0x1764 <MDIO_voidToggle+0xf0>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	71 f1       	breq	.+92     	; 0x1716 <MDIO_voidToggle+0xa2>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	91 05       	cpc	r25, r1
    16c2:	e9 f1       	breq	.+122    	; 0x173e <MDIO_voidToggle+0xca>
    16c4:	4f c0       	rjmp	.+158    	; 0x1764 <MDIO_voidToggle+0xf0>
		case PORTA:
			TOGGLE_BIT(PORTA_REG,A_u8PinId);
    16c6:	ab e3       	ldi	r26, 0x3B	; 59
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e3       	ldi	r30, 0x3B	; 59
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <MDIO_voidToggle+0x70>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <MDIO_voidToggle+0x6c>
    16e8:	84 27       	eor	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	3b c0       	rjmp	.+118    	; 0x1764 <MDIO_voidToggle+0xf0>
			break;
		case PORTB:
			TOGGLE_BIT(PORTB_REG,A_u8PinId);
    16ee:	a8 e3       	ldi	r26, 0x38	; 56
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e8 e3       	ldi	r30, 0x38	; 56
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <MDIO_voidToggle+0x98>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <MDIO_voidToggle+0x94>
    1710:	84 27       	eor	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	27 c0       	rjmp	.+78     	; 0x1764 <MDIO_voidToggle+0xf0>
				break;
		case PORTC:
			TOGGLE_BIT(PORTC_REG,A_u8PinId);
    1716:	a5 e3       	ldi	r26, 0x35	; 53
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e5 e3       	ldi	r30, 0x35	; 53
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <MDIO_voidToggle+0xc0>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <MDIO_voidToggle+0xbc>
    1738:	84 27       	eor	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	13 c0       	rjmp	.+38     	; 0x1764 <MDIO_voidToggle+0xf0>
					break;

			case PORTD:
				TOGGLE_BIT(PORTD_REG,A_u8PinId);
    173e:	a2 e3       	ldi	r26, 0x32	; 50
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <MDIO_voidToggle+0xe8>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <MDIO_voidToggle+0xe4>
    1760:	84 27       	eor	r24, r20
    1762:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <HLCD_voidSendCommand>:
#include "LCD_Configurations.h"
#include "LCD_Interface.h"
#include "LCD_Private.h"


void HLCD_voidSendCommand(u8 A_u8Command){
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	c7 54       	subi	r28, 0x47	; 71
    1782:	d0 40       	sbci	r29, 0x00	; 0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	fe 01       	movw	r30, r28
    1790:	e9 5b       	subi	r30, 0xB9	; 185
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	80 83       	st	Z, r24

		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Command,4));
    1796:	fe 01       	movw	r30, r28
    1798:	e9 5b       	subi	r30, 0xB9	; 185
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	82 95       	swap	r24
    17a0:	8f 70       	andi	r24, 0x0F	; 15
    17a2:	98 2f       	mov	r25, r24
    17a4:	91 70       	andi	r25, 0x01	; 1
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	49 2f       	mov	r20, r25
    17ac:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Command,5));
    17b0:	fe 01       	movw	r30, r28
    17b2:	e9 5b       	subi	r30, 0xB9	; 185
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	82 95       	swap	r24
    17ba:	86 95       	lsr	r24
    17bc:	87 70       	andi	r24, 0x07	; 7
    17be:	98 2f       	mov	r25, r24
    17c0:	91 70       	andi	r25, 0x01	; 1
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	49 2f       	mov	r20, r25
    17c8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Command,6));
    17cc:	fe 01       	movw	r30, r28
    17ce:	e9 5b       	subi	r30, 0xB9	; 185
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 81       	ld	r24, Z
    17d4:	82 95       	swap	r24
    17d6:	86 95       	lsr	r24
    17d8:	86 95       	lsr	r24
    17da:	83 70       	andi	r24, 0x03	; 3
    17dc:	98 2f       	mov	r25, r24
    17de:	91 70       	andi	r25, 0x01	; 1
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	49 2f       	mov	r20, r25
    17e6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Command,7));
    17ea:	fe 01       	movw	r30, r28
    17ec:	e9 5b       	subi	r30, 0xB9	; 185
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	98 2f       	mov	r25, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	99 27       	eor	r25, r25
    17f8:	99 1f       	adc	r25, r25
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	64 e0       	ldi	r22, 0x04	; 4
    17fe:	49 2f       	mov	r20, r25
    1800:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_LOW);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	63 e0       	ldi	r22, 0x03	; 3
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    180e:	fe 01       	movw	r30, r28
    1810:	ed 5b       	subi	r30, 0xBD	; 189
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e8       	ldi	r26, 0x80	; 128
    181a:	bf e3       	ldi	r27, 0x3F	; 63
    181c:	80 83       	st	Z, r24
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	a2 83       	std	Z+2, r26	; 0x02
    1822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	8e 01       	movw	r16, r28
    1826:	01 5c       	subi	r16, 0xC1	; 193
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	fe 01       	movw	r30, r28
    182c:	ed 5b       	subi	r30, 0xBD	; 189
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e8       	ldi	r19, 0x80	; 128
    183c:	4b e3       	ldi	r20, 0x3B	; 59
    183e:	55 e4       	ldi	r21, 0x45	; 69
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	f8 01       	movw	r30, r16
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1852:	fe 01       	movw	r30, r28
    1854:	ff 96       	adiw	r30, 0x3f	; 63
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <HLCD_voidSendCommand+0x104>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9e af       	std	Y+62, r25	; 0x3e
    1874:	8d af       	std	Y+61, r24	; 0x3d
    1876:	46 c0       	rjmp	.+140    	; 0x1904 <HLCD_voidSendCommand+0x190>
	else if (__tmp > 65535)
    1878:	fe 01       	movw	r30, r28
    187a:	ff 96       	adiw	r30, 0x3f	; 63
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	64 f5       	brge	.+88     	; 0x18ec <HLCD_voidSendCommand+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	fe 01       	movw	r30, r28
    1896:	ed 5b       	subi	r30, 0xBD	; 189
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e2       	ldi	r20, 0x20	; 32
    18a8:	51 e4       	ldi	r21, 0x41	; 65
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e af       	std	Y+62, r25	; 0x3e
    18c0:	8d af       	std	Y+61, r24	; 0x3d
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <HLCD_voidSendCommand+0x16e>
    18c4:	8c e2       	ldi	r24, 0x2C	; 44
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	9c af       	std	Y+60, r25	; 0x3c
    18ca:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <HLCD_voidSendCommand+0x15c>
    18d4:	9c af       	std	Y+60, r25	; 0x3c
    18d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18da:	9e ad       	ldd	r25, Y+62	; 0x3e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9e af       	std	Y+62, r25	; 0x3e
    18e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <HLCD_voidSendCommand+0x150>
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <HLCD_voidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	fe 01       	movw	r30, r28
    18ee:	ff 96       	adiw	r30, 0x3f	; 63
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e af       	std	Y+62, r25	; 0x3e
    1902:	8d af       	std	Y+61, r24	; 0x3d
    1904:	8d ad       	ldd	r24, Y+61	; 0x3d
    1906:	9e ad       	ldd	r25, Y+62	; 0x3e
    1908:	9a af       	std	Y+58, r25	; 0x3a
    190a:	89 af       	std	Y+57, r24	; 0x39
    190c:	89 ad       	ldd	r24, Y+57	; 0x39
    190e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <HLCD_voidSendCommand+0x19c>
    1914:	9a af       	std	Y+58, r25	; 0x3a
    1916:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e8       	ldi	r26, 0x80	; 128
    1928:	bf e3       	ldi	r27, 0x3F	; 63
    192a:	8d ab       	std	Y+53, r24	; 0x35
    192c:	9e ab       	std	Y+54, r25	; 0x36
    192e:	af ab       	std	Y+55, r26	; 0x37
    1930:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	6d a9       	ldd	r22, Y+53	; 0x35
    1934:	7e a9       	ldd	r23, Y+54	; 0x36
    1936:	8f a9       	ldd	r24, Y+55	; 0x37
    1938:	98 ad       	ldd	r25, Y+56	; 0x38
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e8       	ldi	r19, 0x80	; 128
    193e:	4b e3       	ldi	r20, 0x3B	; 59
    1940:	55 e4       	ldi	r21, 0x45	; 69
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	89 ab       	std	Y+49, r24	; 0x31
    194c:	9a ab       	std	Y+50, r25	; 0x32
    194e:	ab ab       	std	Y+51, r26	; 0x33
    1950:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1952:	69 a9       	ldd	r22, Y+49	; 0x31
    1954:	7a a9       	ldd	r23, Y+50	; 0x32
    1956:	8b a9       	ldd	r24, Y+51	; 0x33
    1958:	9c a9       	ldd	r25, Y+52	; 0x34
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <HLCD_voidSendCommand+0x200>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	98 ab       	std	Y+48, r25	; 0x30
    1970:	8f a7       	std	Y+47, r24	; 0x2f
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <HLCD_voidSendCommand+0x27e>
	else if (__tmp > 65535)
    1974:	69 a9       	ldd	r22, Y+49	; 0x31
    1976:	7a a9       	ldd	r23, Y+50	; 0x32
    1978:	8b a9       	ldd	r24, Y+51	; 0x33
    197a:	9c a9       	ldd	r25, Y+52	; 0x34
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	98 ab       	std	Y+48, r25	; 0x30
    19b2:	8f a7       	std	Y+47, r24	; 0x2f
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <HLCD_voidSendCommand+0x260>
    19b6:	8c e2       	ldi	r24, 0x2C	; 44
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	9e a7       	std	Y+46, r25	; 0x2e
    19bc:	8d a7       	std	Y+45, r24	; 0x2d
    19be:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <HLCD_voidSendCommand+0x24e>
    19c6:	9e a7       	std	Y+46, r25	; 0x2e
    19c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    19cc:	98 a9       	ldd	r25, Y+48	; 0x30
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	98 ab       	std	Y+48, r25	; 0x30
    19d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d6:	98 a9       	ldd	r25, Y+48	; 0x30
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <HLCD_voidSendCommand+0x242>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <HLCD_voidSendCommand+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	69 a9       	ldd	r22, Y+49	; 0x31
    19e0:	7a a9       	ldd	r23, Y+50	; 0x32
    19e2:	8b a9       	ldd	r24, Y+51	; 0x33
    19e4:	9c a9       	ldd	r25, Y+52	; 0x34
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	98 ab       	std	Y+48, r25	; 0x30
    19f0:	8f a7       	std	Y+47, r24	; 0x2f
    19f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f4:	98 a9       	ldd	r25, Y+48	; 0x30
    19f6:	9c a7       	std	Y+44, r25	; 0x2c
    19f8:	8b a7       	std	Y+43, r24	; 0x2b
    19fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    19fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <HLCD_voidSendCommand+0x28a>
    1a02:	9c a7       	std	Y+44, r25	; 0x2c
    1a04:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	62 e0       	ldi	r22, 0x02	; 2
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e8       	ldi	r26, 0x80	; 128
    1a16:	bf e3       	ldi	r27, 0x3F	; 63
    1a18:	8f a3       	std	Y+39, r24	; 0x27
    1a1a:	98 a7       	std	Y+40, r25	; 0x28
    1a1c:	a9 a7       	std	Y+41, r26	; 0x29
    1a1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6f a1       	ldd	r22, Y+39	; 0x27
    1a22:	78 a5       	ldd	r23, Y+40	; 0x28
    1a24:	89 a5       	ldd	r24, Y+41	; 0x29
    1a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e8       	ldi	r19, 0x80	; 128
    1a2c:	4b e3       	ldi	r20, 0x3B	; 59
    1a2e:	55 e4       	ldi	r21, 0x45	; 69
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8b a3       	std	Y+35, r24	; 0x23
    1a3a:	9c a3       	std	Y+36, r25	; 0x24
    1a3c:	ad a3       	std	Y+37, r26	; 0x25
    1a3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a40:	6b a1       	ldd	r22, Y+35	; 0x23
    1a42:	7c a1       	ldd	r23, Y+36	; 0x24
    1a44:	8d a1       	ldd	r24, Y+37	; 0x25
    1a46:	9e a1       	ldd	r25, Y+38	; 0x26
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <HLCD_voidSendCommand+0x2ee>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <HLCD_voidSendCommand+0x36c>
	else if (__tmp > 65535)
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <HLCD_voidSendCommand+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <HLCD_voidSendCommand+0x34e>
    1aa4:	8c e2       	ldi	r24, 0x2C	; 44
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	98 a3       	std	Y+32, r25	; 0x20
    1aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    1aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aae:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <HLCD_voidSendCommand+0x33c>
    1ab4:	98 a3       	std	Y+32, r25	; 0x20
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <HLCD_voidSendCommand+0x330>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <HLCD_voidSendCommand+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ace:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <HLCD_voidSendCommand+0x378>
    1af0:	9e 8f       	std	Y+30, r25	; 0x1e
    1af2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);


		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Command,0));
    1af4:	fe 01       	movw	r30, r28
    1af6:	e9 5b       	subi	r30, 0xB9	; 185
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	98 2f       	mov	r25, r24
    1afe:	91 70       	andi	r25, 0x01	; 1
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	49 2f       	mov	r20, r25
    1b06:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Command,1));
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e9 5b       	subi	r30, 0xB9	; 185
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 81       	ld	r24, Z
    1b12:	86 95       	lsr	r24
    1b14:	98 2f       	mov	r25, r24
    1b16:	91 70       	andi	r25, 0x01	; 1
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	49 2f       	mov	r20, r25
    1b1e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Command,2));
    1b22:	fe 01       	movw	r30, r28
    1b24:	e9 5b       	subi	r30, 0xB9	; 185
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 81       	ld	r24, Z
    1b2a:	86 95       	lsr	r24
    1b2c:	86 95       	lsr	r24
    1b2e:	98 2f       	mov	r25, r24
    1b30:	91 70       	andi	r25, 0x01	; 1
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	62 e0       	ldi	r22, 0x02	; 2
    1b36:	49 2f       	mov	r20, r25
    1b38:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Command,3));
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e9 5b       	subi	r30, 0xB9	; 185
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	86 95       	lsr	r24
    1b46:	86 95       	lsr	r24
    1b48:	86 95       	lsr	r24
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	91 70       	andi	r25, 0x01	; 1
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	64 e0       	ldi	r22, 0x04	; 4
    1b52:	49 2f       	mov	r20, r25
    1b54:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>


		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	62 e0       	ldi	r22, 0x02	; 2
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e8       	ldi	r26, 0x80	; 128
    1b68:	bf e3       	ldi	r27, 0x3F	; 63
    1b6a:	89 8f       	std	Y+25, r24	; 0x19
    1b6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	69 8d       	ldd	r22, Y+25	; 0x19
    1b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e8       	ldi	r19, 0x80	; 128
    1b7e:	4b e3       	ldi	r20, 0x3B	; 59
    1b80:	55 e4       	ldi	r21, 0x45	; 69
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	8d 8b       	std	Y+21, r24	; 0x15
    1b8c:	9e 8b       	std	Y+22, r25	; 0x16
    1b8e:	af 8b       	std	Y+23, r26	; 0x17
    1b90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b92:	6d 89       	ldd	r22, Y+21	; 0x15
    1b94:	7e 89       	ldd	r23, Y+22	; 0x16
    1b96:	8f 89       	ldd	r24, Y+23	; 0x17
    1b98:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <HLCD_voidSendCommand+0x440>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <HLCD_voidSendCommand+0x4be>
	else if (__tmp > 65535)
    1bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bba:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <HLCD_voidSendCommand+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <HLCD_voidSendCommand+0x4a0>
    1bf6:	8c e2       	ldi	r24, 0x2C	; 44
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	9a 8b       	std	Y+18, r25	; 0x12
    1bfc:	89 8b       	std	Y+17, r24	; 0x11
    1bfe:	89 89       	ldd	r24, Y+17	; 0x11
    1c00:	9a 89       	ldd	r25, Y+18	; 0x12
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <HLCD_voidSendCommand+0x48e>
    1c06:	9a 8b       	std	Y+18, r25	; 0x12
    1c08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	9c 8b       	std	Y+20, r25	; 0x14
    1c12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	8b 89       	ldd	r24, Y+19	; 0x13
    1c16:	9c 89       	ldd	r25, Y+20	; 0x14
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <HLCD_voidSendCommand+0x482>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <HLCD_voidSendCommand+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c20:	7e 89       	ldd	r23, Y+22	; 0x16
    1c22:	8f 89       	ldd	r24, Y+23	; 0x17
    1c24:	98 8d       	ldd	r25, Y+24	; 0x18
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	8b 89       	ldd	r24, Y+19	; 0x13
    1c34:	9c 89       	ldd	r25, Y+20	; 0x14
    1c36:	98 8b       	std	Y+16, r25	; 0x10
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
    1c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3c:	98 89       	ldd	r25, Y+16	; 0x10
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <HLCD_voidSendCommand+0x4ca>
    1c42:	98 8b       	std	Y+16, r25	; 0x10
    1c44:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e8       	ldi	r26, 0x80	; 128
    1c56:	bf e3       	ldi	r27, 0x3F	; 63
    1c58:	8b 87       	std	Y+11, r24	; 0x0b
    1c5a:	9c 87       	std	Y+12, r25	; 0x0c
    1c5c:	ad 87       	std	Y+13, r26	; 0x0d
    1c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e8       	ldi	r19, 0x80	; 128
    1c6c:	4b e3       	ldi	r20, 0x3B	; 59
    1c6e:	55 e4       	ldi	r21, 0x45	; 69
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8f 83       	std	Y+7, r24	; 0x07
    1c7a:	98 87       	std	Y+8, r25	; 0x08
    1c7c:	a9 87       	std	Y+9, r26	; 0x09
    1c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <HLCD_voidSendCommand+0x52e>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <HLCD_voidSendCommand+0x5ac>
	else if (__tmp > 65535)
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <HLCD_voidSendCommand+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <HLCD_voidSendCommand+0x58e>
    1ce4:	8c e2       	ldi	r24, 0x2C	; 44
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <HLCD_voidSendCommand+0x57c>
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <HLCD_voidSendCommand+0x570>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <HLCD_voidSendCommand+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <HLCD_voidSendCommand+0x5b8>
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);


}
    1d34:	c9 5b       	subi	r28, 0xB9	; 185
    1d36:	df 4f       	sbci	r29, 0xFF	; 255
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data){
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	c7 54       	subi	r28, 0x47	; 71
    1d5a:	d0 40       	sbci	r29, 0x00	; 0
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	fe 01       	movw	r30, r28
    1d68:	e9 5b       	subi	r30, 0xB9	; 185
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24

		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Data,4));
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e9 5b       	subi	r30, 0xB9	; 185
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	82 95       	swap	r24
    1d78:	8f 70       	andi	r24, 0x0F	; 15
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	91 70       	andi	r25, 0x01	; 1
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	49 2f       	mov	r20, r25
    1d84:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Data,5));
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e9 5b       	subi	r30, 0xB9	; 185
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	82 95       	swap	r24
    1d92:	86 95       	lsr	r24
    1d94:	87 70       	andi	r24, 0x07	; 7
    1d96:	98 2f       	mov	r25, r24
    1d98:	91 70       	andi	r25, 0x01	; 1
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	49 2f       	mov	r20, r25
    1da0:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Data,6));
    1da4:	fe 01       	movw	r30, r28
    1da6:	e9 5b       	subi	r30, 0xB9	; 185
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	82 95       	swap	r24
    1dae:	86 95       	lsr	r24
    1db0:	86 95       	lsr	r24
    1db2:	83 70       	andi	r24, 0x03	; 3
    1db4:	98 2f       	mov	r25, r24
    1db6:	91 70       	andi	r25, 0x01	; 1
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	62 e0       	ldi	r22, 0x02	; 2
    1dbc:	49 2f       	mov	r20, r25
    1dbe:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Data,7));
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e9 5b       	subi	r30, 0xB9	; 185
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	98 2f       	mov	r25, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	99 27       	eor	r25, r25
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	64 e0       	ldi	r22, 0x04	; 4
    1dd6:	49 2f       	mov	r20, r25
    1dd8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_HIGH);
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	63 e0       	ldi	r22, 0x03	; 3
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 5b       	subi	r30, 0xBD	; 189
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e8       	ldi	r26, 0x80	; 128
    1df2:	bf e3       	ldi	r27, 0x3F	; 63
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	01 5c       	subi	r16, 0xC1	; 193
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	ed 5b       	subi	r30, 0xBD	; 189
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e8       	ldi	r19, 0x80	; 128
    1e14:	4b e3       	ldi	r20, 0x3B	; 59
    1e16:	55 e4       	ldi	r21, 0x45	; 69
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	a2 83       	std	Z+2, r26	; 0x02
    1e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ff 96       	adiw	r30, 0x3f	; 63
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	5f e3       	ldi	r21, 0x3F	; 63
    1e3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e42:	88 23       	and	r24, r24
    1e44:	2c f4       	brge	.+10     	; 0x1e50 <HLCD_voidSendData+0x104>
		__ticks = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9e af       	std	Y+62, r25	; 0x3e
    1e4c:	8d af       	std	Y+61, r24	; 0x3d
    1e4e:	46 c0       	rjmp	.+140    	; 0x1edc <HLCD_voidSendData+0x190>
	else if (__tmp > 65535)
    1e50:	fe 01       	movw	r30, r28
    1e52:	ff 96       	adiw	r30, 0x3f	; 63
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	93 81       	ldd	r25, Z+3	; 0x03
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	64 f5       	brge	.+88     	; 0x1ec4 <HLCD_voidSendData+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ed 5b       	subi	r30, 0xBD	; 189
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	82 81       	ldd	r24, Z+2	; 0x02
    1e78:	93 81       	ldd	r25, Z+3	; 0x03
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e2       	ldi	r20, 0x20	; 32
    1e80:	51 e4       	ldi	r21, 0x41	; 65
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	9e af       	std	Y+62, r25	; 0x3e
    1e98:	8d af       	std	Y+61, r24	; 0x3d
    1e9a:	0f c0       	rjmp	.+30     	; 0x1eba <HLCD_voidSendData+0x16e>
    1e9c:	8c e2       	ldi	r24, 0x2C	; 44
    1e9e:	91 e0       	ldi	r25, 0x01	; 1
    1ea0:	9c af       	std	Y+60, r25	; 0x3c
    1ea2:	8b af       	std	Y+59, r24	; 0x3b
    1ea4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ea6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <HLCD_voidSendData+0x15c>
    1eac:	9c af       	std	Y+60, r25	; 0x3c
    1eae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	9e af       	std	Y+62, r25	; 0x3e
    1eb8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	69 f7       	brne	.-38     	; 0x1e9c <HLCD_voidSendData+0x150>
    1ec2:	16 c0       	rjmp	.+44     	; 0x1ef0 <HLCD_voidSendData+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ff 96       	adiw	r30, 0x3f	; 63
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e af       	std	Y+62, r25	; 0x3e
    1eda:	8d af       	std	Y+61, r24	; 0x3d
    1edc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ede:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ee0:	9a af       	std	Y+58, r25	; 0x3a
    1ee2:	89 af       	std	Y+57, r24	; 0x39
    1ee4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ee6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <HLCD_voidSendData+0x19c>
    1eec:	9a af       	std	Y+58, r25	; 0x3a
    1eee:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e8       	ldi	r26, 0x80	; 128
    1f00:	bf e3       	ldi	r27, 0x3F	; 63
    1f02:	8d ab       	std	Y+53, r24	; 0x35
    1f04:	9e ab       	std	Y+54, r25	; 0x36
    1f06:	af ab       	std	Y+55, r26	; 0x37
    1f08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f0c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f0e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f10:	98 ad       	ldd	r25, Y+56	; 0x38
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e8       	ldi	r19, 0x80	; 128
    1f16:	4b e3       	ldi	r20, 0x3B	; 59
    1f18:	55 e4       	ldi	r21, 0x45	; 69
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	89 ab       	std	Y+49, r24	; 0x31
    1f24:	9a ab       	std	Y+50, r25	; 0x32
    1f26:	ab ab       	std	Y+51, r26	; 0x33
    1f28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f30:	9c a9       	ldd	r25, Y+52	; 0x34
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <HLCD_voidSendData+0x200>
		__ticks = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <HLCD_voidSendData+0x27e>
	else if (__tmp > 65535)
    1f4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f50:	8b a9       	ldd	r24, Y+51	; 0x33
    1f52:	9c a9       	ldd	r25, Y+52	; 0x34
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	4c f5       	brge	.+82     	; 0x1fb6 <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	6d a9       	ldd	r22, Y+53	; 0x35
    1f66:	7e a9       	ldd	r23, Y+54	; 0x36
    1f68:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	98 ab       	std	Y+48, r25	; 0x30
    1f8a:	8f a7       	std	Y+47, r24	; 0x2f
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <HLCD_voidSendData+0x260>
    1f8e:	8c e2       	ldi	r24, 0x2C	; 44
    1f90:	91 e0       	ldi	r25, 0x01	; 1
    1f92:	9e a7       	std	Y+46, r25	; 0x2e
    1f94:	8d a7       	std	Y+45, r24	; 0x2d
    1f96:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f98:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <HLCD_voidSendData+0x24e>
    1f9e:	9e a7       	std	Y+46, r25	; 0x2e
    1fa0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fae:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <HLCD_voidSendData+0x242>
    1fb4:	14 c0       	rjmp	.+40     	; 0x1fde <HLCD_voidSendData+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fba:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	98 ab       	std	Y+48, r25	; 0x30
    1fc8:	8f a7       	std	Y+47, r24	; 0x2f
    1fca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fcc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fce:	9c a7       	std	Y+44, r25	; 0x2c
    1fd0:	8b a7       	std	Y+43, r24	; 0x2b
    1fd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <HLCD_voidSendData+0x28a>
    1fda:	9c a7       	std	Y+44, r25	; 0x2c
    1fdc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	62 e0       	ldi	r22, 0x02	; 2
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a0 e8       	ldi	r26, 0x80	; 128
    1fee:	bf e3       	ldi	r27, 0x3F	; 63
    1ff0:	8f a3       	std	Y+39, r24	; 0x27
    1ff2:	98 a7       	std	Y+40, r25	; 0x28
    1ff4:	a9 a7       	std	Y+41, r26	; 0x29
    1ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffa:	78 a5       	ldd	r23, Y+40	; 0x28
    1ffc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e8       	ldi	r19, 0x80	; 128
    2004:	4b e3       	ldi	r20, 0x3B	; 59
    2006:	55 e4       	ldi	r21, 0x45	; 69
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8b a3       	std	Y+35, r24	; 0x23
    2012:	9c a3       	std	Y+36, r25	; 0x24
    2014:	ad a3       	std	Y+37, r26	; 0x25
    2016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2018:	6b a1       	ldd	r22, Y+35	; 0x23
    201a:	7c a1       	ldd	r23, Y+36	; 0x24
    201c:	8d a1       	ldd	r24, Y+37	; 0x25
    201e:	9e a1       	ldd	r25, Y+38	; 0x26
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <HLCD_voidSendData+0x2ee>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <HLCD_voidSendData+0x36c>
	else if (__tmp > 65535)
    203a:	6b a1       	ldd	r22, Y+35	; 0x23
    203c:	7c a1       	ldd	r23, Y+36	; 0x24
    203e:	8d a1       	ldd	r24, Y+37	; 0x25
    2040:	9e a1       	ldd	r25, Y+38	; 0x26
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <HLCD_voidSendData+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	6f a1       	ldd	r22, Y+39	; 0x27
    2054:	78 a5       	ldd	r23, Y+40	; 0x28
    2056:	89 a5       	ldd	r24, Y+41	; 0x29
    2058:	9a a5       	ldd	r25, Y+42	; 0x2a
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	0f c0       	rjmp	.+30     	; 0x209a <HLCD_voidSendData+0x34e>
    207c:	8c e2       	ldi	r24, 0x2C	; 44
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	98 a3       	std	Y+32, r25	; 0x20
    2082:	8f 8f       	std	Y+31, r24	; 0x1f
    2084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2086:	98 a1       	ldd	r25, Y+32	; 0x20
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <HLCD_voidSendData+0x33c>
    208c:	98 a3       	std	Y+32, r25	; 0x20
    208e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	89 a1       	ldd	r24, Y+33	; 0x21
    2092:	9a a1       	ldd	r25, Y+34	; 0x22
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	89 a1       	ldd	r24, Y+33	; 0x21
    209c:	9a a1       	ldd	r25, Y+34	; 0x22
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <HLCD_voidSendData+0x330>
    20a2:	14 c0       	rjmp	.+40     	; 0x20cc <HLCD_voidSendData+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9a a3       	std	Y+34, r25	; 0x22
    20b6:	89 a3       	std	Y+33, r24	; 0x21
    20b8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ba:	9a a1       	ldd	r25, Y+34	; 0x22
    20bc:	9e 8f       	std	Y+30, r25	; 0x1e
    20be:	8d 8f       	std	Y+29, r24	; 0x1d
    20c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <HLCD_voidSendData+0x378>
    20c8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ca:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);


		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Data,0));
    20cc:	fe 01       	movw	r30, r28
    20ce:	e9 5b       	subi	r30, 0xB9	; 185
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	98 2f       	mov	r25, r24
    20d6:	91 70       	andi	r25, 0x01	; 1
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	49 2f       	mov	r20, r25
    20de:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Data,1));
    20e2:	fe 01       	movw	r30, r28
    20e4:	e9 5b       	subi	r30, 0xB9	; 185
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	86 95       	lsr	r24
    20ec:	98 2f       	mov	r25, r24
    20ee:	91 70       	andi	r25, 0x01	; 1
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	49 2f       	mov	r20, r25
    20f6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Data,2));
    20fa:	fe 01       	movw	r30, r28
    20fc:	e9 5b       	subi	r30, 0xB9	; 185
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	86 95       	lsr	r24
    2104:	86 95       	lsr	r24
    2106:	98 2f       	mov	r25, r24
    2108:	91 70       	andi	r25, 0x01	; 1
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	62 e0       	ldi	r22, 0x02	; 2
    210e:	49 2f       	mov	r20, r25
    2110:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Data,3));
    2114:	fe 01       	movw	r30, r28
    2116:	e9 5b       	subi	r30, 0xB9	; 185
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	86 95       	lsr	r24
    211e:	86 95       	lsr	r24
    2120:	86 95       	lsr	r24
    2122:	98 2f       	mov	r25, r24
    2124:	91 70       	andi	r25, 0x01	; 1
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	64 e0       	ldi	r22, 0x04	; 4
    212a:	49 2f       	mov	r20, r25
    212c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>


		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	62 e0       	ldi	r22, 0x02	; 2
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e8       	ldi	r26, 0x80	; 128
    2140:	bf e3       	ldi	r27, 0x3F	; 63
    2142:	89 8f       	std	Y+25, r24	; 0x19
    2144:	9a 8f       	std	Y+26, r25	; 0x1a
    2146:	ab 8f       	std	Y+27, r26	; 0x1b
    2148:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	69 8d       	ldd	r22, Y+25	; 0x19
    214c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e8       	ldi	r19, 0x80	; 128
    2156:	4b e3       	ldi	r20, 0x3B	; 59
    2158:	55 e4       	ldi	r21, 0x45	; 69
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8d 8b       	std	Y+21, r24	; 0x15
    2164:	9e 8b       	std	Y+22, r25	; 0x16
    2166:	af 8b       	std	Y+23, r26	; 0x17
    2168:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <HLCD_voidSendData+0x440>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	3f c0       	rjmp	.+126    	; 0x220a <HLCD_voidSendData+0x4be>
	else if (__tmp > 65535)
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <HLCD_voidSendData+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	69 8d       	ldd	r22, Y+25	; 0x19
    21a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <HLCD_voidSendData+0x4a0>
    21ce:	8c e2       	ldi	r24, 0x2C	; 44
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	9a 89       	ldd	r25, Y+18	; 0x12
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <HLCD_voidSendData+0x48e>
    21de:	9a 8b       	std	Y+18, r25	; 0x12
    21e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <HLCD_voidSendData+0x482>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <HLCD_voidSendData+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6d 89       	ldd	r22, Y+21	; 0x15
    21f8:	7e 89       	ldd	r23, Y+22	; 0x16
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	98 8d       	ldd	r25, Y+24	; 0x18
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
    220a:	8b 89       	ldd	r24, Y+19	; 0x13
    220c:	9c 89       	ldd	r25, Y+20	; 0x14
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
    2212:	8f 85       	ldd	r24, Y+15	; 0x0f
    2214:	98 89       	ldd	r25, Y+16	; 0x10
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <HLCD_voidSendData+0x4ca>
    221a:	98 8b       	std	Y+16, r25	; 0x10
    221c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e8       	ldi	r26, 0x80	; 128
    222e:	bf e3       	ldi	r27, 0x3F	; 63
    2230:	8b 87       	std	Y+11, r24	; 0x0b
    2232:	9c 87       	std	Y+12, r25	; 0x0c
    2234:	ad 87       	std	Y+13, r26	; 0x0d
    2236:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6b 85       	ldd	r22, Y+11	; 0x0b
    223a:	7c 85       	ldd	r23, Y+12	; 0x0c
    223c:	8d 85       	ldd	r24, Y+13	; 0x0d
    223e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e8       	ldi	r19, 0x80	; 128
    2244:	4b e3       	ldi	r20, 0x3B	; 59
    2246:	55 e4       	ldi	r21, 0x45	; 69
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8f 83       	std	Y+7, r24	; 0x07
    2252:	98 87       	std	Y+8, r25	; 0x08
    2254:	a9 87       	std	Y+9, r26	; 0x09
    2256:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <HLCD_voidSendData+0x52e>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <HLCD_voidSendData+0x5ac>
	else if (__tmp > 65535)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <HLCD_voidSendData+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <HLCD_voidSendData+0x58e>
    22bc:	8c e2       	ldi	r24, 0x2C	; 44
    22be:	91 e0       	ldi	r25, 0x01	; 1
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <HLCD_voidSendData+0x57c>
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <HLCD_voidSendData+0x570>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <HLCD_voidSendData+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	9e 81       	ldd	r25, Y+6	; 0x06
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <HLCD_voidSendData+0x5b8>
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);


}
    230c:	c9 5b       	subi	r28, 0xB9	; 185
    230e:	df 4f       	sbci	r29, 0xFF	; 255
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	08 95       	ret

00002324 <HLCD_voidInit>:

void HLCD_voidInit(void){
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	2e 97       	sbiw	r28, 0x0e	; 14
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 ea       	ldi	r26, 0xA0	; 160
    233e:	b1 e4       	ldi	r27, 0x41	; 65
    2340:	8b 87       	std	Y+11, r24	; 0x0b
    2342:	9c 87       	std	Y+12, r25	; 0x0c
    2344:	ad 87       	std	Y+13, r26	; 0x0d
    2346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e8       	ldi	r19, 0x80	; 128
    2354:	4b e3       	ldi	r20, 0x3B	; 59
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8f 83       	std	Y+7, r24	; 0x07
    2362:	98 87       	std	Y+8, r25	; 0x08
    2364:	a9 87       	std	Y+9, r26	; 0x09
    2366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <HLCD_voidInit+0x66>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <HLCD_voidInit+0xc6>
    23cc:	8c e2       	ldi	r24, 0x2C	; 44
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <HLCD_voidInit+0xb4>
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <HLCD_voidInit+0xa8>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <HLCD_voidInit+0xf0>
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	HLCD_voidSendCommand(0x33);
    241c:	83 e3       	ldi	r24, 0x33	; 51
    241e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);
    2422:	82 e3       	ldi	r24, 0x32	; 50
    2424:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(FUNCTION_SET_4BITMODE_4LINE_5X7DOT);
    2428:	88 e2       	ldi	r24, 0x28	; 40
    242a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF);
    242e:	8e e0       	ldi	r24, 0x0E	; 14
    2430:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
    HLCD_voidSendCommand(DISPLAY_CLEAR);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    243a:	86 e0       	ldi	r24, 0x06	; 6
    243c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
}
    2440:	2e 96       	adiw	r28, 0x0e	; 14
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <HLCD_voidSendNumber>:

void HLCD_voidSendNumber(u32 A_u32Number){
    2452:	ef 92       	push	r14
    2454:	ff 92       	push	r15
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	28 97       	sbiw	r28, 0x08	; 8
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	6d 83       	std	Y+5, r22	; 0x05
    2470:	7e 83       	std	Y+6, r23	; 0x06
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	98 87       	std	Y+8, r25	; 0x08
	 u32 local_u32Number = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a0 e0       	ldi	r26, 0x00	; 0
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	ab 83       	std	Y+3, r26	; 0x03
    2484:	bc 83       	std	Y+4, r27	; 0x04
	    if (A_u32Number == 0)
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	af 81       	ldd	r26, Y+7	; 0x07
    248c:	b8 85       	ldd	r27, Y+8	; 0x08
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	a1 05       	cpc	r26, r1
    2492:	b1 05       	cpc	r27, r1
    2494:	d1 f5       	brne	.+116    	; 0x250a <HLCD_voidSendNumber+0xb8>
	    {
	        HLCD_voidSendData('0');
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HLCD_voidSendData>
    249c:	36 c0       	rjmp	.+108    	; 0x250a <HLCD_voidSendNumber+0xb8>
	    }
	    while (A_u32Number != 0)
	    {
	        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	ab 81       	ldd	r26, Y+3	; 0x03
    24a4:	bc 81       	ldd	r27, Y+4	; 0x04
    24a6:	2a e0       	ldi	r18, 0x0A	; 10
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 aa 14 	call	0x2954	; 0x2954 <__mulsi3>
    24b6:	7b 01       	movw	r14, r22
    24b8:	8c 01       	movw	r16, r24
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	af 81       	ldd	r26, Y+7	; 0x07
    24c0:	b8 85       	ldd	r27, Y+8	; 0x08
    24c2:	2a e0       	ldi	r18, 0x0A	; 10
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodsi4>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	8e 0d       	add	r24, r14
    24d8:	9f 1d       	adc	r25, r15
    24da:	a0 1f       	adc	r26, r16
    24dc:	b1 1f       	adc	r27, r17
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	ab 83       	std	Y+3, r26	; 0x03
    24e4:	bc 83       	std	Y+4, r27	; 0x04
	        A_u32Number = A_u32Number / 10;
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	af 81       	ldd	r26, Y+7	; 0x07
    24ec:	b8 85       	ldd	r27, Y+8	; 0x08
    24ee:	2a e0       	ldi	r18, 0x0A	; 10
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodsi4>
    24fe:	da 01       	movw	r26, r20
    2500:	c9 01       	movw	r24, r18
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	af 83       	std	Y+7, r26	; 0x07
    2508:	b8 87       	std	Y+8, r27	; 0x08
	 u32 local_u32Number = 1;
	    if (A_u32Number == 0)
	    {
	        HLCD_voidSendData('0');
	    }
	    while (A_u32Number != 0)
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	af 81       	ldd	r26, Y+7	; 0x07
    2510:	b8 85       	ldd	r27, Y+8	; 0x08
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	a1 05       	cpc	r26, r1
    2516:	b1 05       	cpc	r27, r1
    2518:	11 f6       	brne	.-124    	; 0x249e <HLCD_voidSendNumber+0x4c>
    251a:	23 c0       	rjmp	.+70     	; 0x2562 <HLCD_voidSendNumber+0x110>
	        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
	        A_u32Number = A_u32Number / 10;
	    }
	    while (local_u32Number != 1)
	    {
	        HLCD_voidSendData((local_u32Number % 10) + 48);
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	ab 81       	ldd	r26, Y+3	; 0x03
    2522:	bc 81       	ldd	r27, Y+4	; 0x04
    2524:	2a e0       	ldi	r18, 0x0A	; 10
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodsi4>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	80 5d       	subi	r24, 0xD0	; 208
    253a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HLCD_voidSendData>
	        local_u32Number = local_u32Number / 10;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	ab 81       	ldd	r26, Y+3	; 0x03
    2544:	bc 81       	ldd	r27, Y+4	; 0x04
    2546:	2a e0       	ldi	r18, 0x0A	; 10
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodsi4>
    2556:	da 01       	movw	r26, r20
    2558:	c9 01       	movw	r24, r18
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	ab 83       	std	Y+3, r26	; 0x03
    2560:	bc 83       	std	Y+4, r27	; 0x04
	    while (A_u32Number != 0)
	    {
	        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
	        A_u32Number = A_u32Number / 10;
	    }
	    while (local_u32Number != 1)
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	9a 81       	ldd	r25, Y+2	; 0x02
    2566:	ab 81       	ldd	r26, Y+3	; 0x03
    2568:	bc 81       	ldd	r27, Y+4	; 0x04
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	91 05       	cpc	r25, r1
    256e:	a1 05       	cpc	r26, r1
    2570:	b1 05       	cpc	r27, r1
    2572:	a1 f6       	brne	.-88     	; 0x251c <HLCD_voidSendNumber+0xca>
	    {
	        HLCD_voidSendData((local_u32Number % 10) + 48);
	        local_u32Number = local_u32Number / 10;
	    }
}
    2574:	28 96       	adiw	r28, 0x08	; 8
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	08 95       	ret

0000258e <HLCD_voidGOTO>:

void HLCD_voidGOTO(u8 A_u8RowNo,u8 A_u8ColNo){
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <HLCD_voidGOTO+0x6>
    2594:	00 d0       	rcall	.+0      	; 0x2596 <HLCD_voidGOTO+0x8>
    2596:	0f 92       	push	r0
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_DDRAM=0;
    25a0:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8RowNo){
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	3d 83       	std	Y+5, r19	; 0x05
    25aa:	2c 83       	std	Y+4, r18	; 0x04
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	9d 81       	ldd	r25, Y+5	; 0x05
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	91 05       	cpc	r25, r1
    25b4:	c9 f0       	breq	.+50     	; 0x25e8 <HLCD_voidGOTO+0x5a>
    25b6:	2c 81       	ldd	r18, Y+4	; 0x04
    25b8:	3d 81       	ldd	r19, Y+5	; 0x05
    25ba:	22 30       	cpi	r18, 0x02	; 2
    25bc:	31 05       	cpc	r19, r1
    25be:	2c f4       	brge	.+10     	; 0x25ca <HLCD_voidGOTO+0x3c>
    25c0:	8c 81       	ldd	r24, Y+4	; 0x04
    25c2:	9d 81       	ldd	r25, Y+5	; 0x05
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <HLCD_voidGOTO+0x52>
    25c8:	1a c0       	rjmp	.+52     	; 0x25fe <HLCD_voidGOTO+0x70>
    25ca:	2c 81       	ldd	r18, Y+4	; 0x04
    25cc:	3d 81       	ldd	r19, Y+5	; 0x05
    25ce:	22 30       	cpi	r18, 0x02	; 2
    25d0:	31 05       	cpc	r19, r1
    25d2:	71 f0       	breq	.+28     	; 0x25f0 <HLCD_voidGOTO+0x62>
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	91 05       	cpc	r25, r1
    25dc:	69 f0       	breq	.+26     	; 0x25f8 <HLCD_voidGOTO+0x6a>
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <HLCD_voidGOTO+0x70>
	case ROW1:
		local_u8_DDRAM=0x80+A_u8ColNo;
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	80 58       	subi	r24, 0x80	; 128
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	0b c0       	rjmp	.+22     	; 0x25fe <HLCD_voidGOTO+0x70>
		break;
	case ROW2:
		local_u8_DDRAM=0xC0+A_u8ColNo;
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	80 54       	subi	r24, 0x40	; 64
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	07 c0       	rjmp	.+14     	; 0x25fe <HLCD_voidGOTO+0x70>
		break;
	case ROW3:
		local_u8_DDRAM=0x94+A_u8ColNo;
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	8c 56       	subi	r24, 0x6C	; 108
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	03 c0       	rjmp	.+6      	; 0x25fe <HLCD_voidGOTO+0x70>
		break;
	case ROW4:
		local_u8_DDRAM=0xD4+A_u8ColNo;
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	8c 52       	subi	r24, 0x2C	; 44
    25fc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	HLCD_voidSendCommand(local_u8_DDRAM|SET_DDRAM_ADDRESS);
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	80 68       	ori	r24, 0x80	; 128
    2602:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <HLCD_voidSendString>:
void HLCD_voidSendString(char *str){
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	00 d0       	rcall	.+0      	; 0x261c <HLCD_voidSendString+0x6>
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	9b 83       	std	Y+3, r25	; 0x03
    2624:	8a 83       	std	Y+2, r24	; 0x02
for(u8 i =0;str[i]!='\0';i++){
    2626:	19 82       	std	Y+1, r1	; 0x01
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <HLCD_voidSendString+0x30>
	HLCD_voidSendData(str[i]);
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HLCD_voidSendData>
		break;
	}
	HLCD_voidSendCommand(local_u8_DDRAM|SET_DDRAM_ADDRESS);
}
void HLCD_voidSendString(char *str){
for(u8 i =0;str[i]!='\0';i++){
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	80 81       	ld	r24, Z
    2658:	88 23       	and	r24, r24
    265a:	39 f7       	brne	.-50     	; 0x262a <HLCD_voidSendString+0x14>
	HLCD_voidSendData(str[i]);
}
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <HKEYPAD_u8GetPressedKeyMatrixMode>:

u8 KEYPAD_Au8RowsPins[ROWS_NUMBER] = ROW_PINS;
u8 KEYPAD_Au8ColsPins[COLS_NUMBER] = COL_PINS;
u8 KEYPAD_Au8Keys[ROWS_NUMBER][COLS_NUMBER] = KEYPAD_KEYS;

u8 HKEYPAD_u8GetPressedKeyMatrixMode(void){
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	63 97       	sbiw	r28, 0x13	; 19
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61


	 u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEY_NOT_PRESSED, local_u8Flag = FLAG_DOWN;
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	88 8b       	std	Y+16, r24	; 0x10
    2680:	1f 86       	std	Y+15, r1	; 0x0f

	    for (local_u8RowCounter = LOOP_START; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    2682:	1b 8a       	std	Y+19, r1	; 0x13
    2684:	da c0       	rjmp	.+436    	; 0x283a <HKEYPAD_u8GetPressedKeyMatrixMode+0x1d2>
	    {

	        MDIO_voidSetPinValue(ROWS_PORT, KEYPAD_Au8RowsPins[local_u8RowCounter], PIN_LOW);
    2686:	8b 89       	ldd	r24, Y+19	; 0x13
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	fc 01       	movw	r30, r24
    268e:	e8 59       	subi	r30, 0x98	; 152
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	90 81       	ld	r25, Z
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	69 2f       	mov	r22, r25
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
	        for (local_u8ColCounter = LOOP_START; local_u8ColCounter < COLS_NUMBER; local_u8ColCounter++)
    269e:	1a 8a       	std	Y+18, r1	; 0x12
    26a0:	b6 c0       	rjmp	.+364    	; 0x280e <HKEYPAD_u8GetPressedKeyMatrixMode+0x1a6>
	        {
	            local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
    26a2:	8a 89       	ldd	r24, Y+18	; 0x12
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	fc 01       	movw	r30, r24
    26aa:	e4 59       	subi	r30, 0x94	; 148
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	90 81       	ld	r25, Z
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	69 2f       	mov	r22, r25
    26b4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MDIO_u8GetPinValue>
    26b8:	89 8b       	std	Y+17, r24	; 0x11
	            if (local_u8PinValue == PIN_LOW)
    26ba:	89 89       	ldd	r24, Y+17	; 0x11
    26bc:	88 23       	and	r24, r24
    26be:	09 f0       	breq	.+2      	; 0x26c2 <HKEYPAD_u8GetPressedKeyMatrixMode+0x5a>
    26c0:	a3 c0       	rjmp	.+326    	; 0x2808 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1a0>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a6 e1       	ldi	r26, 0x16	; 22
    26c8:	b3 e4       	ldi	r27, 0x43	; 67
    26ca:	8b 87       	std	Y+11, r24	; 0x0b
    26cc:	9c 87       	std	Y+12, r25	; 0x0c
    26ce:	ad 87       	std	Y+13, r26	; 0x0d
    26d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e8       	ldi	r19, 0x80	; 128
    26de:	4b e3       	ldi	r20, 0x3B	; 59
    26e0:	55 e4       	ldi	r21, 0x45	; 69
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8f 83       	std	Y+7, r24	; 0x07
    26ec:	98 87       	std	Y+8, r25	; 0x08
    26ee:	a9 87       	std	Y+9, r26	; 0x09
    26f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <HKEYPAD_u8GetPressedKeyMatrixMode+0xac>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <HKEYPAD_u8GetPressedKeyMatrixMode+0x12a>
	else if (__tmp > 65535)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2728:	18 16       	cp	r1, r24
    272a:	4c f5       	brge	.+82     	; 0x277e <HKEYPAD_u8GetPressedKeyMatrixMode+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	6b 85       	ldd	r22, Y+11	; 0x0b
    272e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2730:	8d 85       	ldd	r24, Y+13	; 0x0d
    2732:	9e 85       	ldd	r25, Y+14	; 0x0e
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <HKEYPAD_u8GetPressedKeyMatrixMode+0x10c>
    2756:	8c e2       	ldi	r24, 0x2C	; 44
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <HKEYPAD_u8GetPressedKeyMatrixMode+0xfa>
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	69 f7       	brne	.-38     	; 0x2756 <HKEYPAD_u8GetPressedKeyMatrixMode+0xee>
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <HKEYPAD_u8GetPressedKeyMatrixMode+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	6f 81       	ldd	r22, Y+7	; 0x07
    2780:	78 85       	ldd	r23, Y+8	; 0x08
    2782:	89 85       	ldd	r24, Y+9	; 0x09
    2784:	9a 85       	ldd	r25, Y+10	; 0x0a
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	9a 83       	std	Y+2, r25	; 0x02
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <HKEYPAD_u8GetPressedKeyMatrixMode+0x136>
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
	            {
	                _delay_ms(DEBOUNCING_DELAY);
	                local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
    27a6:	8a 89       	ldd	r24, Y+18	; 0x12
    27a8:	88 2f       	mov	r24, r24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	fc 01       	movw	r30, r24
    27ae:	e4 59       	subi	r30, 0x94	; 148
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	90 81       	ld	r25, Z
    27b4:	83 e0       	ldi	r24, 0x03	; 3
    27b6:	69 2f       	mov	r22, r25
    27b8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MDIO_u8GetPinValue>
    27bc:	89 8b       	std	Y+17, r24	; 0x11
    27be:	0c c0       	rjmp	.+24     	; 0x27d8 <HKEYPAD_u8GetPressedKeyMatrixMode+0x170>
	                while (local_u8PinValue == KEY_PRESSED)
	                {
	                    local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
    27c0:	8a 89       	ldd	r24, Y+18	; 0x12
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	fc 01       	movw	r30, r24
    27c8:	e4 59       	subi	r30, 0x94	; 148
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	90 81       	ld	r25, Z
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	69 2f       	mov	r22, r25
    27d2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MDIO_u8GetPinValue>
    27d6:	89 8b       	std	Y+17, r24	; 0x11
	            local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
	            if (local_u8PinValue == PIN_LOW)
	            {
	                _delay_ms(DEBOUNCING_DELAY);
	                local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
	                while (local_u8PinValue == KEY_PRESSED)
    27d8:	89 89       	ldd	r24, Y+17	; 0x11
    27da:	88 23       	and	r24, r24
    27dc:	89 f3       	breq	.-30     	; 0x27c0 <HKEYPAD_u8GetPressedKeyMatrixMode+0x158>
	                {
	                    local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
	                }
	                local_u8Flag = FLAG_UP;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
	                local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
    27e2:	8b 89       	ldd	r24, Y+19	; 0x13
    27e4:	48 2f       	mov	r20, r24
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	8a 89       	ldd	r24, Y+18	; 0x12
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	ca 01       	movw	r24, r20
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	82 0f       	add	r24, r18
    27fa:	93 1f       	adc	r25, r19
    27fc:	fc 01       	movw	r30, r24
    27fe:	e0 59       	subi	r30, 0x90	; 144
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	88 8b       	std	Y+16, r24	; 0x10
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1ae>

	    for (local_u8RowCounter = LOOP_START; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
	    {

	        MDIO_voidSetPinValue(ROWS_PORT, KEYPAD_Au8RowsPins[local_u8RowCounter], PIN_LOW);
	        for (local_u8ColCounter = LOOP_START; local_u8ColCounter < COLS_NUMBER; local_u8ColCounter++)
    2808:	8a 89       	ldd	r24, Y+18	; 0x12
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	8a 8b       	std	Y+18, r24	; 0x12
    280e:	8a 89       	ldd	r24, Y+18	; 0x12
    2810:	84 30       	cpi	r24, 0x04	; 4
    2812:	08 f4       	brcc	.+2      	; 0x2816 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1ae>
    2814:	46 cf       	rjmp	.-372    	; 0x26a2 <HKEYPAD_u8GetPressedKeyMatrixMode+0x3a>
	                local_u8Flag = FLAG_UP;
	                local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
	                break;
	            }
	        }
	        MDIO_voidSetPinValue(ROWS_PORT, KEYPAD_Au8RowsPins[local_u8RowCounter], PIN_HIGH);
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	fc 01       	movw	r30, r24
    281e:	e8 59       	subi	r30, 0x98	; 152
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	90 81       	ld	r25, Z
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	69 2f       	mov	r22, r25
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MDIO_voidSetPinValue>
	        if (local_u8Flag == FLAG_UP)
    282e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	39 f0       	breq	.+14     	; 0x2842 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1da>
u8 HKEYPAD_u8GetPressedKeyMatrixMode(void){


	 u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEY_NOT_PRESSED, local_u8Flag = FLAG_DOWN;

	    for (local_u8RowCounter = LOOP_START; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	84 30       	cpi	r24, 0x04	; 4
    283e:	08 f4       	brcc	.+2      	; 0x2842 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1da>
    2840:	22 cf       	rjmp	.-444    	; 0x2686 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1e>
	        if (local_u8Flag == FLAG_UP)
	        {
	            break;
	        }
	    }
	    return local_u8KeyValue;
    2842:	88 89       	ldd	r24, Y+16	; 0x10
}
    2844:	63 96       	adiw	r28, 0x13	; 19
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <HKEYPAD_u8GetPressedKeyDirectMode>:

u8 HKEYPAD_u8GetPressedKeyDirectMode(u8 A_u8ColPIN){
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <HKEYPAD_u8GetPressedKeyDirectMode+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02

	 u8  local_u8PinValue;
        local_u8PinValue=MDIO_u8GetPinValue(COLS_PORT,A_u8ColPIN);
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	6a 81       	ldd	r22, Y+2	; 0x02
    2866:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MDIO_u8GetPinValue>
    286a:	89 83       	std	Y+1, r24	; 0x01

   	    return local_u8PinValue;
    286c:	89 81       	ldd	r24, Y+1	; 0x01
}
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <main>:


void TOGGLENUMBER(void);
static u8	NUM=0;

void main (void){
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
    2880:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MDIO_voidInit>
//	MGI_voidEnable();


	MEXIT_voidConfig(EXIT1,FALLING_EDGE);
    2884:	87 e0       	ldi	r24, 0x07	; 7
    2886:	62 e0       	ldi	r22, 0x02	; 2
    2888:	0e 94 bf 05 	call	0xb7e	; 0xb7e <MEXIT_voidConfig>
	//MEXIT_voidCallBack(EXIT1,TOGGLENUMBER);
	MEXIT_voidEnable(EXIT1);
    288c:	87 e0       	ldi	r24, 0x07	; 7
    288e:	0e 94 2b 06 	call	0xc56	; 0xc56 <MEXIT_voidEnable>
	HLCD_voidInit();
    2892:	0e 94 92 11 	call	0x2324	; 0x2324 <HLCD_voidInit>
	HLCD_voidSendNumber(NUM);
    2896:	80 91 80 00 	lds	r24, 0x0080
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	a0 e0       	ldi	r26, 0x00	; 0
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidSendNumber>


	while(1){
		 if(MDIO_u8GetPinValue(PORTD,PIN5)==0){
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	65 e0       	ldi	r22, 0x05	; 5
    28ae:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MDIO_u8GetPinValue>
    28b2:	88 23       	and	r24, r24
    28b4:	c1 f4       	brne	.+48     	; 0x28e6 <main+0x6e>
				  HLCD_voidSendCommand(DISPLAY_CLEAR);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
				  while(MDIO_u8GetPinValue(PORTD,PIN5)==0);
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	65 e0       	ldi	r22, 0x05	; 5
    28c0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MDIO_u8GetPinValue>
    28c4:	88 23       	and	r24, r24
    28c6:	d1 f3       	breq	.-12     	; 0x28bc <main+0x44>
					NUM--;
    28c8:	80 91 80 00 	lds	r24, 0x0080
    28cc:	81 50       	subi	r24, 0x01	; 1
    28ce:	80 93 80 00 	sts	0x0080, r24
					HLCD_voidSendNumber(NUM);
    28d2:	80 91 80 00 	lds	r24, 0x0080
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidSendNumber>

		    }
		if(MEXIT_u8CheckFlag(EXIT1)==1)
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	0e 94 d6 06 	call	0xdac	; 0xdac <MEXIT_u8CheckFlag>
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	e9 f6       	brne	.-70     	; 0x28aa <main+0x32>
		{	HLCD_voidSendCommand(DISPLAY_CLEAR);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
		NUM++;
    28f6:	80 91 80 00 	lds	r24, 0x0080
    28fa:	8f 5f       	subi	r24, 0xFF	; 255
    28fc:	80 93 80 00 	sts	0x0080, r24
		HLCD_voidSendNumber(NUM);
    2900:	80 91 80 00 	lds	r24, 0x0080
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidSendNumber>
		MEXIT_voidCLearFlag(EXIT1);
    2914:	87 e0       	ldi	r24, 0x07	; 7
    2916:	0e 94 9d 06 	call	0xd3a	; 0xd3a <MEXIT_voidCLearFlag>
    291a:	c7 cf       	rjmp	.-114    	; 0x28aa <main+0x32>

0000291c <TOGGLENUMBER>:



}

void TOGGLENUMBER(void){
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62

	HLCD_voidSendCommand(DISPLAY_CLEAR);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	0e 94 ba 0b 	call	0x1774	; 0x1774 <HLCD_voidSendCommand>
	NUM++;
    292a:	80 91 80 00 	lds	r24, 0x0080
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 80 00 	sts	0x0080, r24
	HLCD_voidSendNumber(NUM);
    2934:	80 91 80 00 	lds	r24, 0x0080
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e0       	ldi	r26, 0x00	; 0
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 29 12 	call	0x2452	; 0x2452 <HLCD_voidSendNumber>
	MEXIT_voidCLearFlag(EXIT1);
    2948:	87 e0       	ldi	r24, 0x07	; 7
    294a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <MEXIT_voidCLearFlag>


}
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <__mulsi3>:
    2954:	62 9f       	mul	r22, r18
    2956:	d0 01       	movw	r26, r0
    2958:	73 9f       	mul	r23, r19
    295a:	f0 01       	movw	r30, r0
    295c:	82 9f       	mul	r24, r18
    295e:	e0 0d       	add	r30, r0
    2960:	f1 1d       	adc	r31, r1
    2962:	64 9f       	mul	r22, r20
    2964:	e0 0d       	add	r30, r0
    2966:	f1 1d       	adc	r31, r1
    2968:	92 9f       	mul	r25, r18
    296a:	f0 0d       	add	r31, r0
    296c:	83 9f       	mul	r24, r19
    296e:	f0 0d       	add	r31, r0
    2970:	74 9f       	mul	r23, r20
    2972:	f0 0d       	add	r31, r0
    2974:	65 9f       	mul	r22, r21
    2976:	f0 0d       	add	r31, r0
    2978:	99 27       	eor	r25, r25
    297a:	72 9f       	mul	r23, r18
    297c:	b0 0d       	add	r27, r0
    297e:	e1 1d       	adc	r30, r1
    2980:	f9 1f       	adc	r31, r25
    2982:	63 9f       	mul	r22, r19
    2984:	b0 0d       	add	r27, r0
    2986:	e1 1d       	adc	r30, r1
    2988:	f9 1f       	adc	r31, r25
    298a:	bd 01       	movw	r22, r26
    298c:	cf 01       	movw	r24, r30
    298e:	11 24       	eor	r1, r1
    2990:	08 95       	ret

00002992 <__udivmodsi4>:
    2992:	a1 e2       	ldi	r26, 0x21	; 33
    2994:	1a 2e       	mov	r1, r26
    2996:	aa 1b       	sub	r26, r26
    2998:	bb 1b       	sub	r27, r27
    299a:	fd 01       	movw	r30, r26
    299c:	0d c0       	rjmp	.+26     	; 0x29b8 <__udivmodsi4_ep>

0000299e <__udivmodsi4_loop>:
    299e:	aa 1f       	adc	r26, r26
    29a0:	bb 1f       	adc	r27, r27
    29a2:	ee 1f       	adc	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	a2 17       	cp	r26, r18
    29a8:	b3 07       	cpc	r27, r19
    29aa:	e4 07       	cpc	r30, r20
    29ac:	f5 07       	cpc	r31, r21
    29ae:	20 f0       	brcs	.+8      	; 0x29b8 <__udivmodsi4_ep>
    29b0:	a2 1b       	sub	r26, r18
    29b2:	b3 0b       	sbc	r27, r19
    29b4:	e4 0b       	sbc	r30, r20
    29b6:	f5 0b       	sbc	r31, r21

000029b8 <__udivmodsi4_ep>:
    29b8:	66 1f       	adc	r22, r22
    29ba:	77 1f       	adc	r23, r23
    29bc:	88 1f       	adc	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	1a 94       	dec	r1
    29c2:	69 f7       	brne	.-38     	; 0x299e <__udivmodsi4_loop>
    29c4:	60 95       	com	r22
    29c6:	70 95       	com	r23
    29c8:	80 95       	com	r24
    29ca:	90 95       	com	r25
    29cc:	9b 01       	movw	r18, r22
    29ce:	ac 01       	movw	r20, r24
    29d0:	bd 01       	movw	r22, r26
    29d2:	cf 01       	movw	r24, r30
    29d4:	08 95       	ret

000029d6 <__prologue_saves__>:
    29d6:	2f 92       	push	r2
    29d8:	3f 92       	push	r3
    29da:	4f 92       	push	r4
    29dc:	5f 92       	push	r5
    29de:	6f 92       	push	r6
    29e0:	7f 92       	push	r7
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	ca 1b       	sub	r28, r26
    2a00:	db 0b       	sbc	r29, r27
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	09 94       	ijmp

00002a0e <__epilogue_restores__>:
    2a0e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a10:	39 88       	ldd	r3, Y+17	; 0x11
    2a12:	48 88       	ldd	r4, Y+16	; 0x10
    2a14:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a16:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a18:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a20:	b9 84       	ldd	r11, Y+9	; 0x09
    2a22:	c8 84       	ldd	r12, Y+8	; 0x08
    2a24:	df 80       	ldd	r13, Y+7	; 0x07
    2a26:	ee 80       	ldd	r14, Y+6	; 0x06
    2a28:	fd 80       	ldd	r15, Y+5	; 0x05
    2a2a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a2c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a2e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a30:	b9 81       	ldd	r27, Y+1	; 0x01
    2a32:	ce 0f       	add	r28, r30
    2a34:	d1 1d       	adc	r29, r1
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	ed 01       	movw	r28, r26
    2a42:	08 95       	ret

00002a44 <_exit>:
    2a44:	f8 94       	cli

00002a46 <__stop_program>:
    2a46:	ff cf       	rjmp	.-2      	; 0x2a46 <__stop_program>
