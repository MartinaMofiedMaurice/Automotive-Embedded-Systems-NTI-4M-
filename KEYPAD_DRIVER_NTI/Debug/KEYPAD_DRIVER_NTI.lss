
KEYPAD_DRIVER_NTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002af8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00002af8  00002b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002124  00000000  00000000  00002bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d32  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000790b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000087f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000095a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a15f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <main>
      7a:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e8       	ldi	r26, 0x8D	; 141
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e8       	ldi	r24, 0x8D	; 141
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 53 15 	jmp	0x2aa6	; 0x2aa6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_voidInit>:
#include "DIO_configuration.h"
#include "DIO_private.h"


//Initializing ports
void MDIO_voidInit(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG= CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION,PORTA_PIN5_DIRECTION,
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	80 83       	st	Z, r24
			PORTA_PIN4_DIRECTION,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG= CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION,PORTB_PIN5_DIRECTION,
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	80 83       	st	Z, r24
				PORTB_PIN4_DIRECTION,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG= CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION,PORTC_PIN5_DIRECTION,
     b4e:	e4 e3       	ldi	r30, 0x34	; 52
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
				PORTC_PIN4_DIRECTION,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG= CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION,PORTD_PIN5_DIRECTION,
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e1       	ldi	r24, 0x17	; 23
     b5c:	80 83       	st	Z, r24
				PORTD_PIN4_DIRECTION,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	//To give a value for the port wether it was low or high for beginning
	PORTA_REG= CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,
     b5e:	eb e3       	ldi	r30, 0x3B	; 59
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
			PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG= CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,
     b64:	e8 e3       	ldi	r30, 0x38	; 56
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
			PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG= CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,
     b6a:	e5 e3       	ldi	r30, 0x35	; 53
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
			PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG= CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,
     b70:	e2 e3       	ldi	r30, 0x32	; 50
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	88 ee       	ldi	r24, 0xE8	; 232
     b76:	80 83       	st	Z, r24
				PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);

}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MDIO_voidSetPortDirection>:
//To Set PORT Value takes PORT NAME and PORT DIRECTION
//PORT ID:PORTA,BCD
//PIN ID:0/7

void MDIO_voidSetPortDirection(u8 A_u8PortId,u8 A_u8Direction)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <MDIO_voidSetPortDirection+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <MDIO_voidSetPortDirection+0x8>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId) {
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	3c 83       	std	Y+4, r19	; 0x04
     b96:	2b 83       	std	Y+3, r18	; 0x03
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	91 05       	cpc	r25, r1
     ba0:	d1 f0       	breq	.+52     	; 0xbd6 <MDIO_voidSetPortDirection+0x58>
     ba2:	2b 81       	ldd	r18, Y+3	; 0x03
     ba4:	3c 81       	ldd	r19, Y+4	; 0x04
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	2c f4       	brge	.+10     	; 0xbb6 <MDIO_voidSetPortDirection+0x38>
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	61 f0       	breq	.+24     	; 0xbcc <MDIO_voidSetPortDirection+0x4e>
     bb4:	1e c0       	rjmp	.+60     	; 0xbf2 <MDIO_voidSetPortDirection+0x74>
     bb6:	2b 81       	ldd	r18, Y+3	; 0x03
     bb8:	3c 81       	ldd	r19, Y+4	; 0x04
     bba:	22 30       	cpi	r18, 0x02	; 2
     bbc:	31 05       	cpc	r19, r1
     bbe:	81 f0       	breq	.+32     	; 0xbe0 <MDIO_voidSetPortDirection+0x62>
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	91 05       	cpc	r25, r1
     bc8:	81 f0       	breq	.+32     	; 0xbea <MDIO_voidSetPortDirection+0x6c>
     bca:	13 c0       	rjmp	.+38     	; 0xbf2 <MDIO_voidSetPortDirection+0x74>
		case PORTA:
			DDRA_REG=A_u8Direction;
     bcc:	ea e3       	ldi	r30, 0x3A	; 58
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	80 83       	st	Z, r24
     bd4:	0e c0       	rjmp	.+28     	; 0xbf2 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTB:
			DDRB_REG=A_u8Direction;
     bd6:	e7 e3       	ldi	r30, 0x37	; 55
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	80 83       	st	Z, r24
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTC:
			DDRC_REG=A_u8Direction;
     be0:	e4 e3       	ldi	r30, 0x34	; 52
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	80 83       	st	Z, r24
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <MDIO_voidSetPortDirection+0x74>
			break;
		case PORTD:
			DDRD_REG=A_u8Direction;
     bea:	e1 e3       	ldi	r30, 0x31	; 49
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <MDIO_voidSetPortValue>:

//To Set PORT Value takes PORT NAME and PORT VALUE
//PORT ID:PORTA,BCD
//PIN ID:0/7
void MDIO_voidSetPortValue(u8 A_u8PortId,u8 A_u8Value)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <MDIO_voidSetPortValue+0x6>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <MDIO_voidSetPortValue+0x8>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId) {
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	3c 83       	std	Y+4, r19	; 0x04
     c18:	2b 83       	std	Y+3, r18	; 0x03
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	91 05       	cpc	r25, r1
     c22:	d1 f0       	breq	.+52     	; 0xc58 <MDIO_voidSetPortValue+0x58>
     c24:	2b 81       	ldd	r18, Y+3	; 0x03
     c26:	3c 81       	ldd	r19, Y+4	; 0x04
     c28:	22 30       	cpi	r18, 0x02	; 2
     c2a:	31 05       	cpc	r19, r1
     c2c:	2c f4       	brge	.+10     	; 0xc38 <MDIO_voidSetPortValue+0x38>
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f0       	breq	.+24     	; 0xc4e <MDIO_voidSetPortValue+0x4e>
     c36:	1e c0       	rjmp	.+60     	; 0xc74 <MDIO_voidSetPortValue+0x74>
     c38:	2b 81       	ldd	r18, Y+3	; 0x03
     c3a:	3c 81       	ldd	r19, Y+4	; 0x04
     c3c:	22 30       	cpi	r18, 0x02	; 2
     c3e:	31 05       	cpc	r19, r1
     c40:	81 f0       	breq	.+32     	; 0xc62 <MDIO_voidSetPortValue+0x62>
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	91 05       	cpc	r25, r1
     c4a:	81 f0       	breq	.+32     	; 0xc6c <MDIO_voidSetPortValue+0x6c>
     c4c:	13 c0       	rjmp	.+38     	; 0xc74 <MDIO_voidSetPortValue+0x74>
		case PORTA:
			PORTA_REG=A_u8Value;
     c4e:	eb e3       	ldi	r30, 0x3B	; 59
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	80 83       	st	Z, r24
     c56:	0e c0       	rjmp	.+28     	; 0xc74 <MDIO_voidSetPortValue+0x74>
			break;
		case PORTB:
			PORTB_REG=A_u8Value;
     c58:	e8 e3       	ldi	r30, 0x38	; 56
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	80 83       	st	Z, r24
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <MDIO_voidSetPortValue+0x74>
			break;
		case PORTC:
			PORTC_REG=A_u8Value;
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	80 83       	st	Z, r24
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <MDIO_voidSetPortValue+0x74>
			break;
		case PORTD:
			PORTD_REG=A_u8Value;
     c6c:	e2 e3       	ldi	r30, 0x32	; 50
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <MDIO_voidSetPinDirection>:
//To Set pin Dirtection either OUTPUT or INPUT takes PORT NAME ,PIN NUMBER and PIN DIRECTION
//PORT ID:PORTA,BCD
//PIN ID:0/7
//PIN_DIRECTION:OUTPUT,INPUT
void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Direction)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2d 97       	sbiw	r28, 0x0d	; 13
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	6a 83       	std	Y+2, r22	; 0x02
     c9a:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3d 87       	std	Y+13, r19	; 0x0d
     ca4:	2c 87       	std	Y+12, r18	; 0x0c
     ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <MDIO_voidSetPinDirection+0x30>
     cb0:	4f c0       	rjmp	.+158    	; 0xd50 <MDIO_voidSetPinDirection+0xce>
     cb2:	2c 85       	ldd	r18, Y+12	; 0x0c
     cb4:	3d 85       	ldd	r19, Y+13	; 0x0d
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	2c f4       	brge	.+10     	; 0xcc6 <MDIO_voidSetPinDirection+0x44>
     cbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     cbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	71 f0       	breq	.+28     	; 0xce0 <MDIO_voidSetPinDirection+0x5e>
     cc4:	eb c0       	rjmp	.+470    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
     cc6:	2c 85       	ldd	r18, Y+12	; 0x0c
     cc8:	3d 85       	ldd	r19, Y+13	; 0x0d
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <MDIO_voidSetPinDirection+0x50>
     cd0:	77 c0       	rjmp	.+238    	; 0xdc0 <MDIO_voidSetPinDirection+0x13e>
     cd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <MDIO_voidSetPinDirection+0x5c>
     cdc:	a9 c0       	rjmp	.+338    	; 0xe30 <MDIO_voidSetPinDirection+0x1ae>
     cde:	de c0       	rjmp	.+444    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
		case PORTA:
			switch (A_u8Direction) {
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3b 87       	std	Y+11, r19	; 0x0b
     ce8:	2a 87       	std	Y+10, r18	; 0x0a
     cea:	8a 85       	ldd	r24, Y+10	; 0x0a
     cec:	9b 85       	ldd	r25, Y+11	; 0x0b
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	d1 f0       	breq	.+52     	; 0xd26 <MDIO_voidSetPinDirection+0xa4>
     cf2:	2a 85       	ldd	r18, Y+10	; 0x0a
     cf4:	3b 85       	ldd	r19, Y+11	; 0x0b
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	31 05       	cpc	r19, r1
     cfa:	09 f0       	breq	.+2      	; 0xcfe <MDIO_voidSetPinDirection+0x7c>
     cfc:	cf c0       	rjmp	.+414    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
			case PIN_OUTPUT:
				SET_BIT(DDRA_REG,A_u8PinId);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <MDIO_voidSetPinDirection+0x9a>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <MDIO_voidSetPinDirection+0x96>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	bb c0       	rjmp	.+374    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
				break;
			case PIN_INPUT:
				CLR_BIT(DDRA_REG,A_u8PinId);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <MDIO_voidSetPinDirection+0xc2>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <MDIO_voidSetPinDirection+0xbe>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	a6 c0       	rjmp	.+332    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
				break;
		}

			break;
		case PORTB:
				switch (A_u8Direction) {
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	39 87       	std	Y+9, r19	; 0x09
     d58:	28 87       	std	Y+8, r18	; 0x08
     d5a:	88 85       	ldd	r24, Y+8	; 0x08
     d5c:	99 85       	ldd	r25, Y+9	; 0x09
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	d1 f0       	breq	.+52     	; 0xd96 <MDIO_voidSetPinDirection+0x114>
     d62:	28 85       	ldd	r18, Y+8	; 0x08
     d64:	39 85       	ldd	r19, Y+9	; 0x09
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	31 05       	cpc	r19, r1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <MDIO_voidSetPinDirection+0xec>
     d6c:	97 c0       	rjmp	.+302    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
				case PIN_OUTPUT:
					SET_BIT(DDRB_REG,A_u8PinId);
     d6e:	a7 e3       	ldi	r26, 0x37	; 55
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e7 e3       	ldi	r30, 0x37	; 55
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <MDIO_voidSetPinDirection+0x10a>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <MDIO_voidSetPinDirection+0x106>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	83 c0       	rjmp	.+262    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
					break;
				case PIN_INPUT:
					CLR_BIT(DDRB_REG,A_u8PinId);
     d96:	a7 e3       	ldi	r26, 0x37	; 55
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e7 e3       	ldi	r30, 0x37	; 55
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <MDIO_voidSetPinDirection+0x132>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <MDIO_voidSetPinDirection+0x12e>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	6e c0       	rjmp	.+220    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
					break;
			}

				break;
		case PORTC:
					switch (A_u8Direction) {
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3f 83       	std	Y+7, r19	; 0x07
     dc8:	2e 83       	std	Y+6, r18	; 0x06
     dca:	8e 81       	ldd	r24, Y+6	; 0x06
     dcc:	9f 81       	ldd	r25, Y+7	; 0x07
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	d1 f0       	breq	.+52     	; 0xe06 <MDIO_voidSetPinDirection+0x184>
     dd2:	2e 81       	ldd	r18, Y+6	; 0x06
     dd4:	3f 81       	ldd	r19, Y+7	; 0x07
     dd6:	21 30       	cpi	r18, 0x01	; 1
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f0       	breq	.+2      	; 0xdde <MDIO_voidSetPinDirection+0x15c>
     ddc:	5f c0       	rjmp	.+190    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
					case PIN_OUTPUT:
						SET_BIT(DDRC_REG,A_u8PinId);
     dde:	a4 e3       	ldi	r26, 0x34	; 52
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e4 e3       	ldi	r30, 0x34	; 52
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <MDIO_voidSetPinDirection+0x17a>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <MDIO_voidSetPinDirection+0x176>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	4b c0       	rjmp	.+150    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
						break;
					case PIN_INPUT:
						CLR_BIT(DDRC_REG,A_u8PinId);
     e06:	a4 e3       	ldi	r26, 0x34	; 52
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e4 e3       	ldi	r30, 0x34	; 52
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <MDIO_voidSetPinDirection+0x1a2>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <MDIO_voidSetPinDirection+0x19e>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	36 c0       	rjmp	.+108    	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
				}

					break;

			case PORTD:
						switch (A_u8Direction) {
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	3d 83       	std	Y+5, r19	; 0x05
     e38:	2c 83       	std	Y+4, r18	; 0x04
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	9d 81       	ldd	r25, Y+5	; 0x05
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	c9 f0       	breq	.+50     	; 0xe74 <MDIO_voidSetPinDirection+0x1f2>
     e42:	2c 81       	ldd	r18, Y+4	; 0x04
     e44:	3d 81       	ldd	r19, Y+5	; 0x05
     e46:	21 30       	cpi	r18, 0x01	; 1
     e48:	31 05       	cpc	r19, r1
     e4a:	41 f5       	brne	.+80     	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
						case PIN_OUTPUT:
							SET_BIT(DDRD_REG,A_u8PinId);
     e4c:	a1 e3       	ldi	r26, 0x31	; 49
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e1 e3       	ldi	r30, 0x31	; 49
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <MDIO_voidSetPinDirection+0x1e8>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <MDIO_voidSetPinDirection+0x1e4>
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <MDIO_voidSetPinDirection+0x21a>
							break;
						case PIN_INPUT:
							CLR_BIT(DDRD_REG,A_u8PinId);
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <MDIO_voidSetPinDirection+0x210>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <MDIO_voidSetPinDirection+0x20c>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
     e9c:	2d 96       	adiw	r28, 0x0d	; 13
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <MDIO_voidSetPinValue>:
//To Set pin Value either HIGH or LOW takes PORT NAME ,PIN NUMBER and PIN VALUE
//PORT ID:PORTA,BCD
//PIN ID:0/7
//VALUE:HIGH,LOW
void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Value)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	2d 97       	sbiw	r28, 0x0d	; 13
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
     ec6:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	3d 87       	std	Y+13, r19	; 0x0d
     ed0:	2c 87       	std	Y+12, r18	; 0x0c
     ed2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	91 05       	cpc	r25, r1
     eda:	09 f4       	brne	.+2      	; 0xede <MDIO_voidSetPinValue+0x30>
     edc:	4f c0       	rjmp	.+158    	; 0xf7c <MDIO_voidSetPinValue+0xce>
     ede:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee0:	3d 85       	ldd	r19, Y+13	; 0x0d
     ee2:	22 30       	cpi	r18, 0x02	; 2
     ee4:	31 05       	cpc	r19, r1
     ee6:	2c f4       	brge	.+10     	; 0xef2 <MDIO_voidSetPinValue+0x44>
     ee8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eea:	9d 85       	ldd	r25, Y+13	; 0x0d
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	71 f0       	breq	.+28     	; 0xf0c <MDIO_voidSetPinValue+0x5e>
     ef0:	eb c0       	rjmp	.+470    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
     ef2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	09 f4       	brne	.+2      	; 0xefe <MDIO_voidSetPinValue+0x50>
     efc:	77 c0       	rjmp	.+238    	; 0xfec <MDIO_voidSetPinValue+0x13e>
     efe:	8c 85       	ldd	r24, Y+12	; 0x0c
     f00:	9d 85       	ldd	r25, Y+13	; 0x0d
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <MDIO_voidSetPinValue+0x5c>
     f08:	a9 c0       	rjmp	.+338    	; 0x105c <MDIO_voidSetPinValue+0x1ae>
     f0a:	de c0       	rjmp	.+444    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
		case PORTA:
			switch (A_u8Value ) {
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3b 87       	std	Y+11, r19	; 0x0b
     f14:	2a 87       	std	Y+10, r18	; 0x0a
     f16:	8a 85       	ldd	r24, Y+10	; 0x0a
     f18:	9b 85       	ldd	r25, Y+11	; 0x0b
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <MDIO_voidSetPinValue+0xa4>
     f1e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f20:	3b 85       	ldd	r19, Y+11	; 0x0b
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	31 05       	cpc	r19, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <MDIO_voidSetPinValue+0x7c>
     f28:	cf c0       	rjmp	.+414    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
			case PIN_HIGH:
				SET_BIT(PORTA_REG,A_u8PinId);
     f2a:	ab e3       	ldi	r26, 0x3B	; 59
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e3       	ldi	r30, 0x3B	; 59
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <MDIO_voidSetPinValue+0x9a>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <MDIO_voidSetPinValue+0x96>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	bb c0       	rjmp	.+374    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
				break;
			case PIN_LOW:
				CLR_BIT(PORTA_REG,A_u8PinId);
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <MDIO_voidSetPinValue+0xc2>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <MDIO_voidSetPinValue+0xbe>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	a6 c0       	rjmp	.+332    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
				break;
		}

			break;
		case PORTB:
				switch (A_u8Value ) {
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	39 87       	std	Y+9, r19	; 0x09
     f84:	28 87       	std	Y+8, r18	; 0x08
     f86:	88 85       	ldd	r24, Y+8	; 0x08
     f88:	99 85       	ldd	r25, Y+9	; 0x09
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	d1 f0       	breq	.+52     	; 0xfc2 <MDIO_voidSetPinValue+0x114>
     f8e:	28 85       	ldd	r18, Y+8	; 0x08
     f90:	39 85       	ldd	r19, Y+9	; 0x09
     f92:	21 30       	cpi	r18, 0x01	; 1
     f94:	31 05       	cpc	r19, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <MDIO_voidSetPinValue+0xec>
     f98:	97 c0       	rjmp	.+302    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
				case PIN_HIGH:
					SET_BIT(PORTB_REG,A_u8PinId);
     f9a:	a8 e3       	ldi	r26, 0x38	; 56
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e8 e3       	ldi	r30, 0x38	; 56
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <MDIO_voidSetPinValue+0x10a>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <MDIO_voidSetPinValue+0x106>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	83 c0       	rjmp	.+262    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
					break;
				case PIN_LOW:
					CLR_BIT(PORTB_REG,A_u8PinId);
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <MDIO_voidSetPinValue+0x132>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <MDIO_voidSetPinValue+0x12e>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	6e c0       	rjmp	.+220    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
					break;
			}

				break;
		case PORTC:
					switch (A_u8Value ) {
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3f 83       	std	Y+7, r19	; 0x07
     ff4:	2e 83       	std	Y+6, r18	; 0x06
     ff6:	8e 81       	ldd	r24, Y+6	; 0x06
     ff8:	9f 81       	ldd	r25, Y+7	; 0x07
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	d1 f0       	breq	.+52     	; 0x1032 <MDIO_voidSetPinValue+0x184>
     ffe:	2e 81       	ldd	r18, Y+6	; 0x06
    1000:	3f 81       	ldd	r19, Y+7	; 0x07
    1002:	21 30       	cpi	r18, 0x01	; 1
    1004:	31 05       	cpc	r19, r1
    1006:	09 f0       	breq	.+2      	; 0x100a <MDIO_voidSetPinValue+0x15c>
    1008:	5f c0       	rjmp	.+190    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
					case PIN_HIGH:
						SET_BIT(PORTC_REG,A_u8PinId);
    100a:	a5 e3       	ldi	r26, 0x35	; 53
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e3       	ldi	r30, 0x35	; 53
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <MDIO_voidSetPinValue+0x17a>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <MDIO_voidSetPinValue+0x176>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	4b c0       	rjmp	.+150    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
						break;
					case PIN_LOW:
						CLR_BIT(PORTC_REG,A_u8PinId);
    1032:	a5 e3       	ldi	r26, 0x35	; 53
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e5 e3       	ldi	r30, 0x35	; 53
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <MDIO_voidSetPinValue+0x1a2>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <MDIO_voidSetPinValue+0x19e>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	36 c0       	rjmp	.+108    	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
				}

					break;

			case PORTD:
						switch (A_u8Value ) {
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3d 83       	std	Y+5, r19	; 0x05
    1064:	2c 83       	std	Y+4, r18	; 0x04
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	c9 f0       	breq	.+50     	; 0x10a0 <MDIO_voidSetPinValue+0x1f2>
    106e:	2c 81       	ldd	r18, Y+4	; 0x04
    1070:	3d 81       	ldd	r19, Y+5	; 0x05
    1072:	21 30       	cpi	r18, 0x01	; 1
    1074:	31 05       	cpc	r19, r1
    1076:	41 f5       	brne	.+80     	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
						case PIN_HIGH:
							SET_BIT(PORTD_REG,A_u8PinId);
    1078:	a2 e3       	ldi	r26, 0x32	; 50
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <MDIO_voidSetPinValue+0x1e8>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <MDIO_voidSetPinValue+0x1e4>
    109a:	84 2b       	or	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <MDIO_voidSetPinValue+0x21a>
							break;
						case PIN_LOW:
							CLR_BIT(PORTD_REG,A_u8PinId);
    10a0:	a2 e3       	ldi	r26, 0x32	; 50
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e2 e3       	ldi	r30, 0x32	; 50
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <MDIO_voidSetPinValue+0x210>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <MDIO_voidSetPinValue+0x20c>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    10c8:	2d 96       	adiw	r28, 0x0d	; 13
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <MDIO_u8GetPinValue>:
//PORT ID:PORTA,BCD
//PIN ID:0/7


u8 MDIO_u8GetPinValue(u8 A_u8PortID,u8 A_u8PinID)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <MDIO_u8GetPinValue+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <MDIO_u8GetPinValue+0x8>
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=0;
    10ec:	19 82       	std	Y+1, r1	; 0x01
	switch (A_u8PortID) {
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3d 83       	std	Y+5, r19	; 0x05
    10f6:	2c 83       	std	Y+4, r18	; 0x04
    10f8:	4c 81       	ldd	r20, Y+4	; 0x04
    10fa:	5d 81       	ldd	r21, Y+5	; 0x05
    10fc:	41 30       	cpi	r20, 0x01	; 1
    10fe:	51 05       	cpc	r21, r1
    1100:	41 f1       	breq	.+80     	; 0x1152 <MDIO_u8GetPinValue+0x78>
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	91 05       	cpc	r25, r1
    110a:	34 f4       	brge	.+12     	; 0x1118 <MDIO_u8GetPinValue+0x3e>
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	61 f0       	breq	.+24     	; 0x112e <MDIO_u8GetPinValue+0x54>
    1116:	52 c0       	rjmp	.+164    	; 0x11bc <MDIO_u8GetPinValue+0xe2>
    1118:	4c 81       	ldd	r20, Y+4	; 0x04
    111a:	5d 81       	ldd	r21, Y+5	; 0x05
    111c:	42 30       	cpi	r20, 0x02	; 2
    111e:	51 05       	cpc	r21, r1
    1120:	51 f1       	breq	.+84     	; 0x1176 <MDIO_u8GetPinValue+0x9c>
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	9d 81       	ldd	r25, Y+5	; 0x05
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	b9 f1       	breq	.+110    	; 0x119a <MDIO_u8GetPinValue+0xc0>
    112c:	47 c0       	rjmp	.+142    	; 0x11bc <MDIO_u8GetPinValue+0xe2>
		case PORTA:
			local_u8PinValue=GET_BIT(PINA_REG,A_u8PinID);
    112e:	e9 e3       	ldi	r30, 0x39	; 57
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <MDIO_u8GetPinValue+0x6c>
    1142:	55 95       	asr	r21
    1144:	47 95       	ror	r20
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <MDIO_u8GetPinValue+0x68>
    114a:	ca 01       	movw	r24, r20
    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	35 c0       	rjmp	.+106    	; 0x11bc <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTB:
			local_u8PinValue=GET_BIT(PINB_REG,A_u8PinID);
    1152:	e6 e3       	ldi	r30, 0x36	; 54
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <MDIO_u8GetPinValue+0x90>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <MDIO_u8GetPinValue+0x8c>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	23 c0       	rjmp	.+70     	; 0x11bc <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTC:
			local_u8PinValue=GET_BIT(PINC_REG,A_u8PinID);
    1176:	e3 e3       	ldi	r30, 0x33	; 51
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <MDIO_u8GetPinValue+0xb4>
    118a:	55 95       	asr	r21
    118c:	47 95       	ror	r20
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <MDIO_u8GetPinValue+0xb0>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	11 c0       	rjmp	.+34     	; 0x11bc <MDIO_u8GetPinValue+0xe2>
			break;
		case PORTD:
			local_u8PinValue=GET_BIT(PIND_REG,A_u8PinID);
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a9 01       	movw	r20, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <MDIO_u8GetPinValue+0xd8>
    11ae:	55 95       	asr	r21
    11b0:	47 95       	ror	r20
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <MDIO_u8GetPinValue+0xd4>
    11b6:	ca 01       	movw	r24, r20
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}
	return local_u8PinValue;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <MDIO_voidToggle>:
//To Toggle a pin it takes  PORT NAME ,PIN NUMBER and PIN VALUE
void MDIO_voidToggle(u8 A_u8Port,u8 A_u8PinId,u8 A_u8Value)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <MDIO_voidToggle+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <MDIO_voidToggle+0x8>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	6a 83       	std	Y+2, r22	; 0x02
    11e0:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8Port) {
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3d 83       	std	Y+5, r19	; 0x05
    11ea:	2c 83       	std	Y+4, r18	; 0x04
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	49 f1       	breq	.+82     	; 0x1248 <MDIO_voidToggle+0x7a>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <MDIO_voidToggle+0x3c>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <MDIO_voidToggle+0x52>
    1208:	5a c0       	rjmp	.+180    	; 0x12be <MDIO_voidToggle+0xf0>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	71 f1       	breq	.+92     	; 0x1270 <MDIO_voidToggle+0xa2>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	e9 f1       	breq	.+122    	; 0x1298 <MDIO_voidToggle+0xca>
    121e:	4f c0       	rjmp	.+158    	; 0x12be <MDIO_voidToggle+0xf0>
		case PORTA:
			TOGGLE_BIT(PORTA_REG,A_u8PinId);
    1220:	ab e3       	ldi	r26, 0x3B	; 59
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <MDIO_voidToggle+0x70>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <MDIO_voidToggle+0x6c>
    1242:	84 27       	eor	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	3b c0       	rjmp	.+118    	; 0x12be <MDIO_voidToggle+0xf0>
			break;
		case PORTB:
			TOGGLE_BIT(PORTB_REG,A_u8PinId);
    1248:	a8 e3       	ldi	r26, 0x38	; 56
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e3       	ldi	r30, 0x38	; 56
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <MDIO_voidToggle+0x98>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <MDIO_voidToggle+0x94>
    126a:	84 27       	eor	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	27 c0       	rjmp	.+78     	; 0x12be <MDIO_voidToggle+0xf0>
				break;
		case PORTC:
			TOGGLE_BIT(PORTC_REG,A_u8PinId);
    1270:	a5 e3       	ldi	r26, 0x35	; 53
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e5 e3       	ldi	r30, 0x35	; 53
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <MDIO_voidToggle+0xc0>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <MDIO_voidToggle+0xbc>
    1292:	84 27       	eor	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	13 c0       	rjmp	.+38     	; 0x12be <MDIO_voidToggle+0xf0>
					break;

			case PORTD:
				TOGGLE_BIT(PORTD_REG,A_u8PinId);
    1298:	a2 e3       	ldi	r26, 0x32	; 50
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e3       	ldi	r30, 0x32	; 50
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <MDIO_voidToggle+0xe8>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <MDIO_voidToggle+0xe4>
    12ba:	84 27       	eor	r24, r20
    12bc:	8c 93       	st	X, r24
						break;
		default:
			break;
	}

}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <HLCD_voidSendCommand>:
#include "LCD_Configurations.h"
#include "LCD_Interface.h"
#include "LCD_Private.h"


void HLCD_voidSendCommand(u8 A_u8Command){
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	c7 54       	subi	r28, 0x47	; 71
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	fe 01       	movw	r30, r28
    12ea:	e9 5b       	subi	r30, 0xB9	; 185
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	80 83       	st	Z, r24

		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Command,4));
    12f0:	fe 01       	movw	r30, r28
    12f2:	e9 5b       	subi	r30, 0xB9	; 185
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 81       	ld	r24, Z
    12f8:	82 95       	swap	r24
    12fa:	8f 70       	andi	r24, 0x0F	; 15
    12fc:	98 2f       	mov	r25, r24
    12fe:	91 70       	andi	r25, 0x01	; 1
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	49 2f       	mov	r20, r25
    1306:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Command,5));
    130a:	fe 01       	movw	r30, r28
    130c:	e9 5b       	subi	r30, 0xB9	; 185
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	80 81       	ld	r24, Z
    1312:	82 95       	swap	r24
    1314:	86 95       	lsr	r24
    1316:	87 70       	andi	r24, 0x07	; 7
    1318:	98 2f       	mov	r25, r24
    131a:	91 70       	andi	r25, 0x01	; 1
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	49 2f       	mov	r20, r25
    1322:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Command,6));
    1326:	fe 01       	movw	r30, r28
    1328:	e9 5b       	subi	r30, 0xB9	; 185
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	82 95       	swap	r24
    1330:	86 95       	lsr	r24
    1332:	86 95       	lsr	r24
    1334:	83 70       	andi	r24, 0x03	; 3
    1336:	98 2f       	mov	r25, r24
    1338:	91 70       	andi	r25, 0x01	; 1
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	49 2f       	mov	r20, r25
    1340:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Command,7));
    1344:	fe 01       	movw	r30, r28
    1346:	e9 5b       	subi	r30, 0xB9	; 185
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	98 2f       	mov	r25, r24
    134e:	99 1f       	adc	r25, r25
    1350:	99 27       	eor	r25, r25
    1352:	99 1f       	adc	r25, r25
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	64 e0       	ldi	r22, 0x04	; 4
    1358:	49 2f       	mov	r20, r25
    135a:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_LOW);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    1368:	fe 01       	movw	r30, r28
    136a:	ed 5b       	subi	r30, 0xBD	; 189
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e8       	ldi	r26, 0x80	; 128
    1374:	bf e3       	ldi	r27, 0x3F	; 63
    1376:	80 83       	st	Z, r24
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	a2 83       	std	Z+2, r26	; 0x02
    137c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137e:	8e 01       	movw	r16, r28
    1380:	01 5c       	subi	r16, 0xC1	; 193
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	fe 01       	movw	r30, r28
    1386:	ed 5b       	subi	r30, 0xBD	; 189
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e8       	ldi	r19, 0x80	; 128
    1396:	4b e3       	ldi	r20, 0x3B	; 59
    1398:	55 e4       	ldi	r21, 0x45	; 69
    139a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	f8 01       	movw	r30, r16
    13a4:	80 83       	st	Z, r24
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	a2 83       	std	Z+2, r26	; 0x02
    13aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ac:	fe 01       	movw	r30, r28
    13ae:	ff 96       	adiw	r30, 0x3f	; 63
    13b0:	60 81       	ld	r22, Z
    13b2:	71 81       	ldd	r23, Z+1	; 0x01
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <HLCD_voidSendCommand+0x104>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9e af       	std	Y+62, r25	; 0x3e
    13ce:	8d af       	std	Y+61, r24	; 0x3d
    13d0:	46 c0       	rjmp	.+140    	; 0x145e <HLCD_voidSendCommand+0x190>
	else if (__tmp > 65535)
    13d2:	fe 01       	movw	r30, r28
    13d4:	ff 96       	adiw	r30, 0x3f	; 63
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	3f ef       	ldi	r19, 0xFF	; 255
    13e2:	4f e7       	ldi	r20, 0x7F	; 127
    13e4:	57 e4       	ldi	r21, 0x47	; 71
    13e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ea:	18 16       	cp	r1, r24
    13ec:	64 f5       	brge	.+88     	; 0x1446 <HLCD_voidSendCommand+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ee:	fe 01       	movw	r30, r28
    13f0:	ed 5b       	subi	r30, 0xBD	; 189
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e af       	std	Y+62, r25	; 0x3e
    141a:	8d af       	std	Y+61, r24	; 0x3d
    141c:	0f c0       	rjmp	.+30     	; 0x143c <HLCD_voidSendCommand+0x16e>
    141e:	8c e2       	ldi	r24, 0x2C	; 44
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	9c af       	std	Y+60, r25	; 0x3c
    1424:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1426:	8b ad       	ldd	r24, Y+59	; 0x3b
    1428:	9c ad       	ldd	r25, Y+60	; 0x3c
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <HLCD_voidSendCommand+0x15c>
    142e:	9c af       	std	Y+60, r25	; 0x3c
    1430:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8d ad       	ldd	r24, Y+61	; 0x3d
    1434:	9e ad       	ldd	r25, Y+62	; 0x3e
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9e af       	std	Y+62, r25	; 0x3e
    143a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8d ad       	ldd	r24, Y+61	; 0x3d
    143e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <HLCD_voidSendCommand+0x150>
    1444:	16 c0       	rjmp	.+44     	; 0x1472 <HLCD_voidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	fe 01       	movw	r30, r28
    1448:	ff 96       	adiw	r30, 0x3f	; 63
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9e af       	std	Y+62, r25	; 0x3e
    145c:	8d af       	std	Y+61, r24	; 0x3d
    145e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1460:	9e ad       	ldd	r25, Y+62	; 0x3e
    1462:	9a af       	std	Y+58, r25	; 0x3a
    1464:	89 af       	std	Y+57, r24	; 0x39
    1466:	89 ad       	ldd	r24, Y+57	; 0x39
    1468:	9a ad       	ldd	r25, Y+58	; 0x3a
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <HLCD_voidSendCommand+0x19c>
    146e:	9a af       	std	Y+58, r25	; 0x3a
    1470:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	62 e0       	ldi	r22, 0x02	; 2
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	8d ab       	std	Y+53, r24	; 0x35
    1486:	9e ab       	std	Y+54, r25	; 0x36
    1488:	af ab       	std	Y+55, r26	; 0x37
    148a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6d a9       	ldd	r22, Y+53	; 0x35
    148e:	7e a9       	ldd	r23, Y+54	; 0x36
    1490:	8f a9       	ldd	r24, Y+55	; 0x37
    1492:	98 ad       	ldd	r25, Y+56	; 0x38
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e8       	ldi	r19, 0x80	; 128
    1498:	4b e3       	ldi	r20, 0x3B	; 59
    149a:	55 e4       	ldi	r21, 0x45	; 69
    149c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	89 ab       	std	Y+49, r24	; 0x31
    14a6:	9a ab       	std	Y+50, r25	; 0x32
    14a8:	ab ab       	std	Y+51, r26	; 0x33
    14aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ac:	69 a9       	ldd	r22, Y+49	; 0x31
    14ae:	7a a9       	ldd	r23, Y+50	; 0x32
    14b0:	8b a9       	ldd	r24, Y+51	; 0x33
    14b2:	9c a9       	ldd	r25, Y+52	; 0x34
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <HLCD_voidSendCommand+0x200>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	98 ab       	std	Y+48, r25	; 0x30
    14ca:	8f a7       	std	Y+47, r24	; 0x2f
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <HLCD_voidSendCommand+0x27e>
	else if (__tmp > 65535)
    14ce:	69 a9       	ldd	r22, Y+49	; 0x31
    14d0:	7a a9       	ldd	r23, Y+50	; 0x32
    14d2:	8b a9       	ldd	r24, Y+51	; 0x33
    14d4:	9c a9       	ldd	r25, Y+52	; 0x34
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6d a9       	ldd	r22, Y+53	; 0x35
    14e8:	7e a9       	ldd	r23, Y+54	; 0x36
    14ea:	8f a9       	ldd	r24, Y+55	; 0x37
    14ec:	98 ad       	ldd	r25, Y+56	; 0x38
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	98 ab       	std	Y+48, r25	; 0x30
    150c:	8f a7       	std	Y+47, r24	; 0x2f
    150e:	0f c0       	rjmp	.+30     	; 0x152e <HLCD_voidSendCommand+0x260>
    1510:	8c e2       	ldi	r24, 0x2C	; 44
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	9e a7       	std	Y+46, r25	; 0x2e
    1516:	8d a7       	std	Y+45, r24	; 0x2d
    1518:	8d a5       	ldd	r24, Y+45	; 0x2d
    151a:	9e a5       	ldd	r25, Y+46	; 0x2e
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <HLCD_voidSendCommand+0x24e>
    1520:	9e a7       	std	Y+46, r25	; 0x2e
    1522:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8f a5       	ldd	r24, Y+47	; 0x2f
    1526:	98 a9       	ldd	r25, Y+48	; 0x30
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	98 a9       	ldd	r25, Y+48	; 0x30
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <HLCD_voidSendCommand+0x242>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <HLCD_voidSendCommand+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	69 a9       	ldd	r22, Y+49	; 0x31
    153a:	7a a9       	ldd	r23, Y+50	; 0x32
    153c:	8b a9       	ldd	r24, Y+51	; 0x33
    153e:	9c a9       	ldd	r25, Y+52	; 0x34
    1540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	98 ab       	std	Y+48, r25	; 0x30
    154a:	8f a7       	std	Y+47, r24	; 0x2f
    154c:	8f a5       	ldd	r24, Y+47	; 0x2f
    154e:	98 a9       	ldd	r25, Y+48	; 0x30
    1550:	9c a7       	std	Y+44, r25	; 0x2c
    1552:	8b a7       	std	Y+43, r24	; 0x2b
    1554:	8b a5       	ldd	r24, Y+43	; 0x2b
    1556:	9c a5       	ldd	r25, Y+44	; 0x2c
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <HLCD_voidSendCommand+0x28a>
    155c:	9c a7       	std	Y+44, r25	; 0x2c
    155e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e8       	ldi	r26, 0x80	; 128
    1570:	bf e3       	ldi	r27, 0x3F	; 63
    1572:	8f a3       	std	Y+39, r24	; 0x27
    1574:	98 a7       	std	Y+40, r25	; 0x28
    1576:	a9 a7       	std	Y+41, r26	; 0x29
    1578:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6f a1       	ldd	r22, Y+39	; 0x27
    157c:	78 a5       	ldd	r23, Y+40	; 0x28
    157e:	89 a5       	ldd	r24, Y+41	; 0x29
    1580:	9a a5       	ldd	r25, Y+42	; 0x2a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e8       	ldi	r19, 0x80	; 128
    1586:	4b e3       	ldi	r20, 0x3B	; 59
    1588:	55 e4       	ldi	r21, 0x45	; 69
    158a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8b a3       	std	Y+35, r24	; 0x23
    1594:	9c a3       	std	Y+36, r25	; 0x24
    1596:	ad a3       	std	Y+37, r26	; 0x25
    1598:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    159a:	6b a1       	ldd	r22, Y+35	; 0x23
    159c:	7c a1       	ldd	r23, Y+36	; 0x24
    159e:	8d a1       	ldd	r24, Y+37	; 0x25
    15a0:	9e a1       	ldd	r25, Y+38	; 0x26
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <HLCD_voidSendCommand+0x2ee>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9a a3       	std	Y+34, r25	; 0x22
    15b8:	89 a3       	std	Y+33, r24	; 0x21
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <HLCD_voidSendCommand+0x36c>
	else if (__tmp > 65535)
    15bc:	6b a1       	ldd	r22, Y+35	; 0x23
    15be:	7c a1       	ldd	r23, Y+36	; 0x24
    15c0:	8d a1       	ldd	r24, Y+37	; 0x25
    15c2:	9e a1       	ldd	r25, Y+38	; 0x26
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <HLCD_voidSendCommand+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6f a1       	ldd	r22, Y+39	; 0x27
    15d6:	78 a5       	ldd	r23, Y+40	; 0x28
    15d8:	89 a5       	ldd	r24, Y+41	; 0x29
    15da:	9a a5       	ldd	r25, Y+42	; 0x2a
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <HLCD_voidSendCommand+0x34e>
    15fe:	8c e2       	ldi	r24, 0x2C	; 44
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	98 a3       	std	Y+32, r25	; 0x20
    1604:	8f 8f       	std	Y+31, r24	; 0x1f
    1606:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1608:	98 a1       	ldd	r25, Y+32	; 0x20
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <HLCD_voidSendCommand+0x33c>
    160e:	98 a3       	std	Y+32, r25	; 0x20
    1610:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	89 a1       	ldd	r24, Y+33	; 0x21
    1614:	9a a1       	ldd	r25, Y+34	; 0x22
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9a a3       	std	Y+34, r25	; 0x22
    161a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	89 a1       	ldd	r24, Y+33	; 0x21
    161e:	9a a1       	ldd	r25, Y+34	; 0x22
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <HLCD_voidSendCommand+0x330>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <HLCD_voidSendCommand+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6b a1       	ldd	r22, Y+35	; 0x23
    1628:	7c a1       	ldd	r23, Y+36	; 0x24
    162a:	8d a1       	ldd	r24, Y+37	; 0x25
    162c:	9e a1       	ldd	r25, Y+38	; 0x26
    162e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9a a3       	std	Y+34, r25	; 0x22
    1638:	89 a3       	std	Y+33, r24	; 0x21
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	9e 8f       	std	Y+30, r25	; 0x1e
    1640:	8d 8f       	std	Y+29, r24	; 0x1d
    1642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1644:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <HLCD_voidSendCommand+0x378>
    164a:	9e 8f       	std	Y+30, r25	; 0x1e
    164c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);


		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Command,0));
    164e:	fe 01       	movw	r30, r28
    1650:	e9 5b       	subi	r30, 0xB9	; 185
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	98 2f       	mov	r25, r24
    1658:	91 70       	andi	r25, 0x01	; 1
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	49 2f       	mov	r20, r25
    1660:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Command,1));
    1664:	fe 01       	movw	r30, r28
    1666:	e9 5b       	subi	r30, 0xB9	; 185
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	86 95       	lsr	r24
    166e:	98 2f       	mov	r25, r24
    1670:	91 70       	andi	r25, 0x01	; 1
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	49 2f       	mov	r20, r25
    1678:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Command,2));
    167c:	fe 01       	movw	r30, r28
    167e:	e9 5b       	subi	r30, 0xB9	; 185
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	86 95       	lsr	r24
    1686:	86 95       	lsr	r24
    1688:	98 2f       	mov	r25, r24
    168a:	91 70       	andi	r25, 0x01	; 1
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	49 2f       	mov	r20, r25
    1692:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Command,3));
    1696:	fe 01       	movw	r30, r28
    1698:	e9 5b       	subi	r30, 0xB9	; 185
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 81       	ld	r24, Z
    169e:	86 95       	lsr	r24
    16a0:	86 95       	lsr	r24
    16a2:	86 95       	lsr	r24
    16a4:	98 2f       	mov	r25, r24
    16a6:	91 70       	andi	r25, 0x01	; 1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	64 e0       	ldi	r22, 0x04	; 4
    16ac:	49 2f       	mov	r20, r25
    16ae:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>


		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	62 e0       	ldi	r22, 0x02	; 2
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a0 e8       	ldi	r26, 0x80	; 128
    16c2:	bf e3       	ldi	r27, 0x3F	; 63
    16c4:	89 8f       	std	Y+25, r24	; 0x19
    16c6:	9a 8f       	std	Y+26, r25	; 0x1a
    16c8:	ab 8f       	std	Y+27, r26	; 0x1b
    16ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	69 8d       	ldd	r22, Y+25	; 0x19
    16ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e8       	ldi	r19, 0x80	; 128
    16d8:	4b e3       	ldi	r20, 0x3B	; 59
    16da:	55 e4       	ldi	r21, 0x45	; 69
    16dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8d 8b       	std	Y+21, r24	; 0x15
    16e6:	9e 8b       	std	Y+22, r25	; 0x16
    16e8:	af 8b       	std	Y+23, r26	; 0x17
    16ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ec:	6d 89       	ldd	r22, Y+21	; 0x15
    16ee:	7e 89       	ldd	r23, Y+22	; 0x16
    16f0:	8f 89       	ldd	r24, Y+23	; 0x17
    16f2:	98 8d       	ldd	r25, Y+24	; 0x18
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <HLCD_voidSendCommand+0x440>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
    170c:	3f c0       	rjmp	.+126    	; 0x178c <HLCD_voidSendCommand+0x4be>
	else if (__tmp > 65535)
    170e:	6d 89       	ldd	r22, Y+21	; 0x15
    1710:	7e 89       	ldd	r23, Y+22	; 0x16
    1712:	8f 89       	ldd	r24, Y+23	; 0x17
    1714:	98 8d       	ldd	r25, Y+24	; 0x18
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <HLCD_voidSendCommand+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	69 8d       	ldd	r22, Y+25	; 0x19
    1728:	7a 8d       	ldd	r23, Y+26	; 0x1a
    172a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9c 8b       	std	Y+20, r25	; 0x14
    174c:	8b 8b       	std	Y+19, r24	; 0x13
    174e:	0f c0       	rjmp	.+30     	; 0x176e <HLCD_voidSendCommand+0x4a0>
    1750:	8c e2       	ldi	r24, 0x2C	; 44
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	9a 8b       	std	Y+18, r25	; 0x12
    1756:	89 8b       	std	Y+17, r24	; 0x11
    1758:	89 89       	ldd	r24, Y+17	; 0x11
    175a:	9a 89       	ldd	r25, Y+18	; 0x12
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <HLCD_voidSendCommand+0x48e>
    1760:	9a 8b       	std	Y+18, r25	; 0x12
    1762:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8b 89       	ldd	r24, Y+19	; 0x13
    1766:	9c 89       	ldd	r25, Y+20	; 0x14
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9c 8b       	std	Y+20, r25	; 0x14
    176c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8b 89       	ldd	r24, Y+19	; 0x13
    1770:	9c 89       	ldd	r25, Y+20	; 0x14
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <HLCD_voidSendCommand+0x482>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <HLCD_voidSendCommand+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6d 89       	ldd	r22, Y+21	; 0x15
    177a:	7e 89       	ldd	r23, Y+22	; 0x16
    177c:	8f 89       	ldd	r24, Y+23	; 0x17
    177e:	98 8d       	ldd	r25, Y+24	; 0x18
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9c 8b       	std	Y+20, r25	; 0x14
    178a:	8b 8b       	std	Y+19, r24	; 0x13
    178c:	8b 89       	ldd	r24, Y+19	; 0x13
    178e:	9c 89       	ldd	r25, Y+20	; 0x14
    1790:	98 8b       	std	Y+16, r25	; 0x10
    1792:	8f 87       	std	Y+15, r24	; 0x0f
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	98 89       	ldd	r25, Y+16	; 0x10
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <HLCD_voidSendCommand+0x4ca>
    179c:	98 8b       	std	Y+16, r25	; 0x10
    179e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	62 e0       	ldi	r22, 0x02	; 2
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e8       	ldi	r26, 0x80	; 128
    17b0:	bf e3       	ldi	r27, 0x3F	; 63
    17b2:	8b 87       	std	Y+11, r24	; 0x0b
    17b4:	9c 87       	std	Y+12, r25	; 0x0c
    17b6:	ad 87       	std	Y+13, r26	; 0x0d
    17b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    17bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17be:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e8       	ldi	r19, 0x80	; 128
    17c6:	4b e3       	ldi	r20, 0x3B	; 59
    17c8:	55 e4       	ldi	r21, 0x45	; 69
    17ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8f 83       	std	Y+7, r24	; 0x07
    17d4:	98 87       	std	Y+8, r25	; 0x08
    17d6:	a9 87       	std	Y+9, r26	; 0x09
    17d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17da:	6f 81       	ldd	r22, Y+7	; 0x07
    17dc:	78 85       	ldd	r23, Y+8	; 0x08
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <HLCD_voidSendCommand+0x52e>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <HLCD_voidSendCommand+0x5ac>
	else if (__tmp > 65535)
    17fc:	6f 81       	ldd	r22, Y+7	; 0x07
    17fe:	78 85       	ldd	r23, Y+8	; 0x08
    1800:	89 85       	ldd	r24, Y+9	; 0x09
    1802:	9a 85       	ldd	r25, Y+10	; 0x0a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	4c f5       	brge	.+82     	; 0x1866 <HLCD_voidSendCommand+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	6b 85       	ldd	r22, Y+11	; 0x0b
    1816:	7c 85       	ldd	r23, Y+12	; 0x0c
    1818:	8d 85       	ldd	r24, Y+13	; 0x0d
    181a:	9e 85       	ldd	r25, Y+14	; 0x0e
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	0f c0       	rjmp	.+30     	; 0x185c <HLCD_voidSendCommand+0x58e>
    183e:	8c e2       	ldi	r24, 0x2C	; 44
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	9c 83       	std	Y+4, r25	; 0x04
    1844:	8b 83       	std	Y+3, r24	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <HLCD_voidSendCommand+0x57c>
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	69 f7       	brne	.-38     	; 0x183e <HLCD_voidSendCommand+0x570>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <HLCD_voidSendCommand+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	6f 81       	ldd	r22, Y+7	; 0x07
    1868:	78 85       	ldd	r23, Y+8	; 0x08
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <HLCD_voidSendCommand+0x5b8>
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);


}
    188e:	c9 5b       	subi	r28, 0xB9	; 185
    1890:	df 4f       	sbci	r29, 0xFF	; 255
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

000018a6 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data){
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	c7 54       	subi	r28, 0x47	; 71
    18b4:	d0 40       	sbci	r29, 0x00	; 0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	fe 01       	movw	r30, r28
    18c2:	e9 5b       	subi	r30, 0xB9	; 185
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 83       	st	Z, r24

		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Data,4));
    18c8:	fe 01       	movw	r30, r28
    18ca:	e9 5b       	subi	r30, 0xB9	; 185
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	82 95       	swap	r24
    18d2:	8f 70       	andi	r24, 0x0F	; 15
    18d4:	98 2f       	mov	r25, r24
    18d6:	91 70       	andi	r25, 0x01	; 1
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	49 2f       	mov	r20, r25
    18de:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Data,5));
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 5b       	subi	r30, 0xB9	; 185
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	82 95       	swap	r24
    18ec:	86 95       	lsr	r24
    18ee:	87 70       	andi	r24, 0x07	; 7
    18f0:	98 2f       	mov	r25, r24
    18f2:	91 70       	andi	r25, 0x01	; 1
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	49 2f       	mov	r20, r25
    18fa:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Data,6));
    18fe:	fe 01       	movw	r30, r28
    1900:	e9 5b       	subi	r30, 0xB9	; 185
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	82 95       	swap	r24
    1908:	86 95       	lsr	r24
    190a:	86 95       	lsr	r24
    190c:	83 70       	andi	r24, 0x03	; 3
    190e:	98 2f       	mov	r25, r24
    1910:	91 70       	andi	r25, 0x01	; 1
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	49 2f       	mov	r20, r25
    1918:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Data,7));
    191c:	fe 01       	movw	r30, r28
    191e:	e9 5b       	subi	r30, 0xB9	; 185
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	98 2f       	mov	r25, r24
    1926:	99 1f       	adc	r25, r25
    1928:	99 27       	eor	r25, r25
    192a:	99 1f       	adc	r25, r25
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	64 e0       	ldi	r22, 0x04	; 4
    1930:	49 2f       	mov	r20, r25
    1932:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_HIGH);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	63 e0       	ldi	r22, 0x03	; 3
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    1940:	fe 01       	movw	r30, r28
    1942:	ed 5b       	subi	r30, 0xBD	; 189
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e8       	ldi	r26, 0x80	; 128
    194c:	bf e3       	ldi	r27, 0x3F	; 63
    194e:	80 83       	st	Z, r24
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	a2 83       	std	Z+2, r26	; 0x02
    1954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	8e 01       	movw	r16, r28
    1958:	01 5c       	subi	r16, 0xC1	; 193
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	ed 5b       	subi	r30, 0xBD	; 189
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e8       	ldi	r19, 0x80	; 128
    196e:	4b e3       	ldi	r20, 0x3B	; 59
    1970:	55 e4       	ldi	r21, 0x45	; 69
    1972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	80 83       	st	Z, r24
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	a2 83       	std	Z+2, r26	; 0x02
    1982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1984:	fe 01       	movw	r30, r28
    1986:	ff 96       	adiw	r30, 0x3f	; 63
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <HLCD_voidSendData+0x104>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e af       	std	Y+62, r25	; 0x3e
    19a6:	8d af       	std	Y+61, r24	; 0x3d
    19a8:	46 c0       	rjmp	.+140    	; 0x1a36 <HLCD_voidSendData+0x190>
	else if (__tmp > 65535)
    19aa:	fe 01       	movw	r30, r28
    19ac:	ff 96       	adiw	r30, 0x3f	; 63
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	64 f5       	brge	.+88     	; 0x1a1e <HLCD_voidSendData+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	fe 01       	movw	r30, r28
    19c8:	ed 5b       	subi	r30, 0xBD	; 189
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e af       	std	Y+62, r25	; 0x3e
    19f2:	8d af       	std	Y+61, r24	; 0x3d
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <HLCD_voidSendData+0x16e>
    19f6:	8c e2       	ldi	r24, 0x2C	; 44
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	9c af       	std	Y+60, r25	; 0x3c
    19fc:	8b af       	std	Y+59, r24	; 0x3b
    19fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a00:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <HLCD_voidSendData+0x15c>
    1a06:	9c af       	std	Y+60, r25	; 0x3c
    1a08:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9e af       	std	Y+62, r25	; 0x3e
    1a12:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <HLCD_voidSendData+0x150>
    1a1c:	16 c0       	rjmp	.+44     	; 0x1a4a <HLCD_voidSendData+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ff 96       	adiw	r30, 0x3f	; 63
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e af       	std	Y+62, r25	; 0x3e
    1a34:	8d af       	std	Y+61, r24	; 0x3d
    1a36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a3a:	9a af       	std	Y+58, r25	; 0x3a
    1a3c:	89 af       	std	Y+57, r24	; 0x39
    1a3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <HLCD_voidSendData+0x19c>
    1a46:	9a af       	std	Y+58, r25	; 0x3a
    1a48:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a0 e8       	ldi	r26, 0x80	; 128
    1a5a:	bf e3       	ldi	r27, 0x3F	; 63
    1a5c:	8d ab       	std	Y+53, r24	; 0x35
    1a5e:	9e ab       	std	Y+54, r25	; 0x36
    1a60:	af ab       	std	Y+55, r26	; 0x37
    1a62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	6d a9       	ldd	r22, Y+53	; 0x35
    1a66:	7e a9       	ldd	r23, Y+54	; 0x36
    1a68:	8f a9       	ldd	r24, Y+55	; 0x37
    1a6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e8       	ldi	r19, 0x80	; 128
    1a70:	4b e3       	ldi	r20, 0x3B	; 59
    1a72:	55 e4       	ldi	r21, 0x45	; 69
    1a74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	89 ab       	std	Y+49, r24	; 0x31
    1a7e:	9a ab       	std	Y+50, r25	; 0x32
    1a80:	ab ab       	std	Y+51, r26	; 0x33
    1a82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a84:	69 a9       	ldd	r22, Y+49	; 0x31
    1a86:	7a a9       	ldd	r23, Y+50	; 0x32
    1a88:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <HLCD_voidSendData+0x200>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	98 ab       	std	Y+48, r25	; 0x30
    1aa2:	8f a7       	std	Y+47, r24	; 0x2f
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <HLCD_voidSendData+0x27e>
	else if (__tmp > 65535)
    1aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1aac:	9c a9       	ldd	r25, Y+52	; 0x34
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	57 e4       	ldi	r21, 0x47	; 71
    1ab6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aba:	18 16       	cp	r1, r24
    1abc:	4c f5       	brge	.+82     	; 0x1b10 <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <HLCD_voidSendData+0x260>
    1ae8:	8c e2       	ldi	r24, 0x2C	; 44
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	9e a7       	std	Y+46, r25	; 0x2e
    1aee:	8d a7       	std	Y+45, r24	; 0x2d
    1af0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1af2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <HLCD_voidSendData+0x24e>
    1af8:	9e a7       	std	Y+46, r25	; 0x2e
    1afa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1afe:	98 a9       	ldd	r25, Y+48	; 0x30
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	98 ab       	std	Y+48, r25	; 0x30
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b08:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <HLCD_voidSendData+0x242>
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <HLCD_voidSendData+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	69 a9       	ldd	r22, Y+49	; 0x31
    1b12:	7a a9       	ldd	r23, Y+50	; 0x32
    1b14:	8b a9       	ldd	r24, Y+51	; 0x33
    1b16:	9c a9       	ldd	r25, Y+52	; 0x34
    1b18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	98 ab       	std	Y+48, r25	; 0x30
    1b22:	8f a7       	std	Y+47, r24	; 0x2f
    1b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b26:	98 a9       	ldd	r25, Y+48	; 0x30
    1b28:	9c a7       	std	Y+44, r25	; 0x2c
    1b2a:	8b a7       	std	Y+43, r24	; 0x2b
    1b2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <HLCD_voidSendData+0x28a>
    1b34:	9c a7       	std	Y+44, r25	; 0x2c
    1b36:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e8       	ldi	r26, 0x80	; 128
    1b48:	bf e3       	ldi	r27, 0x3F	; 63
    1b4a:	8f a3       	std	Y+39, r24	; 0x27
    1b4c:	98 a7       	std	Y+40, r25	; 0x28
    1b4e:	a9 a7       	std	Y+41, r26	; 0x29
    1b50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6f a1       	ldd	r22, Y+39	; 0x27
    1b54:	78 a5       	ldd	r23, Y+40	; 0x28
    1b56:	89 a5       	ldd	r24, Y+41	; 0x29
    1b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e8       	ldi	r19, 0x80	; 128
    1b5e:	4b e3       	ldi	r20, 0x3B	; 59
    1b60:	55 e4       	ldi	r21, 0x45	; 69
    1b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8b a3       	std	Y+35, r24	; 0x23
    1b6c:	9c a3       	std	Y+36, r25	; 0x24
    1b6e:	ad a3       	std	Y+37, r26	; 0x25
    1b70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b72:	6b a1       	ldd	r22, Y+35	; 0x23
    1b74:	7c a1       	ldd	r23, Y+36	; 0x24
    1b76:	8d a1       	ldd	r24, Y+37	; 0x25
    1b78:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <HLCD_voidSendData+0x2ee>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <HLCD_voidSendData+0x36c>
	else if (__tmp > 65535)
    1b94:	6b a1       	ldd	r22, Y+35	; 0x23
    1b96:	7c a1       	ldd	r23, Y+36	; 0x24
    1b98:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <HLCD_voidSendData+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6f a1       	ldd	r22, Y+39	; 0x27
    1bae:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <HLCD_voidSendData+0x34e>
    1bd6:	8c e2       	ldi	r24, 0x2C	; 44
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	98 a3       	std	Y+32, r25	; 0x20
    1bdc:	8f 8f       	std	Y+31, r24	; 0x1f
    1bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be0:	98 a1       	ldd	r25, Y+32	; 0x20
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <HLCD_voidSendData+0x33c>
    1be6:	98 a3       	std	Y+32, r25	; 0x20
    1be8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	89 a1       	ldd	r24, Y+33	; 0x21
    1bec:	9a a1       	ldd	r25, Y+34	; 0x22
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9a a3       	std	Y+34, r25	; 0x22
    1bf2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <HLCD_voidSendData+0x330>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <HLCD_voidSendData+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1c00:	7c a1       	ldd	r23, Y+36	; 0x24
    1c02:	8d a1       	ldd	r24, Y+37	; 0x25
    1c04:	9e a1       	ldd	r25, Y+38	; 0x26
    1c06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9a a3       	std	Y+34, r25	; 0x22
    1c10:	89 a3       	std	Y+33, r24	; 0x21
    1c12:	89 a1       	ldd	r24, Y+33	; 0x21
    1c14:	9a a1       	ldd	r25, Y+34	; 0x22
    1c16:	9e 8f       	std	Y+30, r25	; 0x1e
    1c18:	8d 8f       	std	Y+29, r24	; 0x1d
    1c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <HLCD_voidSendData+0x378>
    1c22:	9e 8f       	std	Y+30, r25	; 0x1e
    1c24:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);


		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(A_u8Data,0));
    1c26:	fe 01       	movw	r30, r28
    1c28:	e9 5b       	subi	r30, 0xB9	; 185
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	98 2f       	mov	r25, r24
    1c30:	91 70       	andi	r25, 0x01	; 1
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	49 2f       	mov	r20, r25
    1c38:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(A_u8Data,1));
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e9 5b       	subi	r30, 0xB9	; 185
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	86 95       	lsr	r24
    1c46:	98 2f       	mov	r25, r24
    1c48:	91 70       	andi	r25, 0x01	; 1
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	49 2f       	mov	r20, r25
    1c50:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(A_u8Data,2));
    1c54:	fe 01       	movw	r30, r28
    1c56:	e9 5b       	subi	r30, 0xB9	; 185
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 81       	ld	r24, Z
    1c5c:	86 95       	lsr	r24
    1c5e:	86 95       	lsr	r24
    1c60:	98 2f       	mov	r25, r24
    1c62:	91 70       	andi	r25, 0x01	; 1
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	62 e0       	ldi	r22, 0x02	; 2
    1c68:	49 2f       	mov	r20, r25
    1c6a:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(A_u8Data,3));
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e9 5b       	subi	r30, 0xB9	; 185
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	86 95       	lsr	r24
    1c78:	86 95       	lsr	r24
    1c7a:	86 95       	lsr	r24
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	91 70       	andi	r25, 0x01	; 1
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	49 2f       	mov	r20, r25
    1c86:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>


		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_HIGH);
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e8       	ldi	r26, 0x80	; 128
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	89 8f       	std	Y+25, r24	; 0x19
    1c9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e8       	ldi	r19, 0x80	; 128
    1cb0:	4b e3       	ldi	r20, 0x3B	; 59
    1cb2:	55 e4       	ldi	r21, 0x45	; 69
    1cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8d 8b       	std	Y+21, r24	; 0x15
    1cbe:	9e 8b       	std	Y+22, r25	; 0x16
    1cc0:	af 8b       	std	Y+23, r26	; 0x17
    1cc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <HLCD_voidSendData+0x440>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <HLCD_voidSendData+0x4be>
	else if (__tmp > 65535)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <HLCD_voidSendData+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <HLCD_voidSendData+0x4a0>
    1d28:	8c e2       	ldi	r24, 0x2C	; 44
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	9a 89       	ldd	r25, Y+18	; 0x12
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <HLCD_voidSendData+0x48e>
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <HLCD_voidSendData+0x482>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <HLCD_voidSendData+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	98 8b       	std	Y+16, r25	; 0x10
    1d6a:	8f 87       	std	Y+15, r24	; 0x0f
    1d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6e:	98 89       	ldd	r25, Y+16	; 0x10
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <HLCD_voidSendData+0x4ca>
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_EN_PIN,PIN_LOW);
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	62 e0       	ldi	r22, 0x02	; 2
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e8       	ldi	r26, 0x80	; 128
    1d88:	bf e3       	ldi	r27, 0x3F	; 63
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	ad 87       	std	Y+13, r26	; 0x0d
    1d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e8       	ldi	r19, 0x80	; 128
    1d9e:	4b e3       	ldi	r20, 0x3B	; 59
    1da0:	55 e4       	ldi	r21, 0x45	; 69
    1da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <HLCD_voidSendData+0x52e>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <HLCD_voidSendData+0x5ac>
	else if (__tmp > 65535)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <HLCD_voidSendData+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <HLCD_voidSendData+0x58e>
    1e16:	8c e2       	ldi	r24, 0x2C	; 44
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <HLCD_voidSendData+0x57c>
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <HLCD_voidSendData+0x570>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <HLCD_voidSendData+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <HLCD_voidSendData+0x5b8>
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);


}
    1e66:	c9 5b       	subi	r28, 0xB9	; 185
    1e68:	df 4f       	sbci	r29, 0xFF	; 255
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <HLCD_voidSendString>:
void HLCD_voidSendString(char *str){
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <HLCD_voidSendString+0x6>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	9b 83       	std	Y+3, r25	; 0x03
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
for(u8 i =0;str[i]!='\0';i++){
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	0e c0       	rjmp	.+28     	; 0x1eae <HLCD_voidSendString+0x30>
	HLCD_voidSendData(str[i]);
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	e2 0f       	add	r30, r18
    1ea0:	f3 1f       	adc	r31, r19
    1ea2:	80 81       	ld	r24, Z
    1ea4:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <HLCD_voidSendData>
		_delay_ms(1);


}
void HLCD_voidSendString(char *str){
for(u8 i =0;str[i]!='\0';i++){
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e2 0f       	add	r30, r18
    1ebc:	f3 1f       	adc	r31, r19
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 23       	and	r24, r24
    1ec2:	39 f7       	brne	.-50     	; 0x1e92 <HLCD_voidSendString+0x14>
	HLCD_voidSendData(str[i]);
}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <HLCD_voidInit>:



void HLCD_voidInit(void){
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	2e 97       	sbiw	r28, 0x0e	; 14
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eea:	b1 e4       	ldi	r27, 0x41	; 65
    1eec:	8b 87       	std	Y+11, r24	; 0x0b
    1eee:	9c 87       	std	Y+12, r25	; 0x0c
    1ef0:	ad 87       	std	Y+13, r26	; 0x0d
    1ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e8       	ldi	r19, 0x80	; 128
    1f00:	4b e3       	ldi	r20, 0x3B	; 59
    1f02:	55 e4       	ldi	r21, 0x45	; 69
    1f04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8f 83       	std	Y+7, r24	; 0x07
    1f0e:	98 87       	std	Y+8, r25	; 0x08
    1f10:	a9 87       	std	Y+9, r26	; 0x09
    1f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <HLCD_voidInit+0x66>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <HLCD_voidInit+0xc6>
    1f78:	8c e2       	ldi	r24, 0x2C	; 44
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <HLCD_voidInit+0xb4>
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <HLCD_voidInit+0xa8>
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <HLCD_voidInit+0xf0>
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	HLCD_voidSendCommand(0x33);
    1fc8:	83 e3       	ldi	r24, 0x33	; 51
    1fca:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x32);
    1fce:	82 e3       	ldi	r24, 0x32	; 50
    1fd0:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
	HLCD_voidSendCommand(FUNCTION_SET_4BITMODE_4LINE_5X7DOT);
    1fd4:	88 e2       	ldi	r24, 0x28	; 40
    1fd6:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
	HLCD_voidSendCommand(DISPLAY_ON_CURSOR_OFF);
    1fda:	8e e0       	ldi	r24, 0x0E	; 14
    1fdc:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
    HLCD_voidSendCommand(DISPLAY_CLEAR);
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1fe6:	86 e0       	ldi	r24, 0x06	; 6
    1fe8:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
}
    1fec:	2e 96       	adiw	r28, 0x0e	; 14
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <HLCD_voidSendNumber>:

void HLCD_voidSendNumber(u32 A_u32Number){
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	28 97       	sbiw	r28, 0x08	; 8
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	6d 83       	std	Y+5, r22	; 0x05
    201c:	7e 83       	std	Y+6, r23	; 0x06
    201e:	8f 83       	std	Y+7, r24	; 0x07
    2020:	98 87       	std	Y+8, r25	; 0x08
	 u32 local_u32Number = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a0 e0       	ldi	r26, 0x00	; 0
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	ab 83       	std	Y+3, r26	; 0x03
    2030:	bc 83       	std	Y+4, r27	; 0x04
	    if (A_u32Number == 0)
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	af 81       	ldd	r26, Y+7	; 0x07
    2038:	b8 85       	ldd	r27, Y+8	; 0x08
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	a1 05       	cpc	r26, r1
    203e:	b1 05       	cpc	r27, r1
    2040:	d1 f5       	brne	.+116    	; 0x20b6 <HLCD_voidSendNumber+0xb8>
	    {
	        HLCD_voidSendData('0');
    2042:	80 e3       	ldi	r24, 0x30	; 48
    2044:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <HLCD_voidSendData>
    2048:	36 c0       	rjmp	.+108    	; 0x20b6 <HLCD_voidSendNumber+0xb8>
	    }
	    while (A_u32Number != 0)
	    {
	        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	ab 81       	ldd	r26, Y+3	; 0x03
    2050:	bc 81       	ldd	r27, Y+4	; 0x04
    2052:	2a e0       	ldi	r18, 0x0A	; 10
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__mulsi3>
    2062:	7b 01       	movw	r14, r22
    2064:	8c 01       	movw	r16, r24
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	af 81       	ldd	r26, Y+7	; 0x07
    206c:	b8 85       	ldd	r27, Y+8	; 0x08
    206e:	2a e0       	ldi	r18, 0x0A	; 10
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__udivmodsi4>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8e 0d       	add	r24, r14
    2084:	9f 1d       	adc	r25, r15
    2086:	a0 1f       	adc	r26, r16
    2088:	b1 1f       	adc	r27, r17
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	ab 83       	std	Y+3, r26	; 0x03
    2090:	bc 83       	std	Y+4, r27	; 0x04
	        A_u32Number = A_u32Number / 10;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	af 81       	ldd	r26, Y+7	; 0x07
    2098:	b8 85       	ldd	r27, Y+8	; 0x08
    209a:	2a e0       	ldi	r18, 0x0A	; 10
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__udivmodsi4>
    20aa:	da 01       	movw	r26, r20
    20ac:	c9 01       	movw	r24, r18
    20ae:	8d 83       	std	Y+5, r24	; 0x05
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	af 83       	std	Y+7, r26	; 0x07
    20b4:	b8 87       	std	Y+8, r27	; 0x08
	 u32 local_u32Number = 1;
	    if (A_u32Number == 0)
	    {
	        HLCD_voidSendData('0');
	    }
	    while (A_u32Number != 0)
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	af 81       	ldd	r26, Y+7	; 0x07
    20bc:	b8 85       	ldd	r27, Y+8	; 0x08
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	a1 05       	cpc	r26, r1
    20c2:	b1 05       	cpc	r27, r1
    20c4:	11 f6       	brne	.-124    	; 0x204a <HLCD_voidSendNumber+0x4c>
    20c6:	23 c0       	rjmp	.+70     	; 0x210e <HLCD_voidSendNumber+0x110>
	        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
	        A_u32Number = A_u32Number / 10;
	    }
	    while (local_u32Number != 1)
	    {
	        HLCD_voidSendData((local_u32Number % 10) + 48);
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	ab 81       	ldd	r26, Y+3	; 0x03
    20ce:	bc 81       	ldd	r27, Y+4	; 0x04
    20d0:	2a e0       	ldi	r18, 0x0A	; 10
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__udivmodsi4>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	80 5d       	subi	r24, 0xD0	; 208
    20e6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <HLCD_voidSendData>
	        local_u32Number = local_u32Number / 10;
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	ab 81       	ldd	r26, Y+3	; 0x03
    20f0:	bc 81       	ldd	r27, Y+4	; 0x04
    20f2:	2a e0       	ldi	r18, 0x0A	; 10
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__udivmodsi4>
    2102:	da 01       	movw	r26, r20
    2104:	c9 01       	movw	r24, r18
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	ab 83       	std	Y+3, r26	; 0x03
    210c:	bc 83       	std	Y+4, r27	; 0x04
	    while (A_u32Number != 0)
	    {
	        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
	        A_u32Number = A_u32Number / 10;
	    }
	    while (local_u32Number != 1)
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	ab 81       	ldd	r26, Y+3	; 0x03
    2114:	bc 81       	ldd	r27, Y+4	; 0x04
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	a1 f6       	brne	.-88     	; 0x20c8 <HLCD_voidSendNumber+0xca>
	    {
	        HLCD_voidSendData((local_u32Number % 10) + 48);
	        local_u32Number = local_u32Number / 10;
	    }
}
    2120:	28 96       	adiw	r28, 0x08	; 8
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	08 95       	ret

0000213a <HLCD_voidGOTO>:

void HLCD_voidGOTO(u8 A_u8RowNo,u8 A_u8ColNo){
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <HLCD_voidGOTO+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <HLCD_voidGOTO+0x8>
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	8a 83       	std	Y+2, r24	; 0x02
    214a:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_DDRAM=0;
    214c:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8RowNo){
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	3d 83       	std	Y+5, r19	; 0x05
    2156:	2c 83       	std	Y+4, r18	; 0x04
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	91 05       	cpc	r25, r1
    2160:	c9 f0       	breq	.+50     	; 0x2194 <HLCD_voidGOTO+0x5a>
    2162:	2c 81       	ldd	r18, Y+4	; 0x04
    2164:	3d 81       	ldd	r19, Y+5	; 0x05
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	2c f4       	brge	.+10     	; 0x2176 <HLCD_voidGOTO+0x3c>
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	61 f0       	breq	.+24     	; 0x218c <HLCD_voidGOTO+0x52>
    2174:	1a c0       	rjmp	.+52     	; 0x21aa <HLCD_voidGOTO+0x70>
    2176:	2c 81       	ldd	r18, Y+4	; 0x04
    2178:	3d 81       	ldd	r19, Y+5	; 0x05
    217a:	22 30       	cpi	r18, 0x02	; 2
    217c:	31 05       	cpc	r19, r1
    217e:	71 f0       	breq	.+28     	; 0x219c <HLCD_voidGOTO+0x62>
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	83 30       	cpi	r24, 0x03	; 3
    2186:	91 05       	cpc	r25, r1
    2188:	69 f0       	breq	.+26     	; 0x21a4 <HLCD_voidGOTO+0x6a>
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <HLCD_voidGOTO+0x70>
	case ROW1:
		local_u8_DDRAM=0x80+A_u8ColNo;
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	80 58       	subi	r24, 0x80	; 128
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	0b c0       	rjmp	.+22     	; 0x21aa <HLCD_voidGOTO+0x70>
		break;
	case ROW2:
		local_u8_DDRAM=0xC0+A_u8ColNo;
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	80 54       	subi	r24, 0x40	; 64
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	07 c0       	rjmp	.+14     	; 0x21aa <HLCD_voidGOTO+0x70>
		break;
	case ROW3:
		local_u8_DDRAM=0x94+A_u8ColNo;
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	8c 56       	subi	r24, 0x6C	; 108
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <HLCD_voidGOTO+0x70>
		break;
	case ROW4:
		local_u8_DDRAM=0xD4+A_u8ColNo;
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	8c 52       	subi	r24, 0x2C	; 44
    21a8:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	HLCD_voidSendCommand(local_u8_DDRAM|SET_DDRAM_ADDRESS);
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <HKEYPAD_u8GetPressedKeyMatrixMode>:

u8 KEYPAD_Au8RowsPins[ROWS_NUMBER] = ROW_PINS;
u8 KEYPAD_Au8ColsPins[COLS_NUMBER] = COL_PINS;
u8 KEYPAD_Au8Keys[ROWS_NUMBER][COLS_NUMBER] = KEYPAD_KEYS;

u8 HKEYPAD_u8GetPressedKeyMatrixMode(void){
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	63 97       	sbiw	r28, 0x13	; 19
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61


	 u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEY_NOT_PRESSED, local_u8Flag = FLAG_DOWN;
    21d6:	8f ef       	ldi	r24, 0xFF	; 255
    21d8:	88 8b       	std	Y+16, r24	; 0x10
    21da:	1f 86       	std	Y+15, r1	; 0x0f

	    for (local_u8RowCounter = LOOP_START; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    21dc:	1b 8a       	std	Y+19, r1	; 0x13
    21de:	da c0       	rjmp	.+436    	; 0x2394 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1d2>
	    {

	        MDIO_voidSetPinValue(ROWS_PORT, KEYPAD_Au8RowsPins[local_u8RowCounter], PIN_LOW);
    21e0:	8b 89       	ldd	r24, Y+19	; 0x13
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	fc 01       	movw	r30, r24
    21e8:	eb 56       	subi	r30, 0x6B	; 107
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	90 81       	ld	r25, Z
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	69 2f       	mov	r22, r25
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
	        for (local_u8ColCounter = LOOP_START; local_u8ColCounter < COLS_NUMBER; local_u8ColCounter++)
    21f8:	1a 8a       	std	Y+18, r1	; 0x12
    21fa:	b6 c0       	rjmp	.+364    	; 0x2368 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1a6>
	        {
	            local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
    21fc:	8a 89       	ldd	r24, Y+18	; 0x12
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	fc 01       	movw	r30, r24
    2204:	e7 56       	subi	r30, 0x67	; 103
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	90 81       	ld	r25, Z
    220a:	83 e0       	ldi	r24, 0x03	; 3
    220c:	69 2f       	mov	r22, r25
    220e:	0e 94 6d 08 	call	0x10da	; 0x10da <MDIO_u8GetPinValue>
    2212:	89 8b       	std	Y+17, r24	; 0x11
	            if (local_u8PinValue == PIN_LOW)
    2214:	89 89       	ldd	r24, Y+17	; 0x11
    2216:	88 23       	and	r24, r24
    2218:	09 f0       	breq	.+2      	; 0x221c <HKEYPAD_u8GetPressedKeyMatrixMode+0x5a>
    221a:	a3 c0       	rjmp	.+326    	; 0x2362 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1a0>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a6 e1       	ldi	r26, 0x16	; 22
    2222:	b3 e4       	ldi	r27, 0x43	; 67
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	9c 87       	std	Y+12, r25	; 0x0c
    2228:	ad 87       	std	Y+13, r26	; 0x0d
    222a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e8       	ldi	r19, 0x80	; 128
    2238:	4b e3       	ldi	r20, 0x3B	; 59
    223a:	55 e4       	ldi	r21, 0x45	; 69
    223c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 83       	std	Y+7, r24	; 0x07
    2246:	98 87       	std	Y+8, r25	; 0x08
    2248:	a9 87       	std	Y+9, r26	; 0x09
    224a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <HKEYPAD_u8GetPressedKeyMatrixMode+0xac>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <HKEYPAD_u8GetPressedKeyMatrixMode+0x12a>
	else if (__tmp > 65535)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <HKEYPAD_u8GetPressedKeyMatrixMode+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <HKEYPAD_u8GetPressedKeyMatrixMode+0x10c>
    22b0:	8c e2       	ldi	r24, 0x2C	; 44
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <HKEYPAD_u8GetPressedKeyMatrixMode+0xfa>
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <HKEYPAD_u8GetPressedKeyMatrixMode+0xee>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <HKEYPAD_u8GetPressedKeyMatrixMode+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <HKEYPAD_u8GetPressedKeyMatrixMode+0x136>
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
	            {
	                _delay_ms(DEBOUNCING_DELAY);
	                local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
    2300:	8a 89       	ldd	r24, Y+18	; 0x12
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	fc 01       	movw	r30, r24
    2308:	e7 56       	subi	r30, 0x67	; 103
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	90 81       	ld	r25, Z
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	69 2f       	mov	r22, r25
    2312:	0e 94 6d 08 	call	0x10da	; 0x10da <MDIO_u8GetPinValue>
    2316:	89 8b       	std	Y+17, r24	; 0x11
    2318:	0c c0       	rjmp	.+24     	; 0x2332 <HKEYPAD_u8GetPressedKeyMatrixMode+0x170>
	                while (local_u8PinValue == KEY_PRESSED)
	                {
	                    local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
    231a:	8a 89       	ldd	r24, Y+18	; 0x12
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	fc 01       	movw	r30, r24
    2322:	e7 56       	subi	r30, 0x67	; 103
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	90 81       	ld	r25, Z
    2328:	83 e0       	ldi	r24, 0x03	; 3
    232a:	69 2f       	mov	r22, r25
    232c:	0e 94 6d 08 	call	0x10da	; 0x10da <MDIO_u8GetPinValue>
    2330:	89 8b       	std	Y+17, r24	; 0x11
	            local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
	            if (local_u8PinValue == PIN_LOW)
	            {
	                _delay_ms(DEBOUNCING_DELAY);
	                local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
	                while (local_u8PinValue == KEY_PRESSED)
    2332:	89 89       	ldd	r24, Y+17	; 0x11
    2334:	88 23       	and	r24, r24
    2336:	89 f3       	breq	.-30     	; 0x231a <HKEYPAD_u8GetPressedKeyMatrixMode+0x158>
	                {
	                    local_u8PinValue = MDIO_u8GetPinValue(COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]);
	                }
	                local_u8Flag = FLAG_UP;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	8f 87       	std	Y+15, r24	; 0x0f
	                local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
    233c:	8b 89       	ldd	r24, Y+19	; 0x13
    233e:	48 2f       	mov	r20, r24
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	8a 89       	ldd	r24, Y+18	; 0x12
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	ca 01       	movw	r24, r20
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	82 0f       	add	r24, r18
    2354:	93 1f       	adc	r25, r19
    2356:	fc 01       	movw	r30, r24
    2358:	e3 56       	subi	r30, 0x63	; 99
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	88 8b       	std	Y+16, r24	; 0x10
    2360:	07 c0       	rjmp	.+14     	; 0x2370 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1ae>

	    for (local_u8RowCounter = LOOP_START; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
	    {

	        MDIO_voidSetPinValue(ROWS_PORT, KEYPAD_Au8RowsPins[local_u8RowCounter], PIN_LOW);
	        for (local_u8ColCounter = LOOP_START; local_u8ColCounter < COLS_NUMBER; local_u8ColCounter++)
    2362:	8a 89       	ldd	r24, Y+18	; 0x12
    2364:	8f 5f       	subi	r24, 0xFF	; 255
    2366:	8a 8b       	std	Y+18, r24	; 0x12
    2368:	8a 89       	ldd	r24, Y+18	; 0x12
    236a:	84 30       	cpi	r24, 0x04	; 4
    236c:	08 f4       	brcc	.+2      	; 0x2370 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1ae>
    236e:	46 cf       	rjmp	.-372    	; 0x21fc <HKEYPAD_u8GetPressedKeyMatrixMode+0x3a>
	                local_u8Flag = FLAG_UP;
	                local_u8KeyValue=KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
	                break;
	            }
	        }
	        MDIO_voidSetPinValue(ROWS_PORT, KEYPAD_Au8RowsPins[local_u8RowCounter], PIN_HIGH);
    2370:	8b 89       	ldd	r24, Y+19	; 0x13
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	fc 01       	movw	r30, r24
    2378:	eb 56       	subi	r30, 0x6B	; 107
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	90 81       	ld	r25, Z
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	69 2f       	mov	r22, r25
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
	        if (local_u8Flag == FLAG_UP)
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	39 f0       	breq	.+14     	; 0x239c <HKEYPAD_u8GetPressedKeyMatrixMode+0x1da>
u8 HKEYPAD_u8GetPressedKeyMatrixMode(void){


	 u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEY_NOT_PRESSED, local_u8Flag = FLAG_DOWN;

	    for (local_u8RowCounter = LOOP_START; local_u8RowCounter < ROWS_NUMBER; local_u8RowCounter++)
    238e:	8b 89       	ldd	r24, Y+19	; 0x13
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	8b 8b       	std	Y+19, r24	; 0x13
    2394:	8b 89       	ldd	r24, Y+19	; 0x13
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	08 f4       	brcc	.+2      	; 0x239c <HKEYPAD_u8GetPressedKeyMatrixMode+0x1da>
    239a:	22 cf       	rjmp	.-444    	; 0x21e0 <HKEYPAD_u8GetPressedKeyMatrixMode+0x1e>
	        if (local_u8Flag == FLAG_UP)
	        {
	            break;
	        }
	    }
	    return local_u8KeyValue;
    239c:	88 89       	ldd	r24, Y+16	; 0x10
}
    239e:	63 96       	adiw	r28, 0x13	; 19
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <HKEYPAD_u8GetPressedKeyDirectMode>:

u8 HKEYPAD_u8GetPressedKeyDirectMode(u8 A_u8ColPIN){
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <HKEYPAD_u8GetPressedKeyDirectMode+0x6>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	8a 83       	std	Y+2, r24	; 0x02

	 u8  local_u8PinValue;
        local_u8PinValue=MDIO_u8GetPinValue(COLS_PORT,A_u8ColPIN);
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	6a 81       	ldd	r22, Y+2	; 0x02
    23c0:	0e 94 6d 08 	call	0x10da	; 0x10da <MDIO_u8GetPinValue>
    23c4:	89 83       	std	Y+1, r24	; 0x01

   	    return local_u8PinValue;
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <main>:
#include "../HAL/LCD/LCD_Interface.h"
#include "../HAL/LCD/LCD_Private.h"



void main (void){
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	ef 97       	sbiw	r28, 0x3f	; 63
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
    23e6:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidInit>
	HLCD_voidInit();
    23ea:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <HLCD_voidInit>

	u8 LOCAL_PIN=KEY_NOT_PRESSED;
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	8d af       	std	Y+61, r24	; 0x3d
	u8 operand1, operand2 ,key,result=0 ;
    23f2:	19 ae       	std	Y+57, r1	; 0x39
	HLCD_voidSendString("NO1:");
    23f4:	80 e6       	ldi	r24, 0x60	; 96
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a8 ec       	ldi	r26, 0xC8	; 200
    2402:	b2 e4       	ldi	r27, 0x42	; 66
    2404:	8d ab       	std	Y+53, r24	; 0x35
    2406:	9e ab       	std	Y+54, r25	; 0x36
    2408:	af ab       	std	Y+55, r26	; 0x37
    240a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6d a9       	ldd	r22, Y+53	; 0x35
    240e:	7e a9       	ldd	r23, Y+54	; 0x36
    2410:	8f a9       	ldd	r24, Y+55	; 0x37
    2412:	98 ad       	ldd	r25, Y+56	; 0x38
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e8       	ldi	r19, 0x80	; 128
    2418:	4b e3       	ldi	r20, 0x3B	; 59
    241a:	55 e4       	ldi	r21, 0x45	; 69
    241c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	89 ab       	std	Y+49, r24	; 0x31
    2426:	9a ab       	std	Y+50, r25	; 0x32
    2428:	ab ab       	std	Y+51, r26	; 0x33
    242a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    242c:	69 a9       	ldd	r22, Y+49	; 0x31
    242e:	7a a9       	ldd	r23, Y+50	; 0x32
    2430:	8b a9       	ldd	r24, Y+51	; 0x33
    2432:	9c a9       	ldd	r25, Y+52	; 0x34
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <main+0x7c>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	98 ab       	std	Y+48, r25	; 0x30
    244a:	8f a7       	std	Y+47, r24	; 0x2f
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <main+0xfa>
	else if (__tmp > 65535)
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6d a9       	ldd	r22, Y+53	; 0x35
    2468:	7e a9       	ldd	r23, Y+54	; 0x36
    246a:	8f a9       	ldd	r24, Y+55	; 0x37
    246c:	98 ad       	ldd	r25, Y+56	; 0x38
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	98 ab       	std	Y+48, r25	; 0x30
    248c:	8f a7       	std	Y+47, r24	; 0x2f
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <main+0xdc>
    2490:	8c e2       	ldi	r24, 0x2C	; 44
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	9e a7       	std	Y+46, r25	; 0x2e
    2496:	8d a7       	std	Y+45, r24	; 0x2d
    2498:	8d a5       	ldd	r24, Y+45	; 0x2d
    249a:	9e a5       	ldd	r25, Y+46	; 0x2e
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <main+0xca>
    24a0:	9e a7       	std	Y+46, r25	; 0x2e
    24a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a6:	98 a9       	ldd	r25, Y+48	; 0x30
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	98 ab       	std	Y+48, r25	; 0x30
    24ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <main+0xbe>
    24b6:	18 c0       	rjmp	.+48     	; 0x24e8 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ba:	7a a9       	ldd	r23, Y+50	; 0x32
    24bc:	8b a9       	ldd	r24, Y+51	; 0x33
    24be:	9c a9       	ldd	r25, Y+52	; 0x34
    24c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	98 ab       	std	Y+48, r25	; 0x30
    24ca:	8f a7       	std	Y+47, r24	; 0x2f
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	9c a7       	std	Y+44, r25	; 0x2c
    24d2:	8b a7       	std	Y+43, r24	; 0x2b
    24d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <main+0x106>
    24dc:	9c a7       	std	Y+44, r25	; 0x2c
    24de:	8b a7       	std	Y+43, r24	; 0x2b
    24e0:	03 c0       	rjmp	.+6      	; 0x24e8 <main+0x116>
	_delay_ms(100);
	while(1){

		while(LOCAL_PIN == KEY_NOT_PRESSED)
		{
			LOCAL_PIN=HKEYPAD_u8GetPressedKeyMatrixMode();
    24e2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <HKEYPAD_u8GetPressedKeyMatrixMode>
    24e6:	8d af       	std	Y+61, r24	; 0x3d
	u8 operand1, operand2 ,key,result=0 ;
	HLCD_voidSendString("NO1:");
	_delay_ms(100);
	while(1){

		while(LOCAL_PIN == KEY_NOT_PRESSED)
    24e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ea:	8f 3f       	cpi	r24, 0xFF	; 255
    24ec:	d1 f3       	breq	.-12     	; 0x24e2 <main+0x110>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	aa e7       	ldi	r26, 0x7A	; 122
    24f4:	b3 e4       	ldi	r27, 0x43	; 67
    24f6:	8f a3       	std	Y+39, r24	; 0x27
    24f8:	98 a7       	std	Y+40, r25	; 0x28
    24fa:	a9 a7       	std	Y+41, r26	; 0x29
    24fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2500:	78 a5       	ldd	r23, Y+40	; 0x28
    2502:	89 a5       	ldd	r24, Y+41	; 0x29
    2504:	9a a5       	ldd	r25, Y+42	; 0x2a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e8       	ldi	r19, 0x80	; 128
    250a:	4b e3       	ldi	r20, 0x3B	; 59
    250c:	55 e4       	ldi	r21, 0x45	; 69
    250e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	8b a3       	std	Y+35, r24	; 0x23
    2518:	9c a3       	std	Y+36, r25	; 0x24
    251a:	ad a3       	std	Y+37, r26	; 0x25
    251c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    251e:	6b a1       	ldd	r22, Y+35	; 0x23
    2520:	7c a1       	ldd	r23, Y+36	; 0x24
    2522:	8d a1       	ldd	r24, Y+37	; 0x25
    2524:	9e a1       	ldd	r25, Y+38	; 0x26
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	5f e3       	ldi	r21, 0x3F	; 63
    252e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2532:	88 23       	and	r24, r24
    2534:	2c f4       	brge	.+10     	; 0x2540 <main+0x16e>
		__ticks = 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9a a3       	std	Y+34, r25	; 0x22
    253c:	89 a3       	std	Y+33, r24	; 0x21
    253e:	3f c0       	rjmp	.+126    	; 0x25be <main+0x1ec>
	else if (__tmp > 65535)
    2540:	6b a1       	ldd	r22, Y+35	; 0x23
    2542:	7c a1       	ldd	r23, Y+36	; 0x24
    2544:	8d a1       	ldd	r24, Y+37	; 0x25
    2546:	9e a1       	ldd	r25, Y+38	; 0x26
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	3f ef       	ldi	r19, 0xFF	; 255
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	57 e4       	ldi	r21, 0x47	; 71
    2550:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2554:	18 16       	cp	r1, r24
    2556:	4c f5       	brge	.+82     	; 0x25aa <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	6f a1       	ldd	r22, Y+39	; 0x27
    255a:	78 a5       	ldd	r23, Y+40	; 0x28
    255c:	89 a5       	ldd	r24, Y+41	; 0x29
    255e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e2       	ldi	r20, 0x20	; 32
    2566:	51 e4       	ldi	r21, 0x41	; 65
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9a a3       	std	Y+34, r25	; 0x22
    257e:	89 a3       	std	Y+33, r24	; 0x21
    2580:	0f c0       	rjmp	.+30     	; 0x25a0 <main+0x1ce>
    2582:	8c e2       	ldi	r24, 0x2C	; 44
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	98 a3       	std	Y+32, r25	; 0x20
    2588:	8f 8f       	std	Y+31, r24	; 0x1f
    258a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    258c:	98 a1       	ldd	r25, Y+32	; 0x20
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <main+0x1bc>
    2592:	98 a3       	std	Y+32, r25	; 0x20
    2594:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2596:	89 a1       	ldd	r24, Y+33	; 0x21
    2598:	9a a1       	ldd	r25, Y+34	; 0x22
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	9a a3       	std	Y+34, r25	; 0x22
    259e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a0:	89 a1       	ldd	r24, Y+33	; 0x21
    25a2:	9a a1       	ldd	r25, Y+34	; 0x22
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	69 f7       	brne	.-38     	; 0x2582 <main+0x1b0>
    25a8:	14 c0       	rjmp	.+40     	; 0x25d2 <main+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25aa:	6b a1       	ldd	r22, Y+35	; 0x23
    25ac:	7c a1       	ldd	r23, Y+36	; 0x24
    25ae:	8d a1       	ldd	r24, Y+37	; 0x25
    25b0:	9e a1       	ldd	r25, Y+38	; 0x26
    25b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9a a3       	std	Y+34, r25	; 0x22
    25bc:	89 a3       	std	Y+33, r24	; 0x21
    25be:	89 a1       	ldd	r24, Y+33	; 0x21
    25c0:	9a a1       	ldd	r25, Y+34	; 0x22
    25c2:	9e 8f       	std	Y+30, r25	; 0x1e
    25c4:	8d 8f       	std	Y+29, r24	; 0x1d
    25c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <main+0x1f8>
    25ce:	9e 8f       	std	Y+30, r25	; 0x1e
    25d0:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			LOCAL_PIN=HKEYPAD_u8GetPressedKeyMatrixMode();

		}
		_delay_ms(250);
		if(LOCAL_PIN!=KEY_NOT_PRESSED){
    25d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d4:	8f 3f       	cpi	r24, 0xFF	; 255
    25d6:	09 f4       	brne	.+2      	; 0x25da <main+0x208>
    25d8:	87 cf       	rjmp	.-242    	; 0x24e8 <main+0x116>
			if(LOCAL_PIN == 'C'){
    25da:	8d ad       	ldd	r24, Y+61	; 0x3d
    25dc:	83 34       	cpi	r24, 0x43	; 67
    25de:	21 f4       	brne	.+8      	; 0x25e8 <main+0x216>
				HLCD_voidSendCommand(DISPLAY_CLEAR);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
    25e6:	c5 c1       	rjmp	.+906    	; 0x2972 <main+0x5a0>
				break;
			}
			HLCD_voidSendData(LOCAL_PIN);
    25e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25ea:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <HLCD_voidSendData>
			operand1=LOCAL_PIN -'0';
    25ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f0:	80 53       	subi	r24, 0x30	; 48
    25f2:	8c af       	std	Y+60, r24	; 0x3c
			HLCD_voidGOTO(1,0);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
			HLCD_voidSendString("NO2:");
    25fc:	85 e6       	ldi	r24, 0x65	; 101
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    2604:	03 c0       	rjmp	.+6      	; 0x260c <main+0x23a>
			while(LOCAL_PIN == KEY_NOT_PRESSED)
			{
				LOCAL_PIN=HKEYPAD_u8GetPressedKeyMatrixMode();
    2606:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <HKEYPAD_u8GetPressedKeyMatrixMode>
    260a:	8d af       	std	Y+61, r24	; 0x3d
			}
			HLCD_voidSendData(LOCAL_PIN);
			operand1=LOCAL_PIN -'0';
			HLCD_voidGOTO(1,0);
			HLCD_voidSendString("NO2:");
			while(LOCAL_PIN == KEY_NOT_PRESSED)
    260c:	8d ad       	ldd	r24, Y+61	; 0x3d
    260e:	8f 3f       	cpi	r24, 0xFF	; 255
    2610:	d1 f3       	breq	.-12     	; 0x2606 <main+0x234>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	aa e7       	ldi	r26, 0x7A	; 122
    2618:	b3 e4       	ldi	r27, 0x43	; 67
    261a:	89 8f       	std	Y+25, r24	; 0x19
    261c:	9a 8f       	std	Y+26, r25	; 0x1a
    261e:	ab 8f       	std	Y+27, r26	; 0x1b
    2620:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	69 8d       	ldd	r22, Y+25	; 0x19
    2624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e8       	ldi	r19, 0x80	; 128
    262e:	4b e3       	ldi	r20, 0x3B	; 59
    2630:	55 e4       	ldi	r21, 0x45	; 69
    2632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8d 8b       	std	Y+21, r24	; 0x15
    263c:	9e 8b       	std	Y+22, r25	; 0x16
    263e:	af 8b       	std	Y+23, r26	; 0x17
    2640:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2642:	6d 89       	ldd	r22, Y+21	; 0x15
    2644:	7e 89       	ldd	r23, Y+22	; 0x16
    2646:	8f 89       	ldd	r24, Y+23	; 0x17
    2648:	98 8d       	ldd	r25, Y+24	; 0x18
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <main+0x292>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <main+0x310>
	else if (__tmp > 65535)
    2664:	6d 89       	ldd	r22, Y+21	; 0x15
    2666:	7e 89       	ldd	r23, Y+22	; 0x16
    2668:	8f 89       	ldd	r24, Y+23	; 0x17
    266a:	98 8d       	ldd	r25, Y+24	; 0x18
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	69 8d       	ldd	r22, Y+25	; 0x19
    267e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9c 8b       	std	Y+20, r25	; 0x14
    26a2:	8b 8b       	std	Y+19, r24	; 0x13
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <main+0x2f2>
    26a6:	8c e2       	ldi	r24, 0x2C	; 44
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	9a 8b       	std	Y+18, r25	; 0x12
    26ac:	89 8b       	std	Y+17, r24	; 0x11
    26ae:	89 89       	ldd	r24, Y+17	; 0x11
    26b0:	9a 89       	ldd	r25, Y+18	; 0x12
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <main+0x2e0>
    26b6:	9a 8b       	std	Y+18, r25	; 0x12
    26b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <main+0x2d4>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <main+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9c 8b       	std	Y+20, r25	; 0x14
    26e0:	8b 8b       	std	Y+19, r24	; 0x13
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	98 8b       	std	Y+16, r25	; 0x10
    26e8:	8f 87       	std	Y+15, r24	; 0x0f
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	98 89       	ldd	r25, Y+16	; 0x10
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <main+0x31c>
    26f2:	98 8b       	std	Y+16, r25	; 0x10
    26f4:	8f 87       	std	Y+15, r24	; 0x0f
			{
				LOCAL_PIN=HKEYPAD_u8GetPressedKeyMatrixMode();
			}
			_delay_ms(250);

			if(LOCAL_PIN!=KEY_NOT_PRESSED)
    26f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26f8:	8f 3f       	cpi	r24, 0xFF	; 255
    26fa:	09 f4       	brne	.+2      	; 0x26fe <main+0x32c>
    26fc:	f5 ce       	rjmp	.-534    	; 0x24e8 <main+0x116>
			{
				if(LOCAL_PIN == 'C'){
    26fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2700:	83 34       	cpi	r24, 0x43	; 67
    2702:	21 f4       	brne	.+8      	; 0x270c <main+0x33a>
					HLCD_voidSendCommand(DISPLAY_CLEAR);
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
    270a:	33 c1       	rjmp	.+614    	; 0x2972 <main+0x5a0>
					break;
				}
				HLCD_voidSendData(LOCAL_PIN);
    270c:	8d ad       	ldd	r24, Y+61	; 0x3d
    270e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <HLCD_voidSendData>
				operand2=LOCAL_PIN-'0';
    2712:	8d ad       	ldd	r24, Y+61	; 0x3d
    2714:	80 53       	subi	r24, 0x30	; 48
    2716:	8b af       	std	Y+59, r24	; 0x3b
				HLCD_voidGOTO(2,0);
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
				HLCD_voidSendString("OP:");
    2720:	8a e6       	ldi	r24, 0x6A	; 106
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    2728:	03 c0       	rjmp	.+6      	; 0x2730 <main+0x35e>
				while(LOCAL_PIN == KEY_NOT_PRESSED)
				{
					LOCAL_PIN=HKEYPAD_u8GetPressedKeyMatrixMode();
    272a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <HKEYPAD_u8GetPressedKeyMatrixMode>
    272e:	8d af       	std	Y+61, r24	; 0x3d
				}
				HLCD_voidSendData(LOCAL_PIN);
				operand2=LOCAL_PIN-'0';
				HLCD_voidGOTO(2,0);
				HLCD_voidSendString("OP:");
				while(LOCAL_PIN == KEY_NOT_PRESSED)
    2730:	8d ad       	ldd	r24, Y+61	; 0x3d
    2732:	8f 3f       	cpi	r24, 0xFF	; 255
    2734:	d1 f3       	breq	.-12     	; 0x272a <main+0x358>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	aa e7       	ldi	r26, 0x7A	; 122
    273c:	b3 e4       	ldi	r27, 0x43	; 67
    273e:	8b 87       	std	Y+11, r24	; 0x0b
    2740:	9c 87       	std	Y+12, r25	; 0x0c
    2742:	ad 87       	std	Y+13, r26	; 0x0d
    2744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e8       	ldi	r19, 0x80	; 128
    2752:	4b e3       	ldi	r20, 0x3B	; 59
    2754:	55 e4       	ldi	r21, 0x45	; 69
    2756:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8f 83       	std	Y+7, r24	; 0x07
    2760:	98 87       	std	Y+8, r25	; 0x08
    2762:	a9 87       	std	Y+9, r26	; 0x09
    2764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <main+0x3b6>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <main+0x434>
	else if (__tmp > 65535)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <main+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <main+0x416>
    27ca:	8c e2       	ldi	r24, 0x2C	; 44
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <main+0x404>
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <main+0x3f8>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <main+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <main+0x440>
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01


				}
				_delay_ms(250);

				if(LOCAL_PIN!=KEY_NOT_PRESSED)
    281a:	8d ad       	ldd	r24, Y+61	; 0x3d
    281c:	8f 3f       	cpi	r24, 0xFF	; 255
    281e:	09 f4       	brne	.+2      	; 0x2822 <main+0x450>
    2820:	63 ce       	rjmp	.-826    	; 0x24e8 <main+0x116>
				{
					if(LOCAL_PIN == 'C'){
    2822:	8d ad       	ldd	r24, Y+61	; 0x3d
    2824:	83 34       	cpi	r24, 0x43	; 67
    2826:	21 f4       	brne	.+8      	; 0x2830 <main+0x45e>
						HLCD_voidSendCommand(DISPLAY_CLEAR);
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
    282e:	a1 c0       	rjmp	.+322    	; 0x2972 <main+0x5a0>
						break;
					}
					HLCD_voidSendData(LOCAL_PIN);
    2830:	8d ad       	ldd	r24, Y+61	; 0x3d
    2832:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <HLCD_voidSendData>
					key=LOCAL_PIN;
    2836:	8d ad       	ldd	r24, Y+61	; 0x3d
    2838:	8a af       	std	Y+58, r24	; 0x3a
					switch(key){
    283a:	8a ad       	ldd	r24, Y+58	; 0x3a
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	3f af       	std	Y+63, r19	; 0x3f
    2842:	2e af       	std	Y+62, r18	; 0x3e
    2844:	8e ad       	ldd	r24, Y+62	; 0x3e
    2846:	9f ad       	ldd	r25, Y+63	; 0x3f
    2848:	8b 32       	cpi	r24, 0x2B	; 43
    284a:	91 05       	cpc	r25, r1
    284c:	c1 f0       	breq	.+48     	; 0x287e <main+0x4ac>
    284e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2850:	3f ad       	ldd	r19, Y+63	; 0x3f
    2852:	2c 32       	cpi	r18, 0x2C	; 44
    2854:	31 05       	cpc	r19, r1
    2856:	3c f4       	brge	.+14     	; 0x2866 <main+0x494>
    2858:	8e ad       	ldd	r24, Y+62	; 0x3e
    285a:	9f ad       	ldd	r25, Y+63	; 0x3f
    285c:	8a 32       	cpi	r24, 0x2A	; 42
    285e:	91 05       	cpc	r25, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <main+0x492>
    2862:	43 c0       	rjmp	.+134    	; 0x28ea <main+0x518>
    2864:	41 ce       	rjmp	.-894    	; 0x24e8 <main+0x116>
    2866:	2e ad       	ldd	r18, Y+62	; 0x3e
    2868:	3f ad       	ldd	r19, Y+63	; 0x3f
    286a:	2d 32       	cpi	r18, 0x2D	; 45
    286c:	31 05       	cpc	r19, r1
    286e:	09 f1       	breq	.+66     	; 0x28b2 <main+0x4e0>
    2870:	8e ad       	ldd	r24, Y+62	; 0x3e
    2872:	9f ad       	ldd	r25, Y+63	; 0x3f
    2874:	8f 32       	cpi	r24, 0x2F	; 47
    2876:	91 05       	cpc	r25, r1
    2878:	09 f4       	brne	.+2      	; 0x287c <main+0x4aa>
    287a:	53 c0       	rjmp	.+166    	; 0x2922 <main+0x550>
    287c:	35 ce       	rjmp	.-918    	; 0x24e8 <main+0x116>
					case '+':
						result=operand1+operand2;
    287e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2880:	8b ad       	ldd	r24, Y+59	; 0x3b
    2882:	89 0f       	add	r24, r25
    2884:	89 af       	std	Y+57, r24	; 0x39
						HLCD_voidGOTO(3,0);
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
						HLCD_voidSendString("Result=");
    288e:	8e e6       	ldi	r24, 0x6E	; 110
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
						HLCD_voidGOTO(3,7);
    2896:	83 e0       	ldi	r24, 0x03	; 3
    2898:	67 e0       	ldi	r22, 0x07	; 7
    289a:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
						HLCD_voidSendNumber(result);
    289e:	89 ad       	ldd	r24, Y+57	; 0x39
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	a0 e0       	ldi	r26, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <HLCD_voidSendNumber>
    28b0:	1b ce       	rjmp	.-970    	; 0x24e8 <main+0x116>
						break;
					case '-':
						result=operand1-operand2;
    28b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    28b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    28b6:	29 2f       	mov	r18, r25
    28b8:	28 1b       	sub	r18, r24
    28ba:	82 2f       	mov	r24, r18
    28bc:	89 af       	std	Y+57, r24	; 0x39
						HLCD_voidGOTO(3,0);
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
						HLCD_voidSendString("Result=");
    28c6:	8e e6       	ldi	r24, 0x6E	; 110
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
						HLCD_voidGOTO(3,7);
    28ce:	83 e0       	ldi	r24, 0x03	; 3
    28d0:	67 e0       	ldi	r22, 0x07	; 7
    28d2:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
						HLCD_voidSendNumber(result);
    28d6:	89 ad       	ldd	r24, Y+57	; 0x39
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e0       	ldi	r26, 0x00	; 0
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <HLCD_voidSendNumber>
    28e8:	ff cd       	rjmp	.-1026   	; 0x24e8 <main+0x116>
						break;
					case '*':
						result=operand1*operand2;
    28ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ee:	98 9f       	mul	r25, r24
    28f0:	80 2d       	mov	r24, r0
    28f2:	11 24       	eor	r1, r1
    28f4:	89 af       	std	Y+57, r24	; 0x39
						HLCD_voidGOTO(3,0);
    28f6:	83 e0       	ldi	r24, 0x03	; 3
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
						HLCD_voidSendString("Result=");
    28fe:	8e e6       	ldi	r24, 0x6E	; 110
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
						HLCD_voidGOTO(3,7);
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	67 e0       	ldi	r22, 0x07	; 7
    290a:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
						HLCD_voidSendNumber(result);
    290e:	89 ad       	ldd	r24, Y+57	; 0x39
    2910:	88 2f       	mov	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <HLCD_voidSendNumber>
    2920:	e3 cd       	rjmp	.-1082   	; 0x24e8 <main+0x116>
						break;
					case '/':
						if(operand2 !=0){
    2922:	8b ad       	ldd	r24, Y+59	; 0x3b
    2924:	88 23       	and	r24, r24
    2926:	e1 f0       	breq	.+56     	; 0x2960 <main+0x58e>
							result=operand1/operand2;
    2928:	8c ad       	ldd	r24, Y+60	; 0x3c
    292a:	9b ad       	ldd	r25, Y+59	; 0x3b
    292c:	69 2f       	mov	r22, r25
    292e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__udivmodqi4>
    2932:	89 af       	std	Y+57, r24	; 0x39
							HLCD_voidGOTO(3,0);
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
							HLCD_voidSendString("Result=");
    293c:	8e e6       	ldi	r24, 0x6E	; 110
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
							HLCD_voidGOTO(3,7);
    2944:	83 e0       	ldi	r24, 0x03	; 3
    2946:	67 e0       	ldi	r22, 0x07	; 7
    2948:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
							HLCD_voidSendNumber(result);
    294c:	89 ad       	ldd	r24, Y+57	; 0x39
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <HLCD_voidSendNumber>
    295e:	c4 cd       	rjmp	.-1144   	; 0x24e8 <main+0x116>
						}
						else {
							HLCD_voidGOTO(3,0);
    2960:	83 e0       	ldi	r24, 0x03	; 3
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
							HLCD_voidSendString('Result= inf');
    2968:	86 e6       	ldi	r24, 0x66	; 102
    296a:	9e e6       	ldi	r25, 0x6E	; 110
    296c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    2970:	bb cd       	rjmp	.-1162   	; 0x24e8 <main+0x116>
	}




}
    2972:	ef 96       	adiw	r28, 0x3f	; 63
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <Task2>:

	}
}
 */

void Task2(void){
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	0f 92       	push	r0
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	u8 LOCAL_PIN=KEY_NOT_PRESSED;
    298e:	8f ef       	ldi	r24, 0xFF	; 255
    2990:	89 83       	std	Y+1, r24	; 0x01
	LOCAL_PIN=HKEYPAD_u8GetPressedKeyMatrixMode();
    2992:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <HKEYPAD_u8GetPressedKeyMatrixMode>
    2996:	89 83       	std	Y+1, r24	; 0x01
	if(LOCAL_PIN!=KEY_NOT_PRESSED){
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	8f 3f       	cpi	r24, 0xFF	; 255
    299c:	19 f1       	breq	.+70     	; 0x29e4 <Task2+0x60>
		if(LOCAL_PIN=='1'){
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	81 33       	cpi	r24, 0x31	; 49
    29a2:	29 f4       	brne	.+10     	; 0x29ae <Task2+0x2a>
			HLCD_voidSendString("Martina");
    29a4:	86 e7       	ldi	r24, 0x76	; 118
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    29ac:	1b c0       	rjmp	.+54     	; 0x29e4 <Task2+0x60>
		}
		else if(LOCAL_PIN=='2'){
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	82 33       	cpi	r24, 0x32	; 50
    29b2:	49 f4       	brne	.+18     	; 0x29c6 <Task2+0x42>
			HLCD_voidGOTO(1,0);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
			HLCD_voidSendString("Mofied");
    29bc:	8e e7       	ldi	r24, 0x7E	; 126
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <Task2+0x60>
		}
		else if(LOCAL_PIN=='3'){
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	83 33       	cpi	r24, 0x33	; 51
    29ca:	49 f4       	brne	.+18     	; 0x29de <Task2+0x5a>
			HLCD_voidGOTO(2,0);
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	0e 94 9d 10 	call	0x213a	; 0x213a <HLCD_voidGOTO>
			HLCD_voidSendString("Maurice");
    29d4:	85 e8       	ldi	r24, 0x85	; 133
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendString>
    29dc:	03 c0       	rjmp	.+6      	; 0x29e4 <Task2+0x60>
		}
		else {

			HLCD_voidSendCommand(DISPLAY_CLEAR);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	0e 94 67 09 	call	0x12ce	; 0x12ce <HLCD_voidSendCommand>
		}

	}
}
    29e4:	0f 90       	pop	r0
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	08 95       	ret

000029ec <__mulsi3>:
    29ec:	62 9f       	mul	r22, r18
    29ee:	d0 01       	movw	r26, r0
    29f0:	73 9f       	mul	r23, r19
    29f2:	f0 01       	movw	r30, r0
    29f4:	82 9f       	mul	r24, r18
    29f6:	e0 0d       	add	r30, r0
    29f8:	f1 1d       	adc	r31, r1
    29fa:	64 9f       	mul	r22, r20
    29fc:	e0 0d       	add	r30, r0
    29fe:	f1 1d       	adc	r31, r1
    2a00:	92 9f       	mul	r25, r18
    2a02:	f0 0d       	add	r31, r0
    2a04:	83 9f       	mul	r24, r19
    2a06:	f0 0d       	add	r31, r0
    2a08:	74 9f       	mul	r23, r20
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	65 9f       	mul	r22, r21
    2a0e:	f0 0d       	add	r31, r0
    2a10:	99 27       	eor	r25, r25
    2a12:	72 9f       	mul	r23, r18
    2a14:	b0 0d       	add	r27, r0
    2a16:	e1 1d       	adc	r30, r1
    2a18:	f9 1f       	adc	r31, r25
    2a1a:	63 9f       	mul	r22, r19
    2a1c:	b0 0d       	add	r27, r0
    2a1e:	e1 1d       	adc	r30, r1
    2a20:	f9 1f       	adc	r31, r25
    2a22:	bd 01       	movw	r22, r26
    2a24:	cf 01       	movw	r24, r30
    2a26:	11 24       	eor	r1, r1
    2a28:	08 95       	ret

00002a2a <__udivmodqi4>:
    2a2a:	99 1b       	sub	r25, r25
    2a2c:	79 e0       	ldi	r23, 0x09	; 9
    2a2e:	04 c0       	rjmp	.+8      	; 0x2a38 <__udivmodqi4_ep>

00002a30 <__udivmodqi4_loop>:
    2a30:	99 1f       	adc	r25, r25
    2a32:	96 17       	cp	r25, r22
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <__udivmodqi4_ep>
    2a36:	96 1b       	sub	r25, r22

00002a38 <__udivmodqi4_ep>:
    2a38:	88 1f       	adc	r24, r24
    2a3a:	7a 95       	dec	r23
    2a3c:	c9 f7       	brne	.-14     	; 0x2a30 <__udivmodqi4_loop>
    2a3e:	80 95       	com	r24
    2a40:	08 95       	ret

00002a42 <__udivmodsi4>:
    2a42:	a1 e2       	ldi	r26, 0x21	; 33
    2a44:	1a 2e       	mov	r1, r26
    2a46:	aa 1b       	sub	r26, r26
    2a48:	bb 1b       	sub	r27, r27
    2a4a:	fd 01       	movw	r30, r26
    2a4c:	0d c0       	rjmp	.+26     	; 0x2a68 <__udivmodsi4_ep>

00002a4e <__udivmodsi4_loop>:
    2a4e:	aa 1f       	adc	r26, r26
    2a50:	bb 1f       	adc	r27, r27
    2a52:	ee 1f       	adc	r30, r30
    2a54:	ff 1f       	adc	r31, r31
    2a56:	a2 17       	cp	r26, r18
    2a58:	b3 07       	cpc	r27, r19
    2a5a:	e4 07       	cpc	r30, r20
    2a5c:	f5 07       	cpc	r31, r21
    2a5e:	20 f0       	brcs	.+8      	; 0x2a68 <__udivmodsi4_ep>
    2a60:	a2 1b       	sub	r26, r18
    2a62:	b3 0b       	sbc	r27, r19
    2a64:	e4 0b       	sbc	r30, r20
    2a66:	f5 0b       	sbc	r31, r21

00002a68 <__udivmodsi4_ep>:
    2a68:	66 1f       	adc	r22, r22
    2a6a:	77 1f       	adc	r23, r23
    2a6c:	88 1f       	adc	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	1a 94       	dec	r1
    2a72:	69 f7       	brne	.-38     	; 0x2a4e <__udivmodsi4_loop>
    2a74:	60 95       	com	r22
    2a76:	70 95       	com	r23
    2a78:	80 95       	com	r24
    2a7a:	90 95       	com	r25
    2a7c:	9b 01       	movw	r18, r22
    2a7e:	ac 01       	movw	r20, r24
    2a80:	bd 01       	movw	r22, r26
    2a82:	cf 01       	movw	r24, r30
    2a84:	08 95       	ret

00002a86 <__prologue_saves__>:
    2a86:	2f 92       	push	r2
    2a88:	3f 92       	push	r3
    2a8a:	4f 92       	push	r4
    2a8c:	5f 92       	push	r5
    2a8e:	6f 92       	push	r6
    2a90:	7f 92       	push	r7
    2a92:	8f 92       	push	r8
    2a94:	9f 92       	push	r9
    2a96:	af 92       	push	r10
    2a98:	bf 92       	push	r11
    2a9a:	cf 92       	push	r12
    2a9c:	df 92       	push	r13
    2a9e:	ef 92       	push	r14
    2aa0:	ff 92       	push	r15
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	ca 1b       	sub	r28, r26
    2ab0:	db 0b       	sbc	r29, r27
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	09 94       	ijmp

00002abe <__epilogue_restores__>:
    2abe:	2a 88       	ldd	r2, Y+18	; 0x12
    2ac0:	39 88       	ldd	r3, Y+17	; 0x11
    2ac2:	48 88       	ldd	r4, Y+16	; 0x10
    2ac4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ac6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ac8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aca:	8c 84       	ldd	r8, Y+12	; 0x0c
    2acc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ace:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ad0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ad2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ad4:	df 80       	ldd	r13, Y+7	; 0x07
    2ad6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ad8:	fd 80       	ldd	r15, Y+5	; 0x05
    2ada:	0c 81       	ldd	r16, Y+4	; 0x04
    2adc:	1b 81       	ldd	r17, Y+3	; 0x03
    2ade:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae2:	ce 0f       	add	r28, r30
    2ae4:	d1 1d       	adc	r29, r1
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	ed 01       	movw	r28, r26
    2af2:	08 95       	ret

00002af4 <_exit>:
    2af4:	f8 94       	cli

00002af6 <__stop_program>:
    2af6:	ff cf       	rjmp	.-2      	; 0x2af6 <__stop_program>
